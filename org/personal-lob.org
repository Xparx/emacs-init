#+STARTUP: hideblocks
#+title: My local babel library

* How do I insert code block header :var in exported code block in org-mode
[[https://emacs.stackexchange.com/questions/27610/how-do-i-insert-code-block-header-var-in-exported-code-block-in-org-mode][source]]

#+NAME: expand-src-block
#+BEGIN_SRC elisp :var block-name="" datum="" info="" lang="" body="" :exports none :eval
(save-excursion
  (org-babel-goto-named-src-block block-name)
  (setq datum (org-element-at-point))
  t)
(setq info (org-babel-get-src-block-info nil datum))
(setq lang (nth 0 info))
(setq body (org-babel-expand-src-block nil info))
(format "%s" body)
#+END_SRC

To use this function on an existing code block as /e.g./
#+name: print-abc
#+BEGIN_SRC shell :var data="ABC" :exports none
echo -n $data
#+END_SRC

#+RESULTS: print-abc
: ABC

Create a block as follows
#+BEGIN_SRC shell :noweb yes :exports code
<<expand-src-block(block-name="print-abc")>>
#+END_SRC

#+name: py-print-abc
#+BEGIN_SRC python :var data="ABC" :exports none
print(data)
#+END_SRC


#+BEGIN_SRC python :noweb yes :exports code
<<expand-src-block(block-name="py-print-abc")>>
#+END_SRC


#+name: ipy-print-abc
#+BEGIN_SRC ipython :var data=my_bots :exports none
print(data)
#+END_SRC

#+BEGIN_SRC python :noweb yes :exports code
<<expand-src-block(block-name="ipy-print-abc")>>
#+END_SRC


* Python blocks

** Initiate ob-ipython session with defaut settings

#+name: initialize-ob-ipython-session
#+begin_src ipython :session :exports code :results silent
import sys
import os
from importlib import reload
sys.path.insert(0, 'lib/')
sys.path.insert(0, 'external/')
#+end_src

To use this as default when opening a buffer enter the following code in an local varaible block =M-x add-file-local-variable RET eval RET (org-sbe initialize-ob-ipython-session)=

#+name: load-ob-ipython-libraries
#+begin_src ipython :session :exports code :results silent
import pandas as pd
import numpy as np
import scipy.stats as stats
import re
pd.set_option('precision',3)
#+end_src

** Plotting configurations in ipython

#+name: deprecated-set-ob-ipython-default-plot-configs-old
#+begin_src ipython :session :exports code :results silent
%matplotlib tk
import seaborn as sns
import matplotlib as mpl
plt.style.use('seaborn-whitegrid')
mpl.rc('text', usetex=False)
mpl.rc('font', size='18')
# sns.set_palette('muted')
sns.set(style="whitegrid", palette="muted", color_codes=True, font_scale=2)
#+end_src

#+name: set-ob-ipython-default-plot-configs
#+begin_src ipython :session :exports code :results silent
import matplotlib as mpl
import matplotlib.pyplot as plt
import seaborn as sns

color_pallet = "muted"
plt.style.use('seaborn-ticks')
sns.set_color_codes(color_pallet)
# sns.set_context("notebook", font_scale=1.5)
# sns.set_palette(color_pallet)
#+end_src

To check the default rc paramters look in to the variable and set current ones with =mpl.rcParams=. Se also =mpl.rc_context= below.
#+name: default-rc-params
#+begin_src ipython :session :exports code :results silent
mpl.rcParamsDefault
# mpl.rcParams['text.usetex'] = True
# mpl.rcParams['text.latex.preamble'] = [r"\usepackage[charter]{mathdesign}"]
# mpl.rcParams['font.family'] = ['serif']
# mpl.rcParams['font.size'] = 10
# plt.rc("text", usetex=True)
#+end_src

#+name: example-ipython-plot
#+begin_src ipython :session :exports code :results silent :var context="notebook"
%matplotlib tk
import numpy as np

# with plt.style.context(('seaborn-ticks')):
with mpl.rc_context(rc={'font.family': ['serif']}):
    sns.set_context(context, font_scale=1.5)
    # mpl.rcParams['text.usetex'] = True
    fig, ax = plt.subplots(nrows=1, ncols=2, facecolor='w', edgecolor='k', figsize=(18,8), dpi=75, sharey=True)
    __ = ax[0].plot(np.linspace(0, 1), np.sin(np.linspace(0, 2 * np.pi)), 'b-o')
    __ = ax[0].minorticks_on()
    __ = ax[0].grid(which="major", color='darkgray', linestyle='--', linewidth=1)
    __ = ax[0].grid(which="minor", color='lightgray', linestyle='--', linewidth=0.5)
    __ = ax[0].set(xlabel="$\\tau$")
    # __ = ax[0].set(ylabel="Amplitude", rotation='horizontal')
    __ = ax[0].set_ylabel("Amplitude",  color='gray', rotation='horizontal')
    __ = ax[0].yaxis.set_label_coords(-0.01, 1.01)
    __ = ax[1].hist(np.sin(np.linspace(0, 20 * np.pi * np.random.rand(), num=1000)),bins=100, orientation='horizontal', density=True)
    __ = ax[1].set(xlabel="Freq")
    __ = sns.despine(offset=0, trim=False)
    for x in ax:
        __ = x.tick_params(which='minor', # This needs to be after despine or it does not stick
                           top=False, # turn off top ticks
                           left=False, # turn off left ticks
                           right=False,  # turn off right ticks
                           bottom=False) # turn off bottom ticks
        __ = x.set_axisbelow(True) # This can be put after minorticks_on line.

    __ = fig.tight_layout(pad=0)
#+end_src

#+name: save-figure-all-formats
#+begin_src ipython :session :exports code :results output file drawer var: default_fname="/tmp/temporary_plot"
if 'fname' not in locals():
    fname = default_fname

if not os.path.exists(fname):
    os.makedirs(fname, exist_ok=True)

fig.savefig(os.path.join(fname, "pixel.png"), transparent=False)
fig.savefig(os.path.join(fname, "vector.svg"), transparent=False)
mpld3.save_html(fig, os.path.join(fname, "web.html"))

# print(fname, sep=",", end="")
print(fname+"/pixel.png", sep=",", end="")
#+end_src
