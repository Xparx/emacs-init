#+TITLE: Emacs Init
#+OPTIONS: toc:2 num:nil ^:nil
#+STARTUP:  hideblocks

#+begin_quote
  Emacs outshines all other editing software in approximately the same
  way that the noonday sun does the stars. It is not just bigger and
  brighter; it simply makes everything else vanish.

  -- Neal Stephenson, "In the Beginning was the Command Line"
#+end_quote

* Implementation
  :PROPERTIES:
  :CUSTOM_ID: implementation
  :END:
** Emacs init basics
*** Load path etc
    #+name: emacs-init-load-paths
    #+begin_src emacs-lisp
      (add-to-list 'load-path emacs-init-dir)
      (setq autoload-file (concat emacs-init-dir "loaddefs.el"))
      (setq custom-file (concat emacs-init-dir "custom.el"))
    #+end_src
*** Ubiquitous Packages
    which should be loaded on startup rather than
    autoloaded on demand since they are likely to be used in every
    session.
    #+name: emacs-init-load-on-startup
    #+begin_src emacs-lisp
      (require 'saveplace)
      (require 'ffap)
      (require 'uniquify)
      (require 'ansi-color)
      (require 'recentf)
    #+end_src
*** ELPA archive repositories

    This is an important package that should be imported and synced.
    #+begin_src emacs-lisp :tangle yes
      (el-get 'sync '(package))
    #+end_src

*** Functions for loading other parts of the emacs init
    This can be used to load other files with org code.

    #+name: emacs-init-load
    #+begin_src emacs-lisp
      (defun emacs-init-load (file &optional header-or-tag)
        "Load configuration from other emacs-init-*.org files.
         If the optional argument is the id of a subtree then only
         configuration from within that subtree will be loaded.  If it is
         not an id then it will be interpreted as a tag, and only subtrees
         marked with the given tag will be loaded.

         ! STARTER-KIT Configurations:
         For example, to load all of emacs-init-lisp.org simply
         add (emacs-init-load \"lisp\") to your configuration.
         To load only the 'window-system' config from
         emacs-init-misc-recommended.org add
      (emacs-init-load \"misc-recommended\" \"window-system\")
      to your configuration."
       (let ((file (expand-file-name (if (string-match "emacs-init-.+\.org" file)
                         file
                       (format "emacs-init-%s.org" file))
                         emacs-init-dir)))
         (org-babel-load-file
          (if header-or-tag
          (let* ((base (file-name-nondirectory file))
                 (dir  (file-name-directory file))
                 (partial-file (expand-file-name
                        (concat "." (file-name-sans-extension base)
                            ".part." header-or-tag ".org")
                        dir)))
            (unless (file-exists-p partial-file)
              (with-temp-file partial-file
                (insert
                 (with-temp-buffer
               (insert-file-contents file)
               (save-excursion
                 (condition-case nil ;; collect as a header
                     (progn
                   (org-link-search (concat"#"header-or-tag))
                   (org-narrow-to-subtree)
                   (buffer-string))
                   (error ;; collect all entries with as tags
                    (let (body)
                  (org-map-entries
                   (lambda ()
                     (save-restriction
                       (org-narrow-to-subtree)
                       (setq body (concat body "\n" (buffer-string)))))
                   header-or-tag)
                  body))))))))
            partial-file)
            file))))
    #+end_src

** Emacs init core
   :PROPERTIES:
   :CUSTOM_ID: emacs-init-core
   :END:

*** Personal information

    #+begin_src emacs-lisp
      (setq user-full-name "Andreas Tj√§rnberg"
            user-mail-address "andreas.tjarnberg@fripost.org")
    #+end_src

*** Emacs bindings
    :PROPERTIES:
    :CUSTOM_ID: emacs-bindings
    :END:
    Custom keybindings
**** Global visual line mode
     Implemented in init.el
**** Align your code in a pretty way.
     #+begin_src emacs-lisp
       (global-set-key (kbd "C-x \\") 'align-regexp)
     #+end_src

**** Whitespace cleanup
     #+begin_src emacs-lisp
       (global-set-key (kbd "C-c w") 'whitespace-cleanup)
     #+end_src

**** Completion that uses many different methods to find options
     #+begin_src emacs-lisp
       (global-set-key (kbd "M-/") 'hippie-expand)
     #+end_src

**** Font size
     #+begin_src emacs-lisp
       (define-key global-map (kbd "C-+") 'text-scale-increase)
       (define-key global-map (kbd "C--") 'text-scale-decrease)
     #+end_src

**** Use regexp searches by default
     #+begin_src emacs-lisp
       (global-set-key (kbd "C-s") 'isearch-forward-regexp)
       (global-set-key (kbd "C-r") 'isearch-backward-regexp)
       (global-set-key (kbd "C-M-s") 'isearch-forward)
       (global-set-key (kbd "C-M-r") 'isearch-backward)
     #+end_src

**** File finding
     #+begin_src emacs-lisp
       (global-set-key (kbd "C-x M-f") 'ido-find-file-other-window)
       (global-set-key (kbd "C-x C-M-f") 'find-file-in-project)
       (global-set-key (kbd "C-x C-p") 'find-file-at-point)
       (global-set-key (kbd "C-c y") 'bury-buffer)
       (global-set-key (kbd "C-c r") 'revert-buffer)
       (global-set-key (kbd "M-`") 'file-cache-minibuffer-complete)
       (global-set-key (kbd "C-x C-b") 'ibuffer)
     #+end_src

     Ibuffer settings, source [[http://www.emacswiki.org/emacs/IbufferMode][here]]. Lots of interesting stuff in there.
     #+begin_src emacs-lisp
       (setq ibuffer-saved-filter-groups
             (quote (("default"
                      ("org-mode" (mode . org-mode))
                      ("MATLAB" (mode . matlab-mode))
                      ("LaTeX" (or
                                (mode . latex-mode)
                                (mode . bibtex-mode)))
                      ("planner" (or
                                  (name . "^\\*Calendar\\*$")
                                  (name . "^diary$")))
                      ("emacs" (or
                                (name . "^\\*scratch\\*$")
                                (name . "^\\*ielm\\*$")
                                (name . "^\\*Completions\\*$")
                                (name . "^\\*Messages\\*$")))
                      ("Magit" (name . "^\\*magit.*\\*$"))
                      ("dired" (mode . dired-mode))
                      ("gnus" (or
                               (mode . message-mode)
                               (mode . bbdb-mode)
                               (mode . mail-mode)
                               (mode . gnus-group-mode)
                               (mode . gnus-summary-mode)
                               (mode . gnus-article-mode)
                               (name . "^\\.bbdb$")
                               (name . "^\\.newsrc-dribble")))))))
     #+end_src

     Ibuffer mode hook
     #+begin_src emacs-lisp
       (add-hook 'ibuffer-mode-hook
                     (lambda ()
                       (ibuffer-switch-to-saved-filter-groups "default")))
     #+end_src

**** Buffer cycling.
     #+begin_src emacs-lisp
       (global-set-key (kbd "C-<prior>") 'previous-buffer) ; Ctrl+PageDown
       (global-set-key (kbd "C-<next>") 'next-buffer) ; Ctrl+PageUp
     #+end_src

**** Help should search more than just commands
     #+begin_src emacs-lisp
       (global-set-key (kbd "C-h a") 'apropos)
     #+end_src

**** Rgrep
     Rgrep is infinitely useful in multi-file projects.
     (see [[elisp:(describe-function 'rgrep)]])
     #+begin_src emacs-lisp
       (define-key global-map "\C-x\C-r" 'rgrep)
     #+end_src

*** Magit
    :PROPERTIES:
    :CUSTOM_ID: magit
    :END:
**** El-get magit
     Install manually
     #+begin_src emacs-lisp :tangle no
       (el-get 'sync '(magit))
     #+end_src

**** Magit key-bindings
     It's handy to have a shortcut to magit
     #+begin_src emacs-lisp
       (when (el-get-package-exists-p "magit")
         (global-set-key (kbd "C-c m") 'magit-status))
     #+end_src

**** Redefine magit-status behaviour
     Source: [[http://whattheemacsd.com/setup-magit.el-01.html][here]]

     This makes a fullscreen magit status buffer and when
     quitting resets to previous setup.

     Could not get this to work at first. Had to wrap the
     last key definition in an eval-after-load.

     #+begin_src emacs-lisp
       (when (el-get-package-exists-p "magit")

         (defadvice magit-status (around magit-fullscreen activate)
           (window-configuration-to-register :magit-fullscreen)
           ad-do-it
           (delete-other-windows))

         (defun magit-quit-session ()
           "Restores the previous window configuration and kills the magit buffer"
           (interactive)
           (kill-buffer)
           (jump-to-register :magit-fullscreen))

         (eval-after-load 'magit
           '(define-key magit-status-mode-map (kbd "q") 'magit-quit-session)))
     #+end_src

**** Delete trailing whitespaces from magit buffer
     [[https://gist.github.com/vermiculus/8177389][source]] and [[https://stackoverflow.com/questions/20127377/how-can-i-remove-trailing-whitespace-from-a-hunk-in-magit][stackoverflow]] question

     #+begin_src emacs-lisp
       (when (el-get-package-exists-p "magit")
         (defun *magit-delete-trailing-whitespace-from-file ()
           "Removes whitespace from the current item."
           (interactive)
           (save-excursion
             (magit-visit-item)
             (delete-trailing-whitespace)
             (save-buffer)
             (kill-buffer))
           (magit-refresh))

         (eval-after-load 'magit
           '(define-key magit-status-mode-map (kbd "w") '*magit-delete-trailing-whitespace-from-file)))
     #+end_src

*** Git-gutter
    Git-gutter-fringe gives git diff info in the fringes.
    Turn on git-gutter for all relevant buffers
    #+begin_src emacs-lisp
      (when (el-get-package-exists-p "git-gutter-fringe")
        (global-git-gutter-mode 1)
        (setq git-gutter-fr:side 'right-fringe)
        (setq git-gutter:hide-gutter t)
        (setq git-gutter:verbosity 2))
    #+end_src

*** Misc
    :PROPERTIES:
    :CUSTOM_ID: misc
    :END:
**** Don't clutter up directories with files~ or #files#
     Rather than saving backup files scattered all over the file system,
     let them live in the =backups/= directory inside of the emacs init.
     #+begin_src emacs-lisp
       (setq backup-directory-alist `(("." . ,(expand-file-name
                                               (concat emacs-init-dir "backups")))))
     #+end_src

     Autosave to specific directory: [[http://emacsredux.com/blog/2013/05/09/keep-backup-and-auto-save-files-out-of-the-way/][source]]. This does not work... as
     is always the case. This stops the autosave feature for some
     reason
     #+begin_src emacs-lisp :tangle no
       (setq auto-save-file-name-transforms
             `((".*" ,(expand-file-name
                       (concat emacs-init-dir "autosave")) t)))
     #+end_src

**** Make colors work in M-x shell
     #+begin_src emacs-lisp
       (add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
     #+end_src

**** Color Themes
     :PROPERTIES:
     :CUSTOM_ID: color-theme
     :END:
     The [[http://www.nongnu.org/color-theme/][Color Themes]] package provides support for changing, saving,
     sharing Emacs color themes.  To view and apply color themes available
     on your system run =M-x color-theme-select=.  See the color theme
     website and EmacsWiki pages for more information.
     - http://www.nongnu.org/color-theme/
     - http://www.emacswiki.org/emacs/ColorTheme
     - https://github.com/bbatsov/zenburn-emacs


     Add list to load-theme path. use [[elisp:load-theme][load-theme]] RET "theme" to choose a theme.
     #+begin_src emacs-lisp
       (add-to-list 'custom-theme-load-path
                    (concat emacs-init-dir "themes"))
     #+end_src

     Load my prefered theme if availible
     #+begin_src emacs-lisp :tangle no
       (condition-case nil
           (load-theme 'my-z t)
         (error "no theme loaded"))
     #+end_src

**** Aspell and dictionaries
     #+begin_src emacs-lisp
       (setq-default ispell-program-name "aspell")
     #+end_src

     To fix [[http://www.emacswiki.org/emacs/FlySpell#toc8][this]] bug
     #+begin_src emacs-lisp
       (setq ispell-list-command "--list")
     #+end_src

     Set default ispell dict
     #+begin_src emacs-lisp
       (setq ispell-dictionary "en")
     #+end_src

**** Open my specific bashrc files in the right mode
     #+begin_src emacs-lisp
       (add-to-list 'auto-mode-alist '(".bashrc\\'" . shell-script-mode))
       (add-to-list 'auto-mode-alist '(".bash_variables\\'" . shell-script-mode))
       (add-to-list 'auto-mode-alist '(".bash_aliases\\'" . shell-script-mode))
     #+end_src

**** Transparently open compressed files
     #+begin_src emacs-lisp
       (auto-compression-mode t)
     #+end_src

**** Save a list of recent files visited.
     #+begin_src emacs-lisp
       (recentf-mode 1)
     #+end_src
**** Save last place in visited files
     #+begin_src emacs-lisp
       (setq save-place-file (concat emacs-init-dir "saved-places"))
       (setq-default save-place t)
     #+end_src
**** Highlight matching parentheses when the point is on them.

     #+name: emacs-init-match-parens
     #+begin_src emacs-lisp
       (show-paren-mode 1)
       (set-face-background 'show-paren-match-face (face-background 'default))
       (set-face-foreground 'show-paren-match-face "#def")
       (set-face-attribute 'show-paren-match-face nil :weight 'extra-bold)
     #+end_src

**** Alias for yes-no to y-n choice, init random seed.
     #+begin_src emacs-lisp
       (defalias 'yes-or-no-p 'y-or-n-p)
       ;; Seed the random-number generator
       (random t)
     #+end_src
**** Tramp mode defaults
     #+begin_src emacs-lisp
       (setq tramp-default-method "ssh")
     #+end_src

**** Remove trailing whitespaces
     :PROPERTIES:
     :tangle:   no
     :END:
     This is utterly broken especially with python. Disabled for now

     #+begin_src emacs-lisp
       (add-hook 'before-save-hook 'whitespace-cleanup)
     #+end_src

     The below changes the behaviour of whitespace-cleanup to not
     remove whitespaces on empty lines. Source [[http://stackoverflow.com/questions/1412913/show-trailing-whitespace-on-emacs-only-on-non-empty-lines][here]]
     #+begin_src emacs-lisp
       (setq whitespace-trailing-regexp "\\b.*?\\(\\(\t\\| \\|\xA0\\|\x8A0\\|\x920\\|\xE20\\|\xF20\\)+\\)$")
     #+end_src

**** Set exec-path same as PATH in bash
     Source: [[http://stackoverflow.com/questions/9663396/how-do-i-make-emacs-recognize-bash-environment-variables-for-compilation][stackoverflow]]

     Using package is perhaps better, Install manually
     #+begin_src emacs-lisp :tangle no
       (el-get 'sync '(exec-path-from-shell))
     #+end_src

     #+begin_src emacs-lisp
       (when (el-get-package-exists-p "exec-path-from-shell")
         (exec-path-from-shell-initialize))
     #+end_src

**** Default to unified diffs
     #+begin_src emacs-lisp
       (setq diff-switches "-u")
     #+end_src

**** Dired mode
     When in dired mode 'a' will find alternative file/dir in the same
     buffer.  source [[http://emacsblog.org/2007/02/25/quick-tip-reuse-dired-buffers/][here]]
     #+begin_src emacs-lisp
       (put 'dired-find-alternate-file 'disabled nil)
     #+end_src

**** Enable the package window-margin
     Window-margin sets a soft wrap on lines at the
     fill-column width. This breaks truncate long line
     behaviour for some reason after it is used. Heads up!
     #+begin_src emacs-lisp
       (when (el-get-package-exists-p "window-margin")
         (global-set-key [f9] 'window-margin-mode))
     #+end_src

**** Hidepw-mode hides passwords between specified delimiters

     #+begin_src emacs-lisp
       (when (el-get-package-exists-p "hidepw")
         (setq hidepw-pattern " -\\(.*\\)- "))
     #+end_src

**** kill client buffer with C-x k
     [[http://www.emacswiki.org/emacs/EmacsClient#toc36][source]]
     #+begin_src emacs-lisp
       (add-hook 'server-switch-hook
                 (lambda ()
                   (when (current-local-map)
                     (use-local-map (copy-keymap (current-local-map))))
                   (when server-buffer-clients
                     (local-set-key (kbd "C-x k") 'server-edit))))
     #+end_src

*** LaTeX mode
    :PROPERTIES:
    :CUSTOM_ID: latex
    :END:
**** Fly spell mode for latex mode
     #+begin_src emacs-lisp
       (add-hook 'LaTeX-mode-hook 'flyspell-mode)
       (add-hook 'latex-mode-hook 'flyspell-mode)
     #+end_src

     Make sure spelling is handled nicely in latex mode.
     #+begin_src emacs-lisp
       (add-hook 'LaTeX-mode-hook (lambda () (setq ispell-parser 'tex)))
     #+end_src

**** Some auctex specific settings.
     :PROPERTIES:
     :CUSTOM_ID: auctex
     :END:
     Install and sync auctex repository with el-get manually.
     #+begin_src emacs-lisp :tangle no
       (el-get 'sync '(auctex))
     #+end_src

     Make emacs aware of auctex
     #+begin_src emacs-lisp
       (when (el-get-package-exists-p "auctex")
         (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
         (setq TeX-auto-save t)
         (setq TeX-parse-self t)
         (setq-default TeX-master nil)
         (add-hook 'LaTeX-mode-hook
                   (lambda ()
                     (push
                      '("latexmk" "latexmk -pdfdvi %s" TeX-run-TeX nil t
                        :help "Run Latexmk on file")
                      TeX-command-list))))
     #+end_src

**** RefTeX
     :PROPERTIES:
     :CUSTOM_ID: reftex
     :END:
     Install and sync reftex repository with el-get manually.
     #+begin_src emacs-lisp :tangle no
       (el-get 'sync '(reftex))
     #+end_src

     Set path to default bibfile.
     #+begin_src emacs-lisp
       (when (el-get-package-exists-p "reftex")
         (setq reftex-default-bibliography '("./refs.bib" "./bibliography.bib" "~/research/bibliography.bib")))
     #+end_src

     Turn on reftex-mode in Auctex mode.
     #+begin_src emacs-lisp
       (when (el-get-package-exists-p "reftex")
         (setq reftex-plug-into-AUCTeX t)
         (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
         (add-hook 'latex-mode-hook 'turn-on-reftex))
     #+end_src

*** Python
    :PROPERTIES:
    :CUSTOM_ID: python
    :END:
    Support for the Python programming language.
**** Use Python's python-mode.el instead of Emacs' python.el
     :PROPERTIES:
     :CUSTOM_ID: python-mode
     :END:
     Install and sync python-mode repository with el-get manually
     #+begin_src emacs-lisp :tangle no
       (el-get 'sync '(python-mode))
     #+end_src

**** Use IPython if =ipython= command is present
     :PROPERTIES:
     :CUSTOM_ID: ipython
     :END:
     Install and sync ipython repository with el-get manually.
     #+begin_src emacs-lisp :tangle no
       (el-get 'sync '(ipython))
     #+end_src
     If an =ipython= executable is on the path, then assume that
     IPython is the preferred method for python evaluation.
     #+begin_src emacs-lisp
       (when (executable-find "ipython")
         (setq org-babel-python-mode 'python-mode))
     #+end_src

**** Use Cython mode
     :PROPERTIES:
     :CUSTOM_ID: cython
     :tangle:   no
     :END:
     Install and sync cython-mode repository with el-get manually.
     #+begin_src emacs-lisp :tangle no
       (el-get 'sync '(cython-mode))
     #+end_src
     Set cython-mode file associations
     #+begin_src emacs-lisp
       (when (el-get-package-exists-p "cython-mode")
         (add-to-list 'auto-mode-alist '("\\.pyx\\'" . cython-mode))
         (add-to-list 'auto-mode-alist '("\\.pxd\\'" . cython-mode))
         (add-to-list 'auto-mode-alist '("\\.pxi\\'" . cython-mode)))
     #+end_src

**** Emacs ipython notebook
     Enables completion in ein buffer. This gives a bit of unexpected
     behaviour. No popup occure even though latest popup.el is
     installed. [[https://github.com/jhamrick/emacs/blob/master/.emacs.d/settings/python-settings.el][source]]
     #+begin_src emacs-lisp
       (when (el-get-package-exists-p "ein")
         (setq ein:use-auto-complete t
               ein:complete-on-dot nil
               ein:query-timeout 1000))
     #+end_src

     Python console arguments
     #+begin_src emacs-lisp
       (setq ein:console-args
             (if (system-is-linux)
                 '("--gui=wx" "--matplotlib=wx" "--colors=Linux")))
     #+end_src

     Shortcut function to load notebook
     #+begin_src emacs-lisp
       (defun load-ein ()
         (ein:notebooklist-load)
         (interactive)
         (ein:notebooklist-open))
     #+end_src

*** Code-modes
    :PROPERTIES:
    :CUSTOM_ID: coding
    :END:
**** cedet
     I am not sure what this does except enabling cedet when coding,
     whatever that means.

     #+begin_src emacs-lisp
       (require 'semantic/sb)
       (global-ede-mode 1)
       (semantic-mode 1)
     #+end_src

**** gnuplot-mode
     :PROPERTIES:
     :CUSTOM_ID: gnuplot
     :END:
     Install and sync gnuplot-mode repository with el-get manually.
     #+begin_src emacs-lisp :tangle no
       (el-get 'sync '(gnuplot-mode))
     #+end_src
     Associate .gp files with gnuplot.
     #+begin_src emacs-lisp
       (setq auto-mode-alist
             (append '(("\\.gp$" . gnuplot-mode)) auto-mode-alist))
     #+end_src

**** MATLAB-mode
     :PROPERTIES:
     :CUSTOM_ID: matlab
     :END:
     DONE: Matlab-mode fails to install because of cedet for some
     reason. Need to modify el-get recipe.

     Install and sync matlab-mode repository with el-get manually
     #+begin_src emacs-lisp :tangle no
       (el-get 'sync '(matlab-mode))
     #+end_src

     The indent function -1 or nil will couse functions to not indent
     #+begin_src emacs-lisp
       (when (el-get-package-exists-p "matlab-mode")
         (add-to-list 'auto-mode-alist '("\\.m$" . matlab-mode))
         (setq matlab-indent-function nil)
         (setq matlab-shell-command "matlab"))
     #+end_src

     Make sure matlab does not auto wrap lines. It's really enoying and
     it does not work! Do manually with 'M-q'
     #+begin_src emacs-lisp
       (when (el-get-package-exists-p "matlab-mode")
         (add-hook 'matlab-mode-hook '(lambda () (auto-fill-mode -1))))
     #+end_src

**** Maxima-mode
     :PROPERTIES:
     :tangle:   no
     :CUSTOM_ID: maxima
     :END:
     Install and sync maxima-mode repository with el-get manually
     #+begin_src emacs-lisp :tangle no
       (el-get 'sync '(maxima-mode))
     #+end_src

     Why is the load-path here so specific
     #+begin_src emacs-lisp
       (when (el-get-package-exists-p "maxima-mode")
         (setq auto-mode-alist (cons '("\\.max" . maxima-mode) auto-mode-alist))
         (setq load-path (cons  "/usr/share/maxima/5.9.2/emacs" load-path))
         (autoload 'maxima "maxima" "Running Maxima interactively" t)
         (autoload 'maxima-mode "maxima" "Maxima editing mode" t))
     #+end_src

*** Org Mode <3
    :PROPERTIES:
    :tangle:   yes
    :END:
    Install and sync org-mode repository with el-get
**** El-getting org-mode
     Install manually. This file will not load untill an el-get
     org-mode package is installed.
**** Org-Mode File association
     Both .org and .txt files should be associated with org-mode
     #+begin_src emacs-lisp
       (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
       (add-to-list 'auto-mode-alist '("\\.txt$" . org-mode))
     #+end_src

     Make it so that org-mode opens external pdf files in evince: [[http://stackoverflow.com/questions/8834633/how-do-i-make-org-mode-open-pdf-files-in-evince][source]].
     #+begin_src emacs-lisp
       (eval-after-load "org"
         '(progn (setcdr (assoc "\\.pdf\\'" org-file-apps) "evince %s")))
     #+end_src

**** Hide leading stars in structure outline
     #+begin_src emacs-lisp
       (setq org-hide-leading-stars t)
     #+end_src

**** Org-mode Global Keybindings
     :PROPERTIES:
     :CUSTOM_ID: org-global-keybindings
     :END:
     Two global Emacs bindings for Org-mode

     The [[http://orgmode.org/manual/Agenda-Views.html#Agenda-Views][Org-mode agenda]] is good to have close at hand
     #+begin_src emacs-lisp
       (define-key global-map "\C-ca" 'org-agenda)
     #+end_src

     Org-mode supports [[http://orgmode.org/manual/Hyperlinks.html#Hyperlinks][links]], this command allows you to store links
     globally for later insertion into an Org-mode buffer.  See
     [[http://orgmode.org/manual/Handling-links.html#Handling-links][Handling-links]] in the Org-mode manual.
     #+begin_src emacs-lisp
       (define-key global-map "\C-cl" 'org-store-link)
     #+end_src

**** Local Org files
     Set to the location of your Org files on your local system
     #+begin_src emacs-lisp
       (setq org-directory "~/notebook")
     #+end_src

**** Org-Mode TODO
     Org mode todo states and agenda mode navigation.
     #+begin_src emacs-lisp
       (eval-after-load "org"
         '(progn
            (define-prefix-command 'org-todo-state-map)
            (define-key org-mode-map "\C-cx" 'org-todo-state-map)
            (define-key org-todo-state-map "x"
              #'(lambda nil (interactive) (org-todo "CANCELLED")))
            (define-key org-todo-state-map "d"
              #'(lambda nil (interactive) (org-todo "DONE")))
            (define-key org-todo-state-map "f"
              #'(lambda nil (interactive) (org-todo "DEFERRED")))
            (define-key org-todo-state-map "s"
              #'(lambda nil (interactive) (org-todo "STARTED")))
            (define-key org-todo-state-map "w"
              #'(lambda nil (interactive) (org-todo "WAITING")))
            ;; reset keys to original functions
            (add-hook 'org-agenda-mode-hook
                      (lambda ()
                        (define-key org-agenda-mode-map "\C-n" 'next-line)
                        (define-key org-agenda-keymap "\C-n" 'next-line)
                        (define-key org-agenda-mode-map "\C-p" 'previous-line)
                  (define-key org-agenda-keymap "\C-p" 'previous-line)))))
     #+end_src

     Org agenda layout
     #+begin_src emacs-lisp
        (setq org-agenda-files (quote ("~/notebook/todo.org")))
        (setq org-agenda-ndays 7)
        (setq org-agenda-show-all-dates t)
        (setq org-agenda-skip-deadline-if-done t)
        (setq org-agenda-skip-scheduled-if-done t)
        (setq org-agenda-start-on-weekday nil)
        (setq org-reverse-note-order t)
        (setq org-fast-tag-selection-single-key (quote expert))
     #+end_src

     Custom commands for the agenda mode
     #+begin_src emacs-lisp
       (setq org-agenda-custom-commands
             (quote (("c" todo "DONE|DEFERRED|CANCELLED|STARTED" nil)
                     ("w" todo "WAITING" nil)
                     ("W" agenda "" ((org-agenda-ndays 21)))
                     ("A" agenda ""
                      ((org-agenda-skip-function
                        (lambda nil
                          (org-agenda-skip-entry-if (quote notregexp) "\\=.*\\[#A\\]")))
                       (org-agenda-ndays 1)
                       (org-agenda-overriding-header "Today's Priority #A tasks: ")))
                     ("u" alltodo ""
                      ((org-agenda-skip-function
                        (lambda nil
                          (org-agenda-skip-entry-if (quote scheduled) (quote deadline)
                                                    (quote regexp) "\n]+>")))
                       (org-agenda-overriding-header "Unscheduled TODO entries: "))))))
     #+end_src

**** Org-Capture
     Org-capture stores notes and todos with a simple key command.
     #+begin_src emacs-lisp
       (setq org-default-notes-file "~/notebook/notes.org")
       (define-key global-map "\C-cc" 'org-capture)
     #+end_src

     Capture to specified files
     #+begin_src emacs-lisp
       (setq org-capture-templates
             '(("t" "Todo" entry (file+headline "~/notebook/todo.org" "Tasks")
                "* TODO %?\n  %i\n   %a" :kill-buffer t)
               ("n" "Journal" entry (file+headline "~/notebook/notes.org" "Unsorted")
                "* %U %?\n %a\n %i" :prepend t :kill-buffer t)
               ("r" "Research note" entry (file+headline "~/research/notes.txt" "Tasks")
                "* TODO %?\n %i\n  %a" :kill-buffer t)))
     #+end_src

**** Activate babel languages
     :PROPERTIES:
     :CUSTOM_ID: babel
     :END:
     This activates a number of widely used languages, you are
     encouraged to activate more languages.  The customize interface
     of =org-babel-load-languages= contains an up to date list of
     the currently supported languages.
     #+name:babel-lang
     #+begin_src emacs-lisp
       (org-babel-do-load-languages
        'org-babel-load-languages
        '((emacs-lisp . t)
          (sh . t)
          (matlab . t)
          (octave . t)
          (gnuplot . t)
          (python . t)
          (dot . t)
          (ditaa . t)
          (latex . t)
          (js . t)
          (R . t)
          (C . t)
          (perl . t)
          ))
     #+end_src

     Adding unsecure evaluation of code-blocks
     #+begin_src emacs-lisp
       (setq org-confirm-babel-evaluate nil)
     #+end_src

**** Code block fontification
     :PROPERTIES:
     :CUSTOM_ID: code-block-fontification
     :END:
     The following displays the contents of code blocks in Org-mode files
     using the major-mode of the code.  It also changes the behavior of
     =TAB= to as if it were used in the appropriate major mode.  This means
     that reading and editing code from inside of your Org-mode files is
     much more like reading and editing of code using its major mode.
     #+begin_src emacs-lisp
       (setq org-src-fontify-natively t)
       (setq org-src-tab-acts-natively t)
     #+end_src

**** Org general export options
     #+begin_src emacs-lisp
       (setq org-export-with-sub-superscripts nil)
     #+end_src

     So that the export does not end up in the kill ring.
     #+begin_src emacs-lisp
       (setq org-export-copy-to-kill-ring nil)
     #+end_src

**** Org-mode hooks
     Make org understand latex syntax: [[http://stackoverflow.com/questions/11646880/flyspell-in-org-mode-recognize-latex-syntax-like-auctex][source]]
     #+begin_src emacs-lisp
       (add-hook 'org-mode-hook (lambda () (setq ispell-parser 'tex)))
     #+end_src

**** Org LaTeX export types
     Originally taken from Bruno Tavernier: [[http://thread.gmane.org/gmane.emacs.orgmode/31150/focus=31432][here]], but adapted to
     use latexmk 4.20 or higher.
     #+begin_src emacs-lisp
       (defun my-auto-tex-cmd (must-be-here-for-hook-to-work)
         "When exporting from .org with latex, automatically run latexmk, latex,
                                             pdflatex, or xelatex as appropriate, using latexmk."
         (let (texcmd))
         (cond
          ( ;; tex -> dvi -> pdf
           (string-match "LATEX_CMD: mkpdfdvi" (buffer-string))
           (setq texcmd "latexmk -pdfdvi -quiet %f"))
          ( ;; pdflatex -> pdf
           (string-match "LATEX_CMD: pdflatex" (buffer-string))
           (setq texcmd "latexmk -pdf -quiet %f"))
          ( ;; bibtex -> dvi -> pdf
           (string-match "LATEX_CMD: mkbibtex" (buffer-string))
           (setq texcmd "latexmk -pdfdvi -bibtex -quiet %f"))
          ( ;; bibtex -> pdf
           (string-match "LATEX_CMD: pdfbibtex" (buffer-string))
           (setq texcmd "latexmk -pdf -bibtex -quiet %f"))
          ( ;; xelatex -> pdf
           (string-match "LATEX_CMD: xelatex" (buffer-string))
           (setq texcmd "latexmk -pdflatex=xelatex -pdf -quiet %f"))
          ( ;; default
           (string-match "" (buffer-string))
           (setq texcmd "latexmk -pdfdvi -quiet %f")))
         (setq org-latex-pdf-process (list texcmd)))

       (add-hook 'org-export-before-parsing-hook 'my-auto-tex-cmd)
     #+end_src

     Make links work as labels in exports to latex
     #+begin_src emacs-lisp
       (setq org-export-latex-hyperref-format "\\ref{%s}")
     #+end_src

**** Org LaTeX export with default packages
     Resetting the org default exported latex packages list. It messes
     with my latex. Storing an extra list for insertion if needed.
     #+begin_src emacs-lisp :tangle yes
       (setq org-latex-default-packages-bkup-alist
             org-latex-default-packages-alist)
       (setq org-latex-default-packages-alist ())
     #+end_src

     Minimal default export package list. This is all that should
     be needed.
     #+begin_src emacs-lisp
       (setq org-latex-default-packages-alist
             '(("AUTO" "inputenc" t)
               ("colorlinks=true"     "hyperref"  nil)
               (""     "amsmath"  nil)
               (""     "amssymb"  nil)))
     #+end_src

**** Org LaTeX export with extra packages
     :PROPERTIES:
     :tangle:   no
     :END:
     Specify default packages to be included in every tex file, whether
     pdflatex or xelatex. This is kept as an example. Some packages are
     still included in the output.
     #+begin_src emacs-lisp
       (setq org-export-latex-packages-alist
             '(("" "graphicx" t)
               ("" "longtable" nil)
               ("" "float" nil)))
     #+end_src

     Define packages for each latex command. Using latexmk...
     #+begin_src emacs-lisp
       (defun my-auto-tex-parameters ()
         "Automatically select the tex packages to include."
         ;; default packages for ordinary latex or pdflatex export
         (setq org-export-latex-default-packages-alist
               '(("" "graphicx" t)
                 ("" "longtable" nil)
                 ("" "float" nil)
                 ("AUTO" "inputenc" t)
                 ("T1"   "fontenc"   t)
                 (""     "fixltx2e"  t)
                 (""     "hyperref"  nil)))

         ;; Packages to include when xelatex is used
         (if (string-match "LATEX_CMD: xelatex" (buffer-string))
             (setq org-export-latex-default-packages-alist
                   '(("" "fontspec" t)
                     ("" "xunicode" t)
                     ("" "url" t)
                     ("" "rotating" t)
                     ("american" "babel" t)
                     ("babel" "csquotes" t)
                     ("" "soul" t)
                     ("xetex" "hyperref" nil)
                     )))

         (if (string-match "LATEX_CMD: xelatex" (buffer-string))
             (setq org-export-latex-classes
                   (cons '("article"
                           "\\documentclass[11pt,article,oneside]{memoir}"
                           ("\\section{%s}" . "\\section*{%s}")
                           ("\\subsection{%s}" . "\\subsection*{%s}")
                           ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                           ("\\paragraph{%s}" . "\\paragraph*{%s}")
                           ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
                         org-export-latex-classes))))
       (add-hook 'org-export-latex-after-initial-vars-hook 'my-auto-tex-parameters)
     #+end_src

**** Org RefTeX integration with org-ref
     :PROPERTIES:
     :CUSTOM_ID: org-ref
     :END:
     Deprecated source from previous setup: [[http://tincman.wordpress.com/2011/01/04/research-paper-management-with-emacs-org-mode-and-reftex/][here]]

     I went for using [[https://github.com/jkitchin/jmax/blob/master/org-ref.org][org-ref]] to manage references and citations
     in org-mode. Both a [[http://kitchingroup.cheme.cmu.edu/blog/][blog]] from the creator and a [[https://www.youtube.com/watch?v=JyvpSVl4_dg][video]] relates
     to org-ref and can be usefull.

     Paths to files. This might be more general than reftex.
     #+begin_src emacs-lisp
       (setq org-link-abbrev-alist
             '(("bib" . "~/research/bibliography.bib::%s")
               ("notes" . "~/research/notes.txt::#%s")
               ("papers" . "~/research/papers/%s.pdf")))
     #+end_src

     Org-ref variables
     #+begin_src emacs-lisp
       (when (el-get-package-exists-p "org-ref")
         (setq org-ref-bibliography-notes "~/research/notes.txt"
               org-ref-default-bibliography '("~/research/bibliography.bib")
               org-ref-pdf-directory "~/research/papers/"))
     #+end_src

     Org-mode hook for tex-master
     #+begin_src emacs-lisp
       (add-hook 'org-mode-hook (setq TeX-master t))
     #+end_src

**** Org reveal
     [[https://github.com/hakimel/reveal.js][reveal.js]] is a presentation creation package that creates
     HTML5 presentations from org-mode. It can be integrated in
     org-mode export with [[https://github.com/yjwen/org-reveal][org-reveal]].

     To setup and create presentations with org-mode see instructions [[http://blog.jr0cket.co.uk/2013/09/create-html5-presentations-emacs-revealjs.html][here]].

     Set org-reveal-root path.
     #+begin_src emacs-lisp
       (when (el-get-package-exists-p "org-reveal")
         (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/2.5.0/"))
     #+end_src

**** Org in startup scratch
     Make inital scratch buffer an org-mode buffer
     #+begin_src emacs-lisp
       (setq initial-major-mode 'org-mode)
     #+end_src

     Give it a little bit of emacs-lisp
     #+begin_src emacs-lisp
       (setq initial-scratch-message "\n#+begin_src emacs-lisp\n\n#+end_src\n\n")
     #+end_src
**** MobileOrg
     Mobile org push/pull directory
     #+begin_src emacs-lisp
       (setq org-mobile-directory "~/Ubuntu One/MobileOrg" )
       (setq org-mobile-inbox-for-pull "~/Ubuntu One/MobileOrg/from-mobile.org" )
     #+end_src

     #+begin_src emacs-lisp
       (setq org-mobile-files '(
                                "~/notebook/notes.org"
                                "~/notebook/todo.org"))
     #+end_src

     Pull at startup
     #+begin_src emacs-lisp :tangle no
       (add-hook 'after-init-hook 'org-mobile-pull)
     #+end_src

     Push at exit
     #+begin_src emacs-lisp :tangle no
       (add-hook 'kill-emacs-hook 'org-mobile-push)
     #+end_src

*** Edit with emacs Chrome(ium)
    "Edit with emacs" in any text area in the browser. Requires
    edit-server.el. Just needs to start emacs first
    with edit-server installed.
    #+begin_src emacs-lisp
      (when (el-get-package-exists-p "edit-server")
        (edit-server-start))
    #+end_src

*** Yasnippet
    :PROPERTIES:
    :CUSTOM_ID: yasnippet
    :END:
    - [[http://code.google.com/p/yasnippet/][yasnippet]] is yet another snippet expansion system for Emacs. It is
      inspired by TextMate's templating syntax.
     - watch the [[http://www.youtube.com/watch?v=vOj7btx3ATg][video on YouTube]]
     - see the [[http://yasnippet.googlecode.com/svn/trunk/doc/index.html][intro and tutorial]]

    Install yasnippet with el-get manually
    #+begin_src emacs-lisp :tangle no
      (el-get 'sync '(yasnippet))
    #+end_src

    Activate yasnippet everywhere
    #+begin_src emacs-lisp :tangle yes
      (when (el-get-package-exists-p "yasnippet")
        (yas-global-mode 1))
    #+end_src

    Above does not work for org-mode, therefore do it here.
    #+begin_src emacs-lisp :tangle yes
      (when (el-get-package-exists-p "yasnippet")
        (add-hook 'org-mode-hook
                  '(lambda ()
                     (yas-minor-mode))))
    #+end_src

*** Custom functions
    Self defined functionality
**** Emacs strip tease
     source: [[http://bzg.fr/emacs-strip-tease.html][here]].

     Hide the mode line in current buffer.
     See [[http://bzg.fr/emacs-hide-mode-line.html][emacs-hide-mode-line]]
     : M-x hidden-mode-line-mode
     #+begin_src emacs-lisp
       (defvar-local hidden-mode-line-mode nil)
       (defvar-local hide-mode-line nil)

       (define-minor-mode hidden-mode-line-mode
         "Minor mode to hide the mode-line in the current buffer."
         :init-value nil
         :global nil
         :variable hidden-mode-line-mode
         :group 'editing-basics
         (if hidden-mode-line-mode
             (setq hide-mode-line mode-line-format
                   mode-line-format nil)
           (setq mode-line-format hide-mode-line
                 hide-mode-line nil))
         (force-mode-line-update)
         ;; Apparently force-mode-line-update is not always enough to
         ;; redisplay the mode-line
         (redraw-display)
         (when (and (called-interactively-p 'interactive)
                    hidden-mode-line-mode)
           (run-with-idle-timer
            0 nil 'message
            (concat "Hidden Mode Line Mode enabled.  "
                    "Use M-x hidden-mode-line-mode to make the mode-line appear."))))
     #+end_src

     Activate hidden-mode-line-mode. Does not work on startup
     #+begin_src emacs-lisp :tangle no
       (hidden-mode-line-mode t)
     #+end_src

     Make the buffer center focused.
     A small minor mode to use a big fringe (side bars).
     #+begin_src emacs-lisp :tangle yes
       (defvar bzg-big-fringe-mode nil)
       (define-minor-mode bzg-big-fringe-mode
         "Minor mode to hide the mode-line in the current buffer."
         :init-value nil
         :global t
         :variable bzg-big-fringe-mode
         :group 'editing-basics
         (if (not bzg-big-fringe-mode)
             (set-fringe-style nil)
           (set-fringe-mode
            (/ (- (frame-pixel-width)
                  (* 66 (frame-char-width)))
               2))))
     #+end_src

     Get rid of the indicators in the fringe:
     #+begin_src emacs-lisp :tangle no
       (mapcar (lambda(fb) (set-fringe-bitmap-face fb 'org-hide))
               fringe-bitmaps)
     #+end_src

     Set background colour for fringes.
     #+begin_src emacs-lisp :tangle no
       (custom-set-faces
        '(fringe ((t (:background "white")))))
     #+end_src

     Command to toggle the display of the mode-line as a header:
     : M-x mode-line-in-header
     #+begin_src emacs-lisp :tangle yes
       (defvar-local header-line-format nil)
       (defun mode-line-in-header ()
         (interactive)
         (if (not header-line-format)
             (setq header-line-format mode-line-format
                   mode-line-format nil)
           (setq mode-line-format header-line-format
                 header-line-format nil))
         (set-window-buffer nil (current-buffer)))
       (global-set-key (kbd "C-s-SPC") 'mode-line-in-header)
     #+end_src

*** Publish emacs init
    Publishing require the htmlize package. Can be found in
    emacs-goodies or as a standalone elisp file. I use el-get in
    emacs-init-publish to make sure htmlize is installed and
    initialized.

    Evaluate this to publish this file to ./doc
    #+begin_src emacs-lisp :tangle no
      (emacs-init-load "emacs-init-publish.org")
    #+end_src

* Load User/System Specific Files
  :PROPERTIES:
  :CUSTOM_ID: user-system-configs
  :END:

  You can keep system- or user-specific customizations here in either
  raw emacs-lisp files or as embedded elisp in org-mode files (as done
  in this document).

  You can keep elisp source in the =src= directory. Packages loaded
  from here will override those installed by ELPA. This is useful if
  you want to track the development versions of a project, or if a
  project is not in elpa.

  After we've loaded all the Emacs Init defaults, lets load the User's
  stuff.
  #+begin_src emacs-lisp
    (cl-flet ((sk-load (base)
                    (let* ((path          (expand-file-name base emacs-init-dir))
                           (literate      (concat path ".org"))
                           (encrypted-org (concat path ".org.gpg"))
                           (plain         (concat path ".el"))
                           (encrypted-el  (concat path ".el.gpg")))
                      (cond
                       ((file-exists-p encrypted-org) (org-babel-load-file encrypted-org))
                       ((file-exists-p encrypted-el)  (load encrypted-el))
                       ((file-exists-p literate)      (org-babel-load-file literate))
                       ((file-exists-p plain)         (load plain)))))
           (remove-extension (name)
                             (string-match "\\(.*?\\)\.\\(org\\(\\.el\\)?\\|el\\)\\(\\.gpg\\)?$" name)
                             (match-string 1 name)))
      (let ((elisp-dir (expand-file-name "src" emacs-init-dir))
            (user-dir (expand-file-name user-login-name emacs-init-dir)))
        ;; add the src directory to the load path
        (add-to-list 'load-path elisp-dir)
        ;; load specific files
        (when (file-exists-p elisp-dir)
          (let ((default-directory elisp-dir))
            (normal-top-level-add-subdirs-to-load-path)))
        ;; load system-specific config
        (sk-load system-name)
        ;; load user-specific config
        (sk-load user-login-name)
        ;; load any files in the user's directory
        (when (file-exists-p user-dir)
          (add-to-list 'load-path user-dir)
          (mapc #'sk-load
                (remove-duplicates
                 (mapcar #'remove-extension
                         (directory-files user-dir t ".*\.\\(org\\|el\\)\\(\\.gpg\\)?$"))
          :test #'string=)))))
  #+end_src

** Settings from M-x customize
   #+begin_src emacs-lisp
     (load custom-file 'noerror)
   #+end_src

* Footnotes

[1] If you already have a directory at =~/.emacs.d= move it out of the
    way and put this there instead.

[2] The emacs init uses [[http://orgmode.org/][Org Mode]] to load embedded elisp code directly
    from literate Org-mode documents. Org is included with Emacs for
    later version.
