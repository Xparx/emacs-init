#+TITLE: Emacs Init
#+OPTIONS: toc:2 num:nil ^:nil
#+STARTUP:  hideblocks
#+PROPERTY: header-args   :exports code :results silent :eval never-export :comments link
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://gongzhitaao.org/orgcss/org.css"/>
# #+OPTIONS: toc:nil num:3 H:4 ^:nil pri:t
#+HTML_HEAD_EXTRA: <style type="text/css">p {text-align: justify;} </style>
#+MACRO: kbd @@html:<kbd>$1</kbd>@@


#+begin_quote
Emacs outshines all other editing software in approximately the same
way that the noonday sun does the stars. It is not just bigger and
brighter; it simply makes everything else vanish.

-- Neal Stephenson, "In the Beginning was the Command Line"
#+end_quote
[[https://www.reddit.com/r/emacs/comments/5qe0at/cool_quotes_about_emacs/][Quotes about Emacs]]

* Implementation
:PROPERTIES:
:CUSTOM_ID: implementation
:END:
** Emacs init basics
*** Load path etc
#+name: emacs-init-load-paths
#+begin_src emacs-lisp
(add-to-list 'load-path (concat emacs-init-dir "lisp"))
(setq autoload-file (concat emacs-init-dir "loaddefs.el"))
(setq custom-file "/dev/null")
(defun load-if-exists (f)
  (if (file-readable-p f)
      (load-file f)))
(defmacro with-library (symbol &rest body)
  `(condition-case nil
       (progn
         (require ',symbol)
         ,@body)

     (error (message (format "I guess we don't have %s available." ',symbol))
            nil)))
#+end_src
*** Ubiquitous Packages
which should be loaded on startup rather than
autoloaded on demand since they are likely to be used in every
session.
#+name: emacs-init-load-on-startup
#+begin_src emacs-lisp
(require 'saveplace)
(require 'ffap)
(require 'uniquify)
(require 'ansi-color)
(require 'recentf)
#+end_src
*** ELPA archive repositories

This is an important package that should be imported and synced.
#+begin_src emacs-lisp
(el-get 'sync '(package))
#+end_src

*** Functions for loading other parts of the emacs init
This can be used to load other files with org code.

#+name: emacs-init-load
#+begin_src emacs-lisp
(defun emacs-init-load (file &optional header-or-tag)
  "Load configuration from other emacs-init-*.org files.
   If the optional argument is the id of a subtree then only
   configuration from within that subtree will be loaded.  If it is
   not an id then it will be interpreted as a tag, and only subtrees
   marked with the given tag will be loaded.

   ! STARTER-KIT Configurations:
   For example, to load all of emacs-init-lisp.org simply
   add (emacs-init-load \"lisp\") to your configuration.
   To load only the 'window-system' config from
   emacs-init-misc-recommended.org add
(emacs-init-load \"misc-recommended\" \"window-system\")
to your configuration."
 (let ((file (expand-file-name (if (string-match "emacs-init-.+\.org" file)
                   file
                 (format "emacs-init-%s.org" file))
                   emacs-init-dir)))
   (org-babel-load-file
    (if header-or-tag
    (let* ((base (file-name-nondirectory file))
           (dir  (file-name-directory file))
           (partial-file (expand-file-name
                  (concat "." (file-name-sans-extension base)
                      ".part." header-or-tag ".org")
                  dir)))
      (unless (file-exists-p partial-file)
        (with-temp-file partial-file
          (insert
           (with-temp-buffer
         (insert-file-contents file)
         (save-excursion
           (condition-case nil ;; collect as a header
               (progn
             (org-link-search (concat"#"header-or-tag))
             (org-narrow-to-subtree)
             (buffer-string))
             (error ;; collect all entries with as tags
              (let (body)
            (org-map-entries
             (lambda ()
               (save-restriction
                 (org-narrow-to-subtree)
                 (setq body (concat body "\n" (buffer-string)))))
             header-or-tag)
            body))))))))
      partial-file)
      file))))
#+end_src

** Emacs init core
:PROPERTIES:
:CUSTOM_ID: emacs-init-core
:END:

*** Personal information

#+begin_src emacs-lisp
(if (file-exists-p (concat emacs-init-dir "user.el"))
    (load-file (concat emacs-init-dir "user.el"))
  (message (concat "user info can be placed in: " emacs-init-dir "user.el")))
#+end_src

How I want the calendar to be displayed
#+begin_src emacs-lisp
(calendar-set-date-style 'iso)
(setq calendar-week-start-day 1)
#+end_src

*** git                                                                 :git:
:PROPERTIES:
:custom_id: git
:END:

**** Magit                                                            :magit:
:PROPERTIES:
:CUSTOM_ID: magit
:END:
***** El-get magit
Install manually
#+begin_src emacs-lisp :tangle no
(el-get 'sync '(magit))
#+end_src

***** git default repo directories
#+begin_src emacs-lisp :tangle no
(when (el-get-package-exists-p "magit")
  (setq magit-repository-directories '("~/projects")))
#+end_src

***** Magit key-bindings
It's handy to have a shortcut to magit
#+begin_src emacs-lisp
(when (el-get-package-exists-p "magit")
  (global-set-key (kbd "C-c m") 'magit-status))
#+end_src

***** Don't split buffer
#+begin_src emacs-lisp
(when (el-get-package-exists-p "magit")
  (setq magit-status-buffer-switch-function 'switch-to-buffer))
#+end_src

***** Refine the hunk diff view
[[https://emacs.stackexchange.com/questions/7826/is-there-a-simplified-version-control-system-appropriate-for-non-coders-writing][Source]]
#+begin_src emacs-lisp
(setq magit-diff-refine-hunk 'all)
#+end_src

***** Delete trailing whitespaces from magit buffer
[[https://gist.github.com/vermiculus/8177389][source]] and [[https://stackoverflow.com/questions/20127377/how-can-i-remove-trailing-whitespace-from-a-hunk-in-magit][stackoverflow]] question

#+begin_src emacs-lisp
(when (el-get-package-exists-p "magit")
  (defun *magit-delete-trailing-whitespace-from-file ()
    "Removes whitespace from the current item."
    (interactive)
    (save-excursion
      (magit-diff-visit-file-worktree (magit-file-at-point))
      (delete-trailing-whitespace)
      (save-buffer)
      (kill-buffer))
    (magit-refresh))

  (eval-after-load 'magit
    '(define-key magit-status-mode-map (kbd "w") '*magit-delete-trailing-whitespace-from-file)))
#+end_src

**** Git-gutter
Git-gutter-fringe gives git diff info in the fringes.
Turn on git-gutter for all relevant buffers
#+begin_src emacs-lisp
(when (el-get-package-exists-p "git-gutter-fringe")
  (global-git-gutter-mode nil)
  (setq git-gutter-fr:side 'right-fringe)
  (setq git-gutter:hide-gutter t)
  (setq git-gutter:verbosity 2))
#+end_src

*** Misc
:PROPERTIES:
:CUSTOM_ID: misc
:END:
**** Default launch window with full height
Nice [[https://emacs.stackexchange.com/questions/2999/how-to-maximize-my-emacs-frame-on-start-up/][source]] on http://emacs.stackexchange.com
#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(fullscreen . fullheight))
#+end_src

**** Activate TAB completion
#+begin_src emacs-lisp
(add-to-list 'completion-styles 'initials t)
#+end_src

specific modes
#+begin_src emacs-lisp
(add-hook 'emacs-lisp-mode-hook (lambda () (setq tab-always-indent 'complete)))
(add-hook 'sh-mode-hook (lambda () (setq tab-always-indent 'complete)))
#+end_src

**** Don't clutter up directories with files~ or #files#
Rather than saving backup files scattered all over the file system,
let them live in the =backups/= directory inside of the emacs init.
#+begin_src emacs-lisp
(setq backup-directory-alist `(("." . ,(expand-file-name
                                        (concat emacs-init-dir "backups")))))

(setq version-control t        ;; Use version numbers for backups.
      kept-new-versions 2      ;; Number of newest versions to keep (default)
      kept-old-versions 1      ;; Number of oldest versions to keep.
      delete-old-versions t)   ;; Don't ask to delete excess backup versions.
#+end_src

Autosave to specific directory: [[http://emacsredux.com/blog/2013/05/09/keep-backup-and-auto-save-files-out-of-the-way/][source]]. This does not work... as
is always the case. This stops the autosave feature for some
reason
#+begin_src emacs-lisp :tangle no
(setq auto-save-file-name-transforms
      `((".*" ,(expand-file-name
                (concat emacs-init-dir "autosave")) t)))
#+end_src

**** Make colors work in M-x shell
#+begin_src emacs-lisp
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
#+end_src

**** Make C-l clear M-x shell buffers
[[https://stackoverflow.com/questions/7733668/command-to-clear-shell-while-using-emacs-shell][source]]
This approach is not perfect. It destroys the (scroll) history in the shell buffer.
#+begin_src emacs-lisp
(defun inferior-clear ()
  (interactive)
  (let ((comint-buffer-maximum-size 0))
    (comint-truncate-buffer)))
#+end_src

#+begin_src emacs-lisp
(defun my-shell-hook ()
  (local-set-key "\C-l" 'inferior-clear))

(add-hook 'shell-mode-hook 'my-shell-hook)
#+end_src

**** Make C-l clear M-x eshell buffers
[[https://www.linuxquestions.org/questions/programming-9/emacs-eshell-how-to-clear-screen-770328/][source]] and [[http://www.northbound-train.com/emacs/em-joc.el][code source]]
#+begin_src emacs-lisp
(defun eshell-clear ()
  "Clears the shell buffer ala Unix's clear or DOS' cls"
  (interactive)
  ;; the shell prompts are read-only, so clear that for the duration
  (let ((inhibit-read-only t))
    ;; simply delete the region
    (delete-region (point-min) (point-max)))
  (eshell-send-input))
#+end_src

enable another clear function that seems to work well
#+begin_src emacs-lisp
(defun my-eshell-hook ()
  (local-set-key "\C-l" 'eshell/clear))

(add-hook 'eshell-mode-hook 'my-eshell-hook)
 #+end_src

**** Color Themes
:PROPERTIES:
:CUSTOM_ID: color-theme
:END:
The [[http://www.nongnu.org/color-theme/][Color Themes]] package provides support for changing, saving,
sharing Emacs color themes.  To view and apply color themes available
on your system run =M-x color-theme-select=.  See the color theme
website and EmacsWiki pages for more information.
- http://www.nongnu.org/color-theme/
- http://www.emacswiki.org/emacs/ColorTheme
- https://github.com/bbatsov/zenburn-emacs


Add list to load-theme path. use [[elisp:load-theme][load-theme]] RET "theme" to choose a theme.
#+begin_src emacs-lisp
(add-to-list 'custom-theme-load-path
             (concat emacs-init-dir "themes"))
#+end_src

Load my prefered theme if availible
#+begin_src emacs-lisp :tangle no
(condition-case nil
    (load-theme 'my-z t)
  (error "no theme loaded"))
#+end_src

**** Aspell and dictionaries
#+begin_src emacs-lisp
(setq-default ispell-program-name (executable-find "aspell"))
#+end_src

To fix [[http://www.emacswiki.org/emacs/FlySpell#toc8][this]] bug
#+begin_src emacs-lisp
(when (string= ispell-program-name (executable-find "aspell"))
  (setq ispell-list-command "--list")
  (setq flyspell-issue-welcome-flag nil)
  (setq flyspell-issue-message-flag nil))
#+end_src

Set default ispell dict
#+begin_src emacs-lisp
(setq ispell-dictionary "english")
#+end_src

Save to personal dictionary quietly
#+begin_src emacs-lisp
(setq ispell-silently-savep t)
#+end_src

**** Open my specific bashrc files in the right mode
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '(".bashrc\\'" . shell-script-mode))
(add-to-list 'auto-mode-alist '(".bash_variables\\'" . shell-script-mode))
(add-to-list 'auto-mode-alist '(".bash_aliases\\'" . shell-script-mode))
#+end_src

**** Transparently open compressed files
#+begin_src emacs-lisp
(auto-compression-mode t)
#+end_src

**** Save a list of recent files visited.
#+begin_src emacs-lisp
(recentf-mode 1)
#+end_src
**** Save last place in visited files
#+begin_src emacs-lisp
(setq save-place-file (concat emacs-init-dir "saved-places"))
(setq-default save-place t)
#+end_src
**** Highlight matching parentheses when the point is on them.

#+name: emacs-init-match-parens
#+begin_src emacs-lisp
(show-paren-mode 1)
#+end_src

#+name: emacs-init-customize-match-parens
#+begin_src emacs-lisp
(set-face-background 'show-paren-match (face-background 'default))
(set-face-foreground 'show-paren-match "#def")
(set-face-attribute 'show-paren-match nil :weight 'extra-bold)
#+end_src

**** Init random seed.
Seed the random-number generator
#+begin_src emacs-lisp
(random t)
#+end_src
**** Tramp mode defaults
#+begin_src emacs-lisp
(setq tramp-default-method "ssh")
#+end_src

#+begin_src emacs-lisp
(set-default 'tramp-default-proxies-alist (quote ((".*" "\\`root\\'" "/ssh:%h:"))))
#+end_src

**** Set exec-path same as PATH in bash
Source: [[http://stackoverflow.com/questions/9663396/how-do-i-make-emacs-recognize-bash-environment-variables-for-compilation][stackoverflow]]

Using package is perhaps better, Install manually
#+begin_src emacs-lisp :tangle no
(el-get 'sync '(exec-path-from-shell))
#+end_src

#+begin_src emacs-lisp
(when (el-get-package-exists-p "exec-path-from-shell")
  (exec-path-from-shell-initialize))
#+end_src

**** Default to unified diffs
#+begin_src emacs-lisp
(setq diff-switches "-u")
#+end_src

**** Dired mode
:PROPERTIES:
:custom_id: dired
:END:

When in dired mode 'a' will find alternative file/dir in the same
buffer.  source [[http://emacsblog.org/2007/02/25/quick-tip-reuse-dired-buffers/][here]]
#+begin_src emacs-lisp
(put 'dired-find-alternate-file 'disabled nil)
#+end_src

Activating dired-x and a [[http://www.masteringemacs.org/articles/2014/04/10/dired-shell-commands-find-xargs-replacement/][source]] with some more information
#+begin_src emacs-lisp
(add-hook 'dired-mode-hook
          (lambda ()
            (setq truncate-lines t)
            (setq dired-x-hands-off-my-keys nil) ;; Remap my keys so C-x C-f finds file at point
            (load "dired-x")
            (dired-hide-details-mode)))
#+end_src

Default [[http://ergoemacs.org/emacs/dired_sort.html][format]] of dired (=s= sorts the list based on date)
#+begin_src emacs-lisp
(setq dired-listing-switches "-ao -h --group-directories-first --time-style long-iso")
#+end_src

Bind keys for dired to be more consistent with open file
#+begin_src emacs-lisp
(global-set-key (kbd "C-x C-d") 'dired)
(global-set-key (kbd "C-x d") 'list-directory)
#+end_src


[[http://oremacs.com/2015/01/04/dired-nohup/][Guess]] program by file extension
#+begin_src emacs-lisp
(setq dired-guess-shell-alist-user
      '(("\\.pdf\\'" "evince" "okular")
        ("\\.\\(?:cbr\\|cbz\\)\\'" "evince")
        ("\\.\\(?:djvu\\|eps\\)\\'" "evince")
        ("\\.\\(?:jpg\\|jpeg\\|png\\|gif\\|xpm\\)\\'" "eog")
        ("\\.\\(?:xcf\\)\\'" "gimp")
        ("\\.ods\\'\\|\\.xlsx?\\'\\|\\.docx?\\'\\|\\.csv\\'" "libreoffice")
        ("\\.tex\\'" "pdflatex" "latex")
        ("\\.\\(?:mp4\\|mkv\\|avi\\|flv\\|ogv\\|rar\\)\\(?:\\.part\\)?\\'" "vlc")
        ("\\.\\(?:mp3\\|flac\\)\\'" "rhythmbox")
        ("\\.html?\\'" "chromium-browser" "webbrowser-app" "firefox")
        ("\\.cue?\\'" "audacious")))
#+end_src

This is necessary here
#+begin_src emacs-lisp
(require 'dired-aux)
#+end_src

Define command for list of files
#+begin_src emacs-lisp
(defvar dired-filelist-cmd
  '(("vlc" "-L")))
#+end_src

#+begin_src emacs-lisp
(defun dired-start-process (cmd &optional file-list)
  (interactive
   (let ((files (dired-get-marked-files
                 t current-prefix-arg)))
     (list
      (dired-read-shell-command "& on %s: "
                                current-prefix-arg files)
      files)))
  (let (list-switch)
    (start-process
     cmd nil shell-file-name
     shell-command-switch
     (format
      "nohup 1>/dev/null 2>/dev/null %s \"%s\""
      (if (and (> (length file-list) 1)
               (setq list-switch
                     (cadr (assoc cmd dired-filelist-cmd))))
          (format "%s %s" cmd list-switch)
        cmd)
      (mapconcat #'expand-file-name file-list "\" \"")))))
#+end_src

Define a key-map for =dired-start-process=.
#+begin_src emacs-lisp
(define-key dired-mode-map "r" 'dired-start-process)
#+end_src

**** Enable the package window-margin
Window-margin sets a soft wrap on lines at the
fill-column width. This breaks truncate long line
behaviour for some reason after it is used. Heads up!
#+begin_src emacs-lisp
(when (el-get-package-exists-p "window-margin")
  (global-set-key [f9] 'window-margin-mode))
#+end_src

**** Hidepw-mode hides passwords between specified delimiters

Set delimiters
#+begin_src emacs-lisp
(when (el-get-package-exists-p "hidepw")
  (setq hidepw-pattern " -\\(.*\\)- "))
#+end_src

associate with relevant files
#+begin_src emacs-lisp
(when (el-get-package-exists-p "hidepw")
  (add-to-list 'auto-mode-alist
               '("\\.gpg\\'" . (lambda () (hidepw-mode)))))
#+end_src

**** kill client buffer with C-x k
[[http://www.emacswiki.org/emacs/EmacsClient#toc36][source]]
#+begin_src emacs-lisp
(add-hook 'server-switch-hook
          (lambda ()
            (when (current-local-map)
              (use-local-map (copy-keymap (current-local-map))))
            (when server-buffer-clients
              (local-set-key (kbd "C-x k") 'server-edit))))
#+end_src

**** Make sure copying from desktop works better
Warning: This might get memory intensive

Make sure the desktop copy gets saved in kill-ring even though something else is cut before.
#+begin_src emacs-lisp
(setq save-interprogram-paste-before-kill t)
#+end_src

**** Ibuffer settings
Ibuffer settings, source [[http://www.emacswiki.org/emacs/IbufferMode][here]]. Lots of interesting stuff in there.
#+begin_src emacs-lisp
(setq ibuffer-saved-filter-groups
      (quote (("default"
               ("org-mode" (mode . org-mode))
               ("MATLAB" (mode . matlab-mode))
               ("LaTeX" (or
                         (mode . latex-mode)
                         (mode . bibtex-mode)))
               ("python" (or
                         (mode . python-mode)
                         (mode . inferior-python-mode)
                         (name . "^\\*ob-ipython-client-driver\\*$")
                         (name . "^\\*ob-ipython-kernel\*")))
               ("planner" (or
                           (name . "^\\*Calendar\\*$")
                           (name . "^diary$")))
               ("Emacs" (or
                         (name . "^\\*scratch\\*$")
                         (name . "^\\*ielm\\*$")
                         (name . "^\\*Completions\\*$")
                         (name . "^\\*Messages\\*$")))
               ("Magit" (name . "^\\*magit.*\\*$"))
               ("dired" (mode . dired-mode))
               ("gnus" (or
                        (mode . message-mode)
                        (mode . bbdb-mode)
                        (mode . mail-mode)
                        (mode . gnus-group-mode)
                        (mode . gnus-summary-mode)
                        (mode . gnus-article-mode)
                        (name . "^\\.bbdb$")
                        (name . "^\\.newsrc-dribble")))))))
#+end_src

Ibuffer mode hook
#+begin_src emacs-lisp
(add-hook 'ibuffer-mode-hook
          (lambda ()
            (ibuffer-switch-to-saved-filter-groups "default")))
#+end_src

**** Don't set unsafe variables
:PROPERTIES:
:header-args: :tangle   no
:END:
This is mostly for el-get when looking for recpies but might affect other stuff (like themes?), however this makes it so that I can't play with file local variables for library of babel for example.

#+begin_src emacs-lisp
(setq enable-local-variables :safe)
#+end_src

**** Abbrev mode
[[http://pragmaticemacs.com/emacs/use-abbreviations-to-expand-text/][source]]

Activate only in text modes
#+begin_src emacs-lisp
(add-hook 'text-mode-hook (lambda () (abbrev-mode t)))
#+end_src

make sure the abbrev file is in the right location
#+begin_src emacs-lisp
(setq abbrev-file-name (concat emacs-init-dir "abbrev_defs"))
#+end_src

read on startup
#+begin_src emacs-lisp
(if (file-exists-p abbrev-file-name)
    (quietly-read-abbrev-file))
#+end_src

**** Undo-tree
Make use of the undo-tree package if available, [[http://pragmaticemacs.com/emacs/advanced-undoredo-with-undo-tree/][(source)]]
#+begin_src emacs-lisp
(when (el-get-package-exists-p "undo-tree")
  (global-undo-tree-mode 1)
  ;; make ctrl-z undo
  (global-set-key (kbd "C-z") 'undo)
  ;; make ctrl-Z redo
  (defalias 'redo 'undo-tree-redo)
  (global-set-key (kbd "C-S-z") 'redo)
  (add-hook 'eshell-mode-hook (lambda () (undo-tree-mode 0))))
#+end_src

**** Reload and open init file
Usage: M-x reload-init-file
#+begin_src emacs-lisp
(defun reload-init-file ()
  "Reload init.el file"
  (interactive)
  (load user-init-file)
  (message "Reloaded init.el OK.")
  )
#+end_src


Usage: M-x open-init-file
#+begin_src emacs-lisp
(defun open-init-file ()
  (interactive)
  (find-file user-init-file)
  )
#+end_src

**** Edit with emacs Chrome(ium)
"Edit with emacs" in any text area in the browser. Requires
edit-server.el. Just needs to start emacs first
with edit-server installed.
#+begin_src emacs-lisp
(when (el-get-package-exists-p "edit-server")
  (edit-server-start))
#+end_src

**** Diminish
used to reduce space on the mode line
#+begin_src emacs-lisp :tangle no
(el-get 'sync '(diminish))
#+end_src

This generates alot of errors, disabled for now.
#+begin_src emacs-lisp :tangle no
(when (el-get-package-exists-p "diminish")
  (diminish 'whitespace-mode "ᗣ")
  (diminish 'global-whitespace-mode "ᗣ")
  (diminish 'undo-tree-mode "")
  (diminish 'git-gutter-mode "")
  (diminish 'yas-minor-mode "")
  (diminish 'eldoc-mode "ED")
  (diminish 'elpy-mode "☕")
  (diminish 'org-indent-mode)
  (diminish 'flyspell-mode "✓"))
#+end_src

**** Time stamp files
Use a keyword like =Time-stamp: <>= in the first lines of a file
to update time stamp at save. [[http://www.emacswiki.org/emacs/TimeStamp][source]]
#+begin_src emacs-lisp
(add-hook 'before-save-hook 'time-stamp)
#+end_src

**** If files are .asc check if it's an addition to other mode extension
Part of the source [[https://emacs.stackexchange.com/questions/13283/how-can-i-make-emacs-ignore-part-of-the-file-name-when-deciding-major-mode][source]].
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.asc\\(~\\|\\.~[0-9]+~\\)?\\'" nil ascii-file))
#+end_src
**** File-name completion
[[http://endlessparentheses.com/improving-emacs-file-name-completion.html][source]]
#+begin_src emacs-lisp
(setq read-file-name-completion-ignore-case t)
(setq read-buffer-completion-ignore-case t)
(mapc (lambda (x)
        (add-to-list 'completion-ignored-extensions x))
      '(".a" ".acn" ".acr" ".alg" ".app" ".asv" ".aux" ".auxlock" ".bak" ".bbl" ".bcf" ".blg" ".brf" ".cab" ".cpt" ".dll" ".dpth" ".dvi" ".dylib" ".egg" ".elc" ".elf" ".end" ".epub" ".exe" ".fdb_latexmk" ".fff" ".fls" ".fmt" ".gch" ".glg" ".glo" ".gls" ".hex" ".idx" ".ilg" ".ind" ".ist" ".ko" ".la" ".lai" ".lib" ".lnk" ".lo" ".loa" ".lof" ".log" ".lol" ".lot" ".m~" ".maf" ".manifest" ".md5" ".mo" ".mobi" ".mod" ".msi" ".msm" ".msp" ".mtc" ".mw" ".nav" ".nlo" ".o" ".obj" ".out" ".pch" ".pdf" ".pdfsync" ".pot" ".pyg" ".pytxcode" ".rel" ".run.xml" ".sagetex.py" ".sagetex.sage" ".sagetex.scmd" ".sav" ".slo" ".snm" ".so" ".sout" ".spec" ".sympy" ".synctex" ".synctex.gz" ".synctex.gz(busy)" ".tdo" ".thm" ".tikz" ".toc" ".ttt" ".upa" ".upb" ".vrb" ".x86_64" ".xdy" "-pkg.el" "-autoloads.el" "auto/"))
#+end_src

**** Show unfinished keybindings early
[[http://pragmaticemacs.com/emacs/show-unfinished-keystrokes-early/][source]].
More advanced things can be done with [[https://github.com/justbur/emacs-which-key][which-key]].
#+begin_src emacs-lisp
(setq echo-keystrokes 0.1)
#+end_src

**** Prettify symbols
[[http://endlessparentheses.com/new-in-emacs-25-1-have-prettify-symbols-mode-reveal-the-symbol-at-point.html][source]]
#+begin_src emacs-lisp
(global-prettify-symbols-mode 1)
(setq prettify-symbols-unprettify-at-point 'right-edge)
#+end_src

**** Gracefully shutdown server

[[https://www.emacswiki.org/emacs/EmacsAsDaemon][source]]

#+begin_src emacs-lisp
(defun server-shutdown ()
  "Save buffers, Quit, and Shutdown (kill) server"
  (interactive)
  (save-some-buffers)
  (when (el-get-package-exists-p "elpy") (pyvenv-deactivate))
  (kill-emacs)
  )
#+end_src

**** Powerline config                                             :powerline:

#+begin_src emacs-lisp
(when (el-get-package-exists-p "powerline")
  (powerline-default-theme)
  (setq powerline-default-separator 'zigzag)
  (set-face-attribute 'mode-line nil
                      :foreground "white"
                      :background "goldenrod"
                      :box nil)
  (set-face-attribute 'mode-line-inactive nil
                      :foreground "grey80"
                      :background "grey60"
                      :box nil))
#+end_src

**** writeroom mode
Nice mode to focus on one buffer and nothing else.
The el-get package does not contain the requirement =visual-fill-column= so it needs to be installed manually.

#+begin_src emacs-lisp
(when (el-get-package-exists-p "writeroom-mode")
  (with-eval-after-load 'writeroom-mode
    (define-key writeroom-mode-map (kbd "C-M-<") #'writeroom-decrease-width)
    (define-key writeroom-mode-map (kbd "C-M->") #'writeroom-increase-width)
    (define-key writeroom-mode-map (kbd "C-M-=") #'writeroom-adjust-width)))
#+end_src

**** Visible bookmarks
[[https://github.com/joodland/bm][joodland/bm: bm.el -- Visual Bookmarks for GNU Emacs]]
[[http://pragmaticemacs.com/emacs/use-visible-bookmarks-to-quickly-jump-around-a-file/][Use visible bookmarks to quickly jump around a file | Pragmatic Emacs]]

#+begin_src emacs-lisp
(when (el-get-package-exists-p "bm")
  (autoload 'bm-toggle   "bm" "Toggle bookmark in current buffer." t)
  (autoload 'bm-next     "bm" "Goto bookmark."                     t)
  (autoload 'bm-previous "bm" "Goto previous bookmark."            t)
  (global-set-key (kbd "<C-f2>") 'bm-toggle)
  (global-set-key (kbd "<f2>")   'bm-next)
  (global-set-key (kbd "<S-f2>") 'bm-previous)
  (global-set-key (kbd "<left-fringe> <mouse-5>") 'bm-next-mouse)
  (global-set-key (kbd "<left-fringe> <mouse-4>") 'bm-previous-mouse)
  (global-set-key (kbd "<left-fringe> <mouse-1>") 'bm-toggle-mouse))
#+end_src

**** Browse with eww sometimes
[[https://www.reddit.com/r/emacs/comments/6ha4tl/a_little_trick_with_eww/][A little trick with EWW : emacs]]
#+name: browse-eww-sometimes
#+begin_src emacs-lisp
(defalias 'gk-urls-external-browser 'browse-url-xdg-open)

(defun gk-browse-url (&rest args)
  "Prompt for whether or not to browse with EWW, if no browse
with external browser."
  (apply
   (if (y-or-n-p "Browse with EWW? ")
       'eww-browse-url
     #'gk-urls-external-browser)
   args))

(setq browse-url-browser-function #'gk-browse-url)
#+end_src


*** LaTeX mode                                                        :latex:
:PROPERTIES:
:CUSTOM_ID: latex
:END:
**** Fly spell mode for latex mode
#+begin_src emacs-lisp
(add-hook 'LaTeX-mode-hook 'flyspell-mode)
(add-hook 'latex-mode-hook 'flyspell-mode)
#+end_src

Make sure spelling is handled nicely in latex mode.
#+begin_src emacs-lisp
(add-hook 'LaTeX-mode-hook (lambda () (setq ispell-parser 'tex)))
#+end_src

**** Some auctex specific settings.
:PROPERTIES:
:CUSTOM_ID: auctex
:END:
Install and sync auctex repository with el-get manually.
#+begin_src emacs-lisp :tangle no
(el-get 'sync '(auctex))
#+end_src

Make emacs aware of auctex.
Do not query for master file. This can be done with =C-c_=.
More information can be found [[https://www.gnu.org/software/auctex/manual/auctex/Multifile.html][here]].
#+begin_src emacs-lisp
(when (el-get-package-exists-p "auctex")
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
  (add-to-list 'auto-mode-alist '("\\.tex$" . LaTeX-mode))
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master t)
  (setq TeX-outline-extra
      '((".*\\\\begin{frame}\n\\|.*\\\\begin{frame}\\[.*\\]\\|.*\\\\begin{frame}.*{.*}\\|.*[       ]*\\\\frametitle\\b" 3))))
#+end_src

Hook for latex compilation with latexmk ([[https://github.com/izahn/dotemacs/blob/master/README.org#typesetting-markup-auctex][source]]).
#+begin_src emacs-lisp
(when (and (el-get-package-exists-p "auctex-latexmk") (executable-find "latexmk"))
  (auctex-latexmk-setup)
  ;; make latexmk the default
  (add-hook 'TeX-mode-hook '(lambda () (setq TeX-command-default "LatexMk")))
  (add-hook 'LaTeX-mode-hook '(lambda () (setq TeX-command-default "LatexMk")))
  ;; honor TeX-PDF-mode settings
  (setq auctex-latexmk-inherit-TeX-PDF-mode t))
#+end_src

Other settings from the same [[https://github.com/izahn/dotemacs/blob/master/README.org#typesetting-markup-auctex][source]]
#+begin_src emacs-lisp
(add-hook 'LaTeX-mode-hook
          (lambda ()
            (TeX-PDF-mode t)
            (LaTeX-math-mode)
            (TeX-source-correlate-mode t)
            (imenu-add-to-menubar "Index")
            (outline-minor-mode)))
#+end_src

**** RefTeX
:PROPERTIES:
:CUSTOM_ID: reftex
:END:
Install and sync reftex repository with el-get manually.
#+begin_src emacs-lisp :tangle no
(el-get 'sync '(reftex))
#+end_src

Set path to default bibfile.
#+begin_src emacs-lisp
(when (el-get-package-exists-p "reftex")
  (setq reftex-default-bibliography '("./refs.bib" "./bibliography.bib" "~/research/bibliography.bib")))
#+end_src

Turn on reftex-mode in Auctex mode.
#+begin_src emacs-lisp
(when (and (el-get-package-exists-p "reftex") (el-get-package-exists-p "auctex"))
  (setq reftex-plug-into-AUCTeX t)
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (add-hook 'latex-mode-hook 'turn-on-reftex))
#+end_src

#+begin_src emacs-lisp
(when (el-get-package-exists-p "reftex")
  (setq reftex-enable-partial-scans t)
  (setq reftex-save-parse-info t)
  (setq reftex-use-multiple-selection-buffers t)
  (add-hook 'bibtex-mode-hook
            (lambda ()
              (define-key bibtex-mode-map "\M-q" 'bibtex-fill-entry))))
#+end_src

**** Company activation in LaTeX mode

#+begin_src emacs-lisp
(when (el-get-package-exists-p "company-math")
  (defun my-latex-mode-setup ()
    (setq-local company-backends
                (delete-dups (cons 'company-files
                                   company-backends)))
    (setq-local company-backends
                (delete-dups (cons '(company-math-symbols-latex company-latex-commands company-math-symbols-unicode)
                                   company-backends))))

    (add-hook 'LaTeX-mode-hook 'my-latex-mode-setup)
    (add-hook 'latex-mode-hook 'my-latex-mode-setup))
#+end_src

*** pdf-tools
Pdf tools have a number of requirements that needs to be installed. Make sure to check error messages and the git page.
#+begin_src emacs-lisp
(when (el-get-package-exists-p "pdf-tools")
  (pdf-tools-install))
#+end_src

*** Code-modes
:PROPERTIES:
:CUSTOM_ID: coding
:END:

**** Python                                                          :python:
:PROPERTIES:
:CUSTOM_ID: python
:END:
Support for the Python programming language.

***** python indent offset
Set default tabs width = 4 for python-mode
#+begin_src emacs-lisp
(setq python-indent-offset 4)
#+end_src

***** elpy initialization
Install manually
#+begin_src emacs-lisp :tangle no
(el-get 'sync '(elpy))
#+end_src

Enable elpy:
=elpy-use-ipython= can be used instead of the section [[#ipython_support][ipython support]] below.
Some variables are set differently currently, check function if curious.
#+begin_src emacs-lisp
(when (el-get-package-exists-p "elpy")
  (elpy-enable)
  (unless (el-get-package-exists-p "ob-ipython")
    (elpy-use-ipython) ; this sets all the variables needed for ipython
    ))
#+end_src

Run my default python environment if possible
#+begin_src emacs-lisp
(when (el-get-package-exists-p "elpy")
  (setq my-default-virtualenv "default3")
  (if (member my-default-virtualenv (pyvenv-virtualenv-list))
      (pyvenv-workon my-default-virtualenv)))
#+end_src

***** ob-ipython
ob-ipython is ipython support for src block in org-mode.
[[https://github.com/gregsexton/ob-ipython][org-babel integration with Jupyter for evaluation of (Python by default) code blocks]]
#+begin_src emacs-lisp
(when (el-get-package-exists-p "ob-ipython")
  (setq python-shell-completion-native-enable nil)
  (setq python-shell-prompt-detect-failure-warning nil)
  (add-to-list 'org-latex-minted-langs '(ipython "python"))
  (setq ob-ipython-resources-dir "./figures/")
  ;; (add-to-list 'company-backends 'company-ob-ipython)
)
#+end_src
[[https://github.com/jorgenschaefer/elpy/issues/733][Python shell prompts not detected · Issue #733 · jorgenschaefer/elpy]]

***** ipython support
:PROPERTIES:
:CUSTOM_ID: ipython_support
:END:
If an =ipython= executable is on the path, then assume that
IPython is the preferred method for python evaluation.
If unsure what variables to set, look in to the function [[elisp:(describe-function 'elpy-use-ipython)]]

#+begin_src emacs-lisp
(when (and (executable-find "ipython") (not (el-get-package-exists-p "ob-ipython")))
  (setq
   python-shell-interpreter-args "--no-confirm-exit --no-banner --simple-prompt -i"
   org-babel-python-command "python" ; org-mode works better this way, don't use ipython unless in session
   ))
#+end_src

***** Make C-l clear inferior *Python* shell buffers

#+begin_src emacs-lisp
(defun python-clear ()
  "Clears the shell buffer ala Unix's clear or DOS' cls"
  (interactive)
  ;; the shell prompts are read-only, so clear that for the duration
  (let ((inhibit-read-only t))
    ;; simply delete the region
    (delete-region (point-min) (point-max)))
  (comint-send-input))
#+end_src

#+begin_src emacs-lisp
(defun my-python-hook ()
  (local-set-key "\C-l" 'python-clear))

(add-hook 'inferior-python-mode-hook 'my-python-hook)
#+end_src

***** When using Python's python-mode.el instead of Emacs' python.el
:PROPERTIES:
:CUSTOM_ID: python-mode
:END:
Install and sync python-mode repository with el-get manually
Should only be installed if elpy is not installed, I think, because
it has its own auto-complete that I felt didn't play well with
elpy and its setup.  Some bugs with tab and indenting as well.
#+begin_src emacs-lisp :tangle no
(el-get 'sync '(python-mode))
#+end_src

#+begin_src emacs-lisp
(when  (el-get-package-exists-p "python-mode")
  (setq
   org-babel-python-mode 'python-mode
   py-which-bufname "IPython"
   py-shell-name "ipython"))
#+end_src
***** Send current line to python repl
:PROPERTIES:
:header-args: :tangle   no
:END:
#+begin_src emacs-lisp
(defun my-python-send-statement ()
  (interactive)
  (end-of-line)
  (set-mark (line-beginning-position))
  (call-interactively 'python-shell-send-region)
  (deactivate-mark))
#+end_src

#+begin_src emacs-lisp
(add-hook 'python-mode-hook  (lambda () (local-set-key (kbd "<C-return>") 'my-python-send-statement)))
#+end_src

***** eval-in-repl for python buffers

#+begin_src emacs-lisp
(when (el-get-package-exists-p "eval-in-repl")
  (add-hook 'python-mode-hook
            (lambda ()
              (require 'eval-in-repl-python)
              (define-key python-mode-map (kbd "<C-return>") 'eir-eval-in-python))))
#+end_src

***** Use Cython mode
:PROPERTIES:
:CUSTOM_ID: cython
:header-args: :tangle   no
:END:
Install and sync cython-mode repository with el-get manually.
#+begin_src emacs-lisp :tangle no
(el-get 'sync '(cython-mode))
#+end_src
Set cython-mode file associations
#+begin_src emacs-lisp
(when (el-get-package-exists-p "cython-mode")
  (add-to-list 'auto-mode-alist '("\\.pyx\\'" . cython-mode))
  (add-to-list 'auto-mode-alist '("\\.pxd\\'" . cython-mode))
  (add-to-list 'auto-mode-alist '("\\.pxi\\'" . cython-mode)))
#+end_src

***** Emacs ipython notebook
Enables completion in ein buffer. This gives a bit of unexpected
behaviour. No popup occure even though latest popup.el is
installed. [[https://github.com/jhamrick/emacs/blob/master/.emacs.d/settings/python-settings.el][source]]
#+begin_src emacs-lisp
(when (el-get-package-exists-p "ein")
  (setq ein:use-auto-complete t
        ein:complete-on-dot nil
        ein:query-timeout 1000))
#+end_src

Python console arguments
#+begin_src emacs-lisp
(when (el-get-package-exists-p "ein")
  (setq ein:console-args '("--gui=wx" "--matplotlib=wx" "--colors=Linux")))
#+end_src

Shortcut function to load notebook
#+begin_src emacs-lisp
(when (el-get-package-exists-p "ein")
  (defun load-ein ()
    (ein:notebooklist-load)
    (interactive)
    (ein:notebooklist-open)))
#+end_src

**** cedet
I am not sure what this does except enabling cedet when coding,
whatever that means.

#+begin_src emacs-lisp
(require 'semantic/sb)
(global-ede-mode 1)
(semantic-mode 1)
#+end_src

**** gnuplot-mode                                                   :gnuplot:
:PROPERTIES:
:CUSTOM_ID: gnuplot
:END:
Install and sync gnuplot-mode repository with el-get manually.
#+begin_src emacs-lisp :tangle no
(el-get 'sync '(gnuplot-mode))
#+end_src
Associate .gp files with gnuplot.
#+begin_src emacs-lisp
(setq auto-mode-alist
      (append '(("\\.gp$" . gnuplot-mode))
              '(("\\.gnuplot$" . gnuplot-mode))
              '(("\\.plt$" . gnuplot-mode))
              '(("\\.gnup$" . gnuplot-mode))
              '(("\\.pal$" . gnuplot-mode))
              '(("\\.plt$" . gnuplot-mode))
              auto-mode-alist))
#+end_src

**** MATLAB-mode                                                     :matlab:
:PROPERTIES:
:CUSTOM_ID: matlab
:END:

Install and sync matlab-mode repository with el-get manually
#+begin_src emacs-lisp :tangle no
(el-get 'sync '(matlab-mode))
#+end_src

The indent function -1 or nil will couse functions to not indent
#+begin_src emacs-lisp
(when (el-get-package-exists-p "matlab-mode")
  (add-to-list 'auto-mode-alist '("\\.m$" . matlab-mode))
  (setq matlab-indent-function nil)
  (setq matlab-shell-command "matlab"))
#+end_src

Make sure matlab does not auto wrap lines. It's really enoying and
it does not work! Do manually with 'M-q'
#+begin_src emacs-lisp
(when (el-get-package-exists-p "matlab-mode")
  (add-hook 'matlab-mode-hook '(lambda () (auto-fill-mode -1))))
#+end_src

**** Maxima-mode                                                     :maxima:
:PROPERTIES:
:CUSTOM_ID: maxima
:END:
Install and sync init-maxima repository with el-get
manually. This is just a a set of variables.
#+begin_src emacs-lisp :tangle no
(el-get 'sync '(init-maxima))
#+end_src

Assosicate files with maxima mode.
#+begin_src emacs-lisp
(when (el-get-package-exists-p "init-maxima")
  (add-to-list 'auto-mode-alist '("\\.ma[cx]" . maxima-mode)))
#+end_src

**** R                                                                  :r:R:
Install manually
#+begin_src emacs-lisp :tangle no
(el-get 'sync '(ess))
#+end_src

Associate R scripts with the right mode
#+begin_src emacs-lisp
(when (el-get-package-exists-p "ess")
  (add-to-list 'auto-mode-alist '("\\.R" . R-mode)))
#+end_src

A memory trigger for auto-completion activation
#+begin_src emacs-lisp
(when (el-get-package-exists-p "ess")
  (add-hook 'R-mode-hook (lambda () (message "Associate with an R process with C-c C-s"))))
#+end_src

Automatically connect to R process
#+begin_src emacs-lisp :tangle no
(when (el-get-package-exists-p "ess")
  (add-hook 'R-mode-hook (lambda () (ess-force-buffer-current))))
#+end_src

Make sure =TAB= completes in scripts as well
#+begin_src emacs-lisp :tangle no
(when (el-get-package-exists-p "ess")
  (setq ess-tab-complete-in-script t))
#+end_src

**** julia                                                            :julia:
Either install [[*R][ess]] or the julialang:
#+begin_src emacs-lisp :tangle no
(el-get 'sync '(julia-mode))
#+end_src

Initiate julia mode.
#+begin_src emacs-lisp
;; (when (and (or (el-get-package-exists-p "ess") (el-get-package-exists-p "julia-mode")) (f-exists? (executable-find "julia")))
(when (and (el-get-package-exists-p "ess") (executable-find "julia"))
  (require 'ess-site)
  (setq inferior-julia-program-name (executable-find "julia"))
  (add-to-list 'auto-mode-alist '(".juliahistory\\'" . julia-mode)))
#+end_src

Make C-l clear the ess julia buffer
#+begin_src emacs-lisp
(when (and (el-get-package-exists-p "ess") (executable-find "julia"))
(defun my-julia-hook ()
  (local-set-key "\C-l" 'inferior-clear))

(add-hook 'julia-post-run-hook 'my-julia-hook))
#+end_src

Activate auto-complete in julia mode buffers (this behaves a bit weird currently)
#+begin_src emacs-lisp
(when (and (el-get-package-exists-p "ess") (executable-find "julia"))
(defun my-julia-mode-hook ()
  (setq company-mode t)
  (setq auto-complete-mode t))

(add-hook 'julia-mode-hook 'my-julia-mode-hook))
#+end_src

*** Org Mode <3                                                     :orgmode:
:PROPERTIES:
:CUSTOM_ID: org-mode
:END:

Install and sync org-mode repository with el-get in =init.el=
**** El-getting org-mode
Install manually. This file will not load untill an el-get
org-mode package is installed.

**** Org in startup scratch
Make inital scratch buffer an org-mode buffer
#+begin_src emacs-lisp
(setq initial-major-mode 'org-mode)
#+end_src

Give it a little bit of emacs-lisp
#+begin_src emacs-lisp
(setq initial-scratch-message "\n#+begin_src emacs-lisp\n\n#+end_src\n\n")
#+end_src
**** Change the org-mode fold ellipsis
The =...= pattern at the end of ogr-mode headlines can be [[http://endlessparentheses.com/changing-the-org-mode-ellipsis.html][changed]].
#+begin_src emacs-lisp
(setq org-ellipsis " ⬎")
#+end_src

**** Folded edits

#+begin_src emacs-lisp
(setq org-catch-invisible-edits 'show)
#+end_src

**** Org-Mode File association
Associate .org files with org-mode
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
#+end_src

Make it so that org-mode opens external pdf files in evince: [[http://stackoverflow.com/questions/8834633/how-do-i-make-org-mode-open-pdf-files-in-evince][source]].
#+begin_src emacs-lisp :tangle no
(eval-after-load "org"
  '(progn (setcdr (assoc "\\.pdf\\'" org-file-apps) "evince %s")))
#+end_src

[[https://emacs.stackexchange.com/a/24502/427][associate pds with pdf-view]]
#+begin_src emacs-lisp
(when (el-get-package-exists-p "org-pdfview")
  (eval-after-load 'org '(require 'org-pdfview))

  (add-to-list 'org-file-apps
               '("\\.pdf\\'" . (lambda (file link)
                                 (org-pdfview-open link)))))
#+end_src

**** Org-mode allow bind in file

#+begin_src emacs-lisp
(setq org-export-allow-bind-keywords t)
#+end_src

**** Inline images to be displayed

I can turn this on when needed instead.
#+begin_src emacs-lisp :tangle no
(add-hook 'org-mode-hook 'org-display-inline-images)
(add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
#+end_src

Make attr_* :widht XXXpx work for inline images
#+begin_src emacs-lisp
(setq org-image-actual-width nil)
#+end_src

**** hide leading stars in structure outline

#+begin_src emacs-lisp
(setq org-hide-leading-stars t)
#+end_src

**** Org-mode Global Keybindings
:PROPERTIES:
:CUSTOM_ID: org-global-keybindings
:END:
Two global Emacs bindings for Org-mode

The [[http://orgmode.org/manual/Agenda-Views.html#Agenda-Views][Org-mode agenda]] is good to have close at hand
#+begin_src emacs-lisp
(define-key global-map "\C-ca" 'org-agenda)
#+end_src

Org-mode supports [[http://orgmode.org/manual/Hyperlinks.html#Hyperlinks][links]], this command allows you to store links
globally for later insertion into an Org-mode buffer.  See
[[http://orgmode.org/manual/Handling-links.html#Handling-links][Handling-links]] in the Org-mode manual.
#+begin_src emacs-lisp
(define-key global-map "\C-cl" 'org-store-link)
#+end_src

**** org structure templates
Add more functionality to ~< TAB~ structures.
#+begin_src emacs-lisp
(add-to-list 'org-structure-template-alist '("p" "#+LATEX_HEADER: \\usepackage{}"))
#+end_src

**** Indent org-mode correctly
[[https://stackoverflow.com/questions/1771981/how-to-keep-indentation-with-emacs-org-mode-visual-line-mode][source]]
#+begin_src emacs-lisp
(setq org-startup-indented t)
#+end_src

and with correct levels
#+begin_src emacs-lisp
(setq org-indent-indentation-per-level 1)
#+end_src

**** Local Org files
Set to the location of your Org files on your local system
#+begin_src emacs-lisp
(setq org-directory "~/notebook")
#+end_src

**** Org-Mode TODO

Org mode todo states and agenda mode navigation.
#+begin_src emacs-lisp
(eval-after-load "org"
  '(progn
     (define-prefix-command 'org-todo-state-map)
     (define-key org-mode-map "\C-cx" 'org-todo-state-map)
     (define-key org-todo-state-map "x"
       #'(lambda nil (interactive) (org-todo "CANCELLED")))
     (define-key org-todo-state-map "d"
       #'(lambda nil (interactive) (org-todo "DONE")))
     (define-key org-todo-state-map "f"
       #'(lambda nil (interactive) (org-todo "DEFERRED")))
     (define-key org-todo-state-map "s"
       #'(lambda nil (interactive) (org-todo "STARTED")))
     (define-key org-todo-state-map "w"
       #'(lambda nil (interactive) (org-todo "WAITING")))
     ;; reset keys to original functions
     (add-hook 'org-agenda-mode-hook
               (lambda ()
                 (define-key org-agenda-mode-map "\C-n" 'next-line)
                 (define-key org-agenda-keymap "\C-n" 'next-line)
                 (define-key org-agenda-mode-map "\C-p" 'previous-line)
                 (define-key org-agenda-keymap "\C-p" 'previous-line)))))
#+end_src

Org agenda layout
#+begin_src emacs-lisp
(setq org-agenda-files (list (expand-file-name "todo.org" org-directory)))
(setq org-agenda-ndays 7)
(setq org-agenda-show-all-dates t)
(setq org-agenda-skip-deadline-if-done t)
(setq org-agenda-skip-scheduled-if-done t)
(setq org-agenda-start-on-weekday nil)
(setq org-reverse-note-order t)
(setq org-fast-tag-selection-single-key (quote expert))
#+end_src

Custom commands for the agenda mode
#+begin_src emacs-lisp
(setq org-agenda-custom-commands
      (quote (("c" todo "DONE|DEFERRED|CANCELLED|STARTED" nil)
              ("w" todo "WAITING" nil)
              ("W" agenda "" ((org-agenda-ndays 21)))
              ("A" agenda ""
               ((org-agenda-skip-function
                 (lambda nil
                   (org-agenda-skip-entry-if (quote notregexp) "\\=.*\\[#A\\]")))
                (org-agenda-ndays 1)
                (org-agenda-overriding-header "Today's Priority #A tasks: ")))
              ("u" alltodo ""
               ((org-agenda-skip-function
                 (lambda nil
                   (org-agenda-skip-entry-if (quote scheduled) (quote deadline)
                                             (quote regexp) "\n]+>")))
                (org-agenda-overriding-header "Unscheduled TODO entries: "))))))
#+end_src

**** Org-Capture
Org-capture stores notes and todos with a simple key command.
#+begin_src emacs-lisp
(setq org-default-notes-file (list (expand-file-name "notes.org" org-directory)))
(define-key global-map "\C-cc" 'org-capture)
#+end_src

Capture to specified files
#+begin_src emacs-lisp
(setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/notebook/todo.org" "Tasks")
         "* TODO %?\n%i\n%a" :kill-buffer t)
        ("n" "Journal" entry (file+headline "~/notebook/notes.org" "Unsorted")
         "* %?\n%U\n%a\n%i" :prepend t :kill-buffer t)
        ("r" "Research task" entry (file+headline "~/research/notes.org" "Tasks")
         "* TODO %?\n%i\n%a" :kill-buffer t)
        ("R" "Research note" entry (file+headline "~/research/notes.org" "Notes")
         "* %?\n%U\n%a\n%i" :prepend t :kill-buffer t)
        ("s" "Code Snippet" entry
         (file+headline "~/notebook/notes.org" "Code")
         "* %?\t%^g\n#+begin_src %^{language}\n\n#+end_src")
        ("m" "Media" entry
         (file+headline "~/notebook/notes.org" "Movies, TV shows and books")
         "* %?\nURL: \nEntered on %U\n")
        ("c" "Contacts" entry (file (expand-file-name "contacts.org" org-directory))
         "* %(org-contacts-template-name)\n:PROPERTIES:\n:EMAIL: %(org-contacts-template-email)\n:END:")))
#+end_src

Sources:
- [[http://blog.dispatched.ch/2016/05/01/org-mode-capture-template-for-code-snippets/][org-mode capture template for code snippets | Munen Alain M. Lafon]]

**** Activate babel languages                                         :babel:
:PROPERTIES:
:CUSTOM_ID: babel
:END:
This activates a number of widely used languages, you are
encouraged to activate more languages.  The customize interface
of =org-babel-load-languages= contains an up to date list of
the currently supported languages.

#+begin_src emacs-lisp
(setq org-babel-load-languages '((emacs-lisp . t)
                                 (sql . t)
                                 (shell . t)
                                 (matlab . t)
                                 (octave . t)
                                 (gnuplot . t)
                                 (python . t)
                                 (dot . t)
                                 (ditaa . t)
                                 (latex . t)
                                 (js . t)
                                 (R . t)
                                 (C . t)
                                 (css . t)
                                 (calc . t)
                                 (maxima . t)
                                 (perl . t)))

(when (and (el-get-package-exists-p "ess") (executable-find "julia"))
  (add-to-list 'org-babel-load-languages '(julia . t)))

(when (and (el-get-package-exists-p "ob-ipython"))
  (add-to-list 'org-babel-load-languages '(ipython . t)))
#+end_src

#+name: babel-lang
#+begin_src emacs-lisp
(org-babel-do-load-languages 'org-babel-load-languages org-babel-load-languages)
#+end_src

Adding unsecure evaluation of code-blocks
#+begin_src emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+end_src

Don't evaluate src code on export [[help:org-export-babel-evaluate][and more (WARNING !!)]]. To make sure not to evalue on export use the header argument =:eval never-export=.
#+begin_src emacs-lisp :tangle no
(setq org-export-babel-evaluate nil)
#+end_src

**** Org library of babel

Add the standard file to the library
#+begin_src emacs-lisp
(org-babel-lob-ingest (expand-file-name "org-mode/doc/library-of-babel.org" el-get-dir))
#+end_src

#+begin_src emacs-lisp
(org-babel-lob-ingest (expand-file-name "org/tjarnberg-lob.org" emacs-init-dir))
#+end_src

**** Code block fontification and editing
:PROPERTIES:
:CUSTOM_ID: code-block-fontification
:END:
The following displays the contents of code blocks in Org-mode files
using the major-mode of the code.  It also changes the behavior of
=TAB= to as if it were used in the appropriate major mode.  This means
that reading and editing code from inside of your Org-mode files is
much more like reading and editing of code using its major mode.
#+begin_src emacs-lisp
(setq org-src-fontify-natively t)
(setq org-src-tab-acts-natively t)
(setq org-edit-src-content-indentation 0)
(setq org-src-window-setup 'current-window)
#+end_src

To make latex code have special fontification wich can make small inline code snippets look ok.
#+begin_src emacs-lisp
(setq org-highlight-latex-and-related '(latex script entities))
#+end_src

**** Org general export options

[[https://emacs.stackexchange.com/a/27697/427][html5 fancy]]
#+begin_src emacs-lisp
(setq org-export-with-sub-superscripts '{}
      org-html-html5-fancy t
      org-html-doctype "html5")
#+end_src

So that the export does not end up in the kill ring.
#+begin_src emacs-lisp
(setq org-export-copy-to-kill-ring nil)
#+end_src

Make sure that my own lables are preserved
#+begin_src emacs-lisp
(setq org-latex-prefer-user-labels t)
#+end_src

force utf-8 in export
#+begin_src emacs-lisp
(setq org-export-coding-system 'utf-8)
#+end_src

Languages in html code blocks. Not working as expected, might be already set to python. But the mouse over language box does not appear.
#+begin_src emacs-lisp :tangle no
(add-to-list 'org-latex-listings-langs '(ipython "IPython"))
#+end_src

**** Default header arguments

Unfortunatley this seems to break tramp execution. Specifically to the NCS gamma. It might be more general but I haven't tested it.
#+begin_src emacs-lisp :tangle no
;; ensure this variable is defined
(unless (boundp 'org-babel-default-header-args:sh)
  (setq org-babel-default-header-args:sh '()))

(add-to-list 'org-babel-default-header-args:sh
             '(:shebang . "#!/usr/bin/env bash"))
#+end_src

**** Org-mode hooks
Make org understand latex syntax: [[http://stackoverflow.com/questions/11646880/flyspell-in-org-mode-recognize-latex-syntax-like-auctex][source]]
#+begin_src emacs-lisp
(add-hook 'org-mode-hook (lambda () (setq ispell-parser 'tex)))
#+end_src

make ispell treat src blocks ok. [[http://endlessparentheses.com/ispell-and-org-mode.html][Source]]
#+begin_src emacs-lisp
(defun endless/org-ispell ()
  "Configure `ispell-skip-region-alist' for `org-mode'."
  (make-local-variable 'ispell-skip-region-alist)
  (add-to-list 'ispell-skip-region-alist '(org-property-drawer-re))
  (add-to-list 'ispell-skip-region-alist '("~" "~"))
  (add-to-list 'ispell-skip-region-alist '("=" "="))
  (add-to-list 'ispell-skip-region-alist '("^ *#\\+BEGIN_SRC" . "^ *#\\+END_SRC"))
  (add-to-list 'ispell-skip-region-alist '("^ *#\\+begin_src" . "^ *#\\+end_src")))
(add-hook 'org-mode-hook #'endless/org-ispell)
#+end_src

Org-mode hook for tex-master
#+begin_src emacs-lisp
(add-hook 'org-mode-hook (setq TeX-master t))
#+end_src

**** Org LaTeX export types
Originally taken from Bruno Tavernier: [[http://thread.gmane.org/gmane.emacs.orgmode/31150/focus=31432][here]], but adapted to
use latexmk 4.20 or higher.
#+begin_src emacs-lisp
(defun my-auto-tex-cmd (must-be-here-for-hook-to-work)
  "When exporting from .org with latex, automatically run latexmk, latex, pdflatex, or xelatex as appropriate, using latexmk."

  (setq sh-esc "")
  (when (string-match "^#\\+LATEX_CMD: ?\w* ?-shell-escape" (buffer-string))
    (setq sh-esc "-shell-escape "))

  (let (texcmd))
  (cond
   ( ;; tex -> dvi -> pdf
    (string-match "^#\\+LATEX_CMD: +mkpdfdvi" (buffer-string))
    (setq texcmd (concat "latexmk -pdfdvi  " sh-esc "-quiet %f")))
   ( ;; pdflatex -> pdf
    (string-match "^#\\+LATEX_CMD: +pdflatex" (buffer-string))
    (setq texcmd (concat "latexmk -pdf  " sh-esc "-quiet %f")))
   ( ;; bibtex -> dvi -> pdf
    (string-match "^#\\+LATEX_CMD: +mkbibtex" (buffer-string))
    (setq texcmd (concat "latexmk -pdfdvi -bibtex  " sh-esc "-quiet %f")))
   ( ;; bibtex -> pdf
    (string-match "^#\\+LATEX_CMD: +pdfbibtex" (buffer-string))
    (setq texcmd (concat "latexmk -pdf -bibtex " sh-esc "-quiet %f")))
   ( ;; xelatex -> pdf
    (string-match "^#\\+LATEX_CMD: +xelatex" (buffer-string))
    (setq texcmd (concat "latexmk -pdflatex=xelatex -pdf " sh-esc "-quiet %f")))
   ( ;; default
    (string-match "" (buffer-string))
    (setq texcmd (concat "latexmk -pdfdvi " sh-esc "-quiet -f %f"))))
  (setq org-latex-pdf-process (list texcmd)))

(add-hook 'org-export-before-parsing-hook 'my-auto-tex-cmd)
#+end_src

**** Org LaTeX additional export classes

#+begin_src emacs-lisp
(require 'ox-latex)
(add-to-list 'org-latex-classes '("bare-article" "\\documentclass[11pt]{article}
[NO-DEFAULT-PACKAGES]
[PACKAGES]
[EXTRA]"
  ("\\section{%s}" . "\\section*{%s}")
  ("\\subsection{%s}" . "\\subsection*{%s}")
  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
  ("\\paragraph{%s}" . "\\paragraph*{%s}")
  ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

(add-to-list 'org-latex-classes '("bare-report" "\\documentclass[11pt]{report}
[NO-DEFAULT-PACKAGES]
[PACKAGES]
[EXTRA]"
  ("\\part{%s}" . "\\part*{%s}")
  ("\\chapter{%s}" . "\\chapter*{%s}")
  ("\\section{%s}" . "\\section*{%s}")
  ("\\subsection{%s}" . "\\subsection*{%s}")
  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))

(add-to-list 'org-latex-classes '("bare-book" "\\documentclass[11pt]{book}
[NO-DEFAULT-PACKAGES]
[PACKAGES]
[EXTRA]"
  ("\\part{%s}" . "\\part*{%s}")
  ("\\chapter{%s}" . "\\chapter*{%s}")
  ("\\section{%s}" . "\\section*{%s}")
  ("\\subsection{%s}" . "\\subsection*{%s}")
  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
#+end_src

**** Org LaTeX export with my packages
My extra packages in latex exports. Third argument is for if latex math snippets in org buffers should use the package.
#+begin_src emacs-lisp
(add-to-list 'org-latex-packages-alist
             '("" "easySymbols" t))
#+end_src

**** Org LaTeX export with extra packages                        :deprecated:
:PROPERTIES:
:header-args: :tangle   no
:END:
Specify default packages to be included in every tex file, whether
pdflatex or xelatex. This is kept as an example. Some packages are
still included in the output.
#+begin_src emacs-lisp
(setq org-export-latex-packages-alist
      '(("" "graphicx" t)
        ("" "longtable" nil)
        ("" "float" nil)))
#+end_src

Define packages for each latex command. Using latexmk...
#+begin_src emacs-lisp
(defun my-auto-tex-parameters ()
  "Automatically select the tex packages to include."
  ;; default packages for ordinary latex or pdflatex export
  (setq org-export-latex-default-packages-alist
        '(("" "graphicx" t)
          ("" "longtable" nil)
          ("" "float" nil)
          ("AUTO" "inputenc" t)
          ("T1"   "fontenc"   t)
          (""     "fixltx2e"  t)
          (""     "hyperref"  nil)))

  ;; Packages to include when xelatex is used
  (if (string-match "LATEX_CMD: xelatex" (buffer-string))
      (setq org-export-latex-default-packages-alist
            '(("" "fontspec" t)
              ("" "xunicode" t)
              ("" "url" t)
              ("" "rotating" t)
              ("american" "babel" t)
              ("babel" "csquotes" t)
              ("" "soul" t)
              ("xetex" "hyperref" nil)
              )))

  (if (string-match "LATEX_CMD: xelatex" (buffer-string))
      (setq org-export-latex-classes
            (cons '("article"
                    "\\documentclass[11pt,article,oneside]{memoir}"
                    ("\\section{%s}" . "\\section*{%s}")
                    ("\\subsection{%s}" . "\\subsection*{%s}")
                    ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                    ("\\paragraph{%s}" . "\\paragraph*{%s}")
                    ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
                  org-export-latex-classes))))
(add-hook 'org-export-latex-after-initial-vars-hook 'my-auto-tex-parameters)
#+end_src

**** Org LaTeX math snippets configuration

To activate math snippets in a buffer do ~C-v C-c C-l~, and repeat to deactivate.
Program to use for convertion can be set with the variable [[help:org-preview-latex-default-process][org-preview-latex-default-process]] to anyone found in [[help:org-preview-latex-process-alist][org-preview-latex-process-alist]].

set to use svg images instead of png if possible
#+begin_src emacs-lisp
(when (executable-find "dvisvgm")
  (setq org-preview-latex-default-process 'dvisvgm))
#+end_src

Scale math snippets to a reasonable size (it seems like the correct way of doing this is found in the variable [[help:org-format-latex-options]])
#+begin_src emacs-lisp
(plist-put (alist-get 'dvipng org-preview-latex-process-alist)
           :image-size-adjust '(1.5 . 1.5))
(plist-put (alist-get 'dvisvgm org-preview-latex-process-alist)
           :image-size-adjust '(2.2 . 2.2))
#+end_src

**** org cdlatex integration

[[https://www.gnu.org/software/emacs/manual/html_node/org/CDLaTeX-mode.html][The Org Manual: CDLaTeX mode]]
#+begin_src emacs-lisp
(when (el-get-package-exists-p "cdlatex-mode")
  (add-hook 'org-mode-hook 'turn-on-org-cdlatex)
  (add-hook 'cdlatex-mode-hook
            (lambda () (when (eq major-mode 'org-mode)
                         (make-local-variable 'org-pretty-entities-include-sub-superscripts)
                         (setq org-pretty-entities-include-sub-superscripts nil)))))
#+end_src
**** Org man-pages integration

#+begin_src emacs-lisp
(require 'org-man)
#+end_src

**** Org Export only heading content without heading notitle

This is now implement in org/contrib. keyword =ignore= will now do what I want.
#+begin_src emacs-lisp
(require 'ox-extra)
(ox-extras-activate '(latex-header-blocks ignore-headlines))
#+end_src

**** Org HTML export without XHTML link

#+begin_src emacs-lisp
(setq org-html-validation-link nil)
#+end_src

**** Org subscript should not be down shifted unless {}

#+begin_src emacs-lisp
(setq org-use-sub-superscripts '{})
#+end_src

**** latex-math-mode in Org
Turn on latex math mode by default
[[help:latex-math-mode][commands]]

#+begin_src emacs-lisp
(when (el-get-package-exists-p "auctex")
  (add-hook 'org-mode-hook 'LaTeX-math-mode))
#+end_src

**** Hide/Show emphasis markers

to hide the *,=,_, or / markers set ~t~
#+begin_src emacs-lisp
(setq org-hide-emphasis-markers nil)
#+end_src

**** Prettify symbols in org-mode
To have \alpha, \to and others display as utf8 http://orgmode.org/manual/Special-symbols.html.
See [[help:org-entities][this]] variable to see what is included.

#+begin_src emacs-lisp
(setq org-pretty-entities t)
#+end_src

**** Load rasmus prettify src blocks

#+begin_src emacs-lisp
(with-library rasmus-prettify)
#+end_src

**** org-ref configuration
:PROPERTIES:
:CUSTOM_ID: org-ref
:END:
Deprecated source from previous setup: [[http://tincman.wordpress.com/2011/01/04/research-paper-management-with-emacs-org-mode-and-reftex/][here]]

I went for using [[https://github.com/jkitchin/jmax/blob/master/org-ref.org][org-ref]] to manage references and citations
in org-mode. Both a [[http://kitchingroup.cheme.cmu.edu/blog/][blog]] from the creator and a [[https://www.youtube.com/watch?v=JyvpSVl4_dg][video]] relates
to org-ref and can be useful.

Paths to files. This might be more general than reftex.
#+begin_src emacs-lisp
(setq org-link-abbrev-alist
      '(("bib" . "~/research/bibliography.bib::%s")
        ("bib-notes" . "~/research/bib-notes.org::#%s")
        ("notes" . "~/research/notes.org::#%s")
        ("papers" . "~/research/papers/%s.pdf")))
#+end_src

Org-ref variables
#+begin_src emacs-lisp
(when (el-get-package-exists-p "org-ref")
  ;; (require 'org-ref)
  (setq org-ref-bibliography-notes "~/research/bib-notes.org"
        org-ref-default-bibliography '("~/research/bibliography.bib")
        org-ref-pdf-directory "~/research/papers/"
        org-ref-note-title-format "** %k - %t
:PROPERTIES:
:INTERLEAVE_PDF: papers/%f
:Custom_ID: %k
:AUTHOR: %a
:JOURNAL: %j
:YEAR: %y
:VOLUME: %v
:PAGES: %p
:DOI: %D
:URL: %U
:END:
")

  (setq org-agenda-files (reverse (add-to-ordered-list 'org-agenda-files (expand-file-name org-ref-bibliography-notes)))))
#+end_src

**** helm-bibtex
:PROPERTIES:
:CUSTOM_ID: helm-bibtex
:END:

Basic configuration
#+begin_src emacs-lisp
(when (el-get-package-exists-p "helm-bibtex")
  (setq bibtex-completion-library-path '("~/research/papers")
        bibtex-completion-bibliography '("~/research/bibliography.bib")
        bibtex-completion-notes-path "~/research/bib-notes.org"
        bibtex-completion-notes-path "~/research/bib-notes.org"))
#+end_src

Additional configuration
#+begin_src emacs-lisp
(when (el-get-package-exists-p "helm-bibtex")
  (setq bibtex-completion-additional-search-fields '(abstract keywords))
  (define-key org-mode-map (kbd "<menu> b" ) 'helm-bibtex))
#+end_src

Not sure how to use this for helm-bibtex specifically. But this works
#+begin_src emacs-lisp
(when (el-get-package-exists-p "helm-bibtex")
(add-hook 'helm-after-initialize-hook (lambda ()
                                        (with-helm-buffer
                                          (visual-line-mode)))))
#+end_src



**** interleave-mode
interleave needs to be installed with ~package-install~ from =melpa=
#+begin_src emacs-lisp
(setq interleave-org-notes-dir-list '("~/research" "."))
#+end_src

**** Org reveal
[[https://github.com/hakimel/reveal.js][reveal.js]] is a presentation creation package that creates
HTML5 presentations from org-mode. It can be integrated in
org-mode export with [[https://github.com/yjwen/org-reveal][org-reveal]].

To setup and create presentations with org-mode see instructions [[http://blog.jr0cket.co.uk/2013/09/create-html5-presentations-emacs-revealjs.html][here]].

Set org-reveal-root path.
#+begin_src emacs-lisp
(when (el-get-package-exists-p "org-reveal")
  (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/"))
#+end_src

**** Org eww integration
#+begin_src emacs-lisp
(with-eval-after-load "eww" (require 'org-eww))
#+end_src

**** Ediff org-mode buffers
[[https://emacs.stackexchange.com/a/21336/427][source]]
#+begin_src emacs-lisp
(add-hook 'ediff-prepare-buffer-hook #'show-all)
#+end_src

**** Org protocal
http://oremacs.com/2015/01/07/org-protocol-1/
http://oremacs.com/2015/01/08/org-protocol-2/
**** MobileOrg
Mobile org push/pull directory
#+begin_src emacs-lisp
(setq org-mobile-directory "~/Dropbox/org" )
(setq org-mobile-inbox-for-pull (expand-file-name "from-mobile.org" org-directory))
#+end_src

#+begin_src emacs-lisp
(setq org-mobile-files (list
                        (expand-file-name "notes.org" org-directory)
                        (expand-file-name "todo.org" org-directory)))
#+end_src

This should only be added if =org-ref= exist
#+begin_src emacs-lisp
(when (el-get-package-exists-p "org-ref")
  (add-to-list 'org-mobile-files
               (expand-file-name org-ref-bibliography-notes)))
#+end_src


Pull at startup
#+begin_src emacs-lisp :tangle no
(add-hook 'after-init-hook 'org-mobile-pull)
#+end_src

Push at exit
#+begin_src emacs-lisp :tangle no
(add-hook 'kill-emacs-hook 'org-mobile-push)
#+end_src
*** General company-mode settings                                   :company:
[[https://company-mode.github.io/][source]]

#+begin_src emacs-lisp
(when (el-get-package-exists-p "company-mode")
  (add-hook 'after-init-hook 'global-company-mode))
#+end_src

General [[https://github.com/vspinu/company-math][math company]]
#+begin_src emacs-lisp
(when (el-get-package-exists-p "company-math")
  (add-to-list 'company-backends 'company-math-symbols-unicode))
#+end_src

*** Eshell
good [[https://www.masteringemacs.org/article/complete-guide-mastering-eshell][source]]

Set the alias file location
#+begin_src emacs-lisp
(setq eshell-directory-name (concat emacs-init-dir "eshell"))
#+end_src

[[https://emacs.stackexchange.com/questions/14522/how-do-i-change-behaviour-of-eshell-rm-rm-in-eshell-tab-completion][How do I change behaviour of eshell/rm (rm in eshell) tab completion? - Emacs Stack Exchange]]
#+begin_src emacs-lisp
(require 'pcmpl-unix)
(defun pcomplete/rm ()
  "Completion for `rm'."
  (let* (
         (pcomplete-file-ignore nil)
         (pcomplete-dir-ignore "^../$\\|^./$")
         (pcomplete-help "(fileutils)rm invocation"))
    (pcomplete-opt "dfirRv")
    (while (pcomplete-here (pcomplete-entries) nil 'expand-file-name))))
#+end_src

*** Ansi-term
A mix of [[http://oremacs.com/2015/01/01/three-ansi-term-tips/][this source]] and a little of [[https://echosa.github.io/blog/2012/06/06/improving-ansi-term/][that source]].

kill buffer after terminating shell
#+begin_src emacs-lisp
(defun oleh-term-exec-hook ()
  (let* ((buff (current-buffer))
         (proc (get-buffer-process buff)))
    (set-process-sentinel
     proc
     `(lambda (process event)
        (if (string= event "finished\n")
            (kill-buffer ,buff))))))

(add-hook 'term-exec-hook 'oleh-term-exec-hook)
#+end_src

Always use bash
#+begin_src emacs-lisp
(setq explicit-shell-file-name (executable-find "bash"))
#+end_src

Use UTF8 for the terminal
#+begin_src emacs-lisp
(defun my-term-use-utf8 ()
  (set-buffer-process-coding-system 'utf-8-unix 'utf-8-unix))
(add-hook 'term-exec-hook 'my-term-use-utf8)
#+end_src

Make adresses in terminal work.
#+begin_src emacs-lisp
(defun my-term-hook ()
  (goto-address-mode))

(add-hook 'term-mode-hook 'my-term-hook)
#+end_src

Fix pasting
#+begin_src emacs-lisp
(eval-after-load "term"
  '(define-key term-raw-map (kbd "C-c C-y") 'term-paste))
#+end_src

*** Yasnippet
:PROPERTIES:
:CUSTOM_ID: yasnippet
:END:
- [[http://code.google.com/p/yasnippet/][yasnippet]] is yet another snippet expansion system for Emacs. It is
  inspired by TextMate's templating syntax.
  - watch the [[http://www.youtube.com/watch?v=vOj7btx3ATg][video on YouTube]]
  - see the [[http://yasnippet.googlecode.com/svn/trunk/doc/index.html][intro and tutorial]]

Install yasnippet with el-get manually
#+begin_src emacs-lisp :tangle no
(el-get 'sync '(yasnippet))
#+end_src

Activate yasnippet everywhere
#+begin_src emacs-lisp
(when (el-get-package-exists-p "yasnippet")
  (yas-global-mode 1))
#+end_src

Above does not work for org-mode, therefore do it here.
#+begin_src emacs-lisp
(when (el-get-package-exists-p "yasnippet")
  (add-hook 'org-mode-hook
            '(lambda ()
               (yas-minor-mode))))
#+end_src

Remap =yas-expand= for relevant modes as it over shadows the
otherwise very nice autocompletion. [[https://capitaomorte.github.io/yasnippet/snippet-expansion.html#sec-1-1][source]]
#+begin_src emacs-lisp
(when (el-get-package-exists-p "yasnippet")
  (define-key yas-minor-mode-map (kbd "TAB") nil)
  (define-key yas-minor-mode-map (kbd "<tab>") nil)
  (define-key yas-minor-mode-map (kbd "C-TAB") 'yas-expand)
  (define-key yas-minor-mode-map (kbd "<C-tab>") 'yas-expand)
  (define-key yas-minor-mode-map (kbd "C-1") 'yas-expand)
  (define-key yas-minor-mode-map (kbd "<C-1>") 'yas-expand))
#+end_src

*** Engine-mode

Configure engine-mode
#+begin_src emacs-lisp
(when (el-get-package-exists-p "engine-mode")
  (setq engine/keymap-prefix (kbd "C-c s")))
#+end_src

Pick what browser should be used
#+begin_src emacs-lisp
(when (el-get-package-exists-p "engine-mode")
  (setq browse-url-browser-function 'eww-browse-url))
#+end_src


Search query formats from the github page examples
#+begin_src emacs-lisp
(when (el-get-package-exists-p "engine-mode")
  (defengine amazon
    "http://www.amazon.com/s/ref=nb_sb_noss?url=search-alias%3Daps&field-keywords=%s")

  (defengine duckduckgo
    "https://duckduckgo.com/?q=%s"
    "d")

  (defengine github
    "https://github.com/search?ref=simplesearch&q=%s")

  (defengine google
    "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
    "g")

  (defengine google-images
    "http://www.google.com/images?hl=en&source=hp&biw=1440&bih=795&gbv=2&aq=f&aqi=&aql=&oq=&q=%s")

  (defengine google-maps
    "http://maps.google.com/maps?q=%s")

  (defengine project-gutenberg
    "http://www.gutenberg.org/ebooks/search.html/?format=html&default_prefix=all&sort_order=&query=%s")

  (defengine rfcs
    "http://pretty-rfc.herokuapp.com/search?q=%s")

  (defengine stack-overflow
    "https://stackoverflow.com/search?q=%s")

  (defengine twitter
    "https://twitter.com/search?q=%s")

  (defengine wikipedia
    "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
    "w")

  (defengine wiktionary
    "https://www.wikipedia.org/search-redirect.php?family=wiktionary&language=en&go=Go&search=%s")

  (defengine wolfram-alpha
    "http://www.wolframalpha.com/input/?i=%s")

  (defengine youtube
    "http://www.youtube.com/results?aq=f&oq=&search_query=%s"))
#+end_src

*** Emacs bindings                                             :key:bindings:
:PROPERTIES:
:CUSTOM_ID: emacs-bindings
:END:
Custom keybindings
**** Global visual line mode
Implemented in init.el
**** Align your code in a pretty way.
#+begin_src emacs-lisp
(global-set-key (kbd "C-x \\") 'align-regexp)
#+end_src

**** Whitespace cleanup
#+begin_src emacs-lisp
(global-set-key (kbd "C-c w") 'whitespace-cleanup)
#+end_src

**** Completion that uses many different methods to find options
#+begin_src emacs-lisp
(global-set-key (kbd "M-/") 'hippie-expand)
#+end_src

**** Font size
#+begin_src emacs-lisp
(define-key global-map (kbd "C-+") 'text-scale-increase)
(define-key global-map (kbd "C--") 'text-scale-decrease)
#+end_src

**** Use regexp searches by default
#+begin_src emacs-lisp
(global-set-key (kbd "C-s") 'isearch-forward-regexp)
(global-set-key (kbd "C-r") 'isearch-backward-regexp)
(global-set-key (kbd "C-M-s") 'isearch-forward)
(global-set-key (kbd "C-M-r") 'isearch-backward)
#+end_src

If =visual-regexp= or =visual-regexp-steroids= is installed, use those
#+begin_src emacs-lisp
(when (el-get-package-exists-p "visual-regexp-steroids")
  (require 'visual-regexp-steroids))
#+end_src

#+begin_src emacs-lisp
(when (el-get-package-exists-p "visual-regexp")
  (global-set-key (kbd "C-c r") 'vr/replace)
  (global-set-key (kbd "M-%") 'vr/query-replace)
  (global-set-key (kbd "C-s") 'vr/isearch-forward)
  (global-set-key (kbd "C-r") 'vr/isearch-backward))
#+end_src
and make sure it works the same way as native isearch when searching
#+begin_src emacs-lisp
(when (el-get-package-exists-p "visual-regexp")
  (defadvice vr--isearch (around add-case-insensitive (forward string &optional bound noerror count) activate)
    (when (and (eq vr/engine 'python) case-fold-search)
      (setq string (concat "(?i)" string)))
    ad-do-it))
#+end_src

Disable =visual-regexp= in pdfview
#+begin_src emacs-lisp
(when (el-get-package-exists-p "visual-regexp")
  (add-hook 'pdf-view-mode-hook
            (lambda ()
              (progn
                (local-set-key (kbd "C-s") 'isearch-forward)
                (local-set-key (kbd "C-r") 'isearch-backwards)))))
#+end_src

**** File finding
#+begin_src emacs-lisp
(global-set-key (kbd "C-x M-f") 'ido-find-file-other-window)
(global-set-key (kbd "C-x C-M-f") 'find-file-in-project)
(global-set-key (kbd "C-x C-p") 'find-file-at-point)
(global-set-key (kbd "C-c y") 'bury-buffer)
(global-set-key (kbd "C-c M-r") 'revert-buffer)
(global-set-key (kbd "M-`") 'file-cache-minibuffer-complete)
(global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src

**** Buffer cycling.
#+begin_src emacs-lisp
(global-set-key (kbd "C-<prior>") 'previous-buffer) ; Ctrl+PageDown
(global-set-key (kbd "C-<next>") 'next-buffer) ; Ctrl+PageUp
#+end_src

**** Help should search more than just commands
#+begin_src emacs-lisp
(global-set-key (kbd "C-h a") 'apropos)
#+end_src

**** Rgrep
Rgrep is infinitely useful in multi-file projects.
(see [[elisp:(describe-function 'rgrep)]])
#+begin_src emacs-lisp
(define-key global-map "\C-x\C-r" 'rgrep)
#+end_src

**** cycle through amounts of spacing
[[http://pragmaticemacs.com/emacs/cycle-spacing/][source]]
#+begin_src emacs-lisp
(global-set-key (kbd "M-SPC") 'cycle-spacing)
#+end_src

**** Helm config
[[https://tuhdo.github.io/helm-intro.html][A Package in a league of its own: <code>Helm</code>]]
#+begin_src emacs-lisp
(when (el-get-package-exists-p "helm")
  (with-eval-after-load "helm.el"
    (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
    (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action)))
#+end_src

**** Ace-window
[[https://github.com/abo-abo/ace-window][abo-abo/ace-window: Quickly switch windows in Emacs]]
#+begin_src emacs-lisp
(when (el-get-package-exists-p "ace-window")
  (global-set-key (kbd "C-x o") 'ace-window)
  (setq aw-background nil
        aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
#+end_src

**** Unset COMMENT header fast key in orgmode
I hit this to often in error instead of =C-c '=
#+begin_src emacs-lisp
(add-hook 'org-mode-hook
          (lambda()
            (local-unset-key (kbd "C-c ;"))))
#+end_src

*** Emacs aliases
**** for yes-no to y-n choice.
#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
**** for replace-string to rs
#+begin_src emacs-lisp
(defalias 'rs 'replace-string)
#+end_src

*** Custom functions
Self defined functionality
**** convert DOuble CApitals to Single Capitals
source [[https://emacs.stackexchange.com/questions/13970/fixing-double-capitals-as-i-type/13975#13975][here]] and [[http://endlessparentheses.com/fixing-double-capitals-as-you-type.html][here]]

#+begin_src emacs-lisp
(defun dcaps-to-scaps ()
  "Convert word in DOuble CApitals to Single Capitals."
  (interactive)
  (and (= ?w (char-syntax (char-before)))
       (save-excursion
         (and (if (called-interactively-p)
                  (skip-syntax-backward "w")
                (= -3 (skip-syntax-backward "w")))
              (let (case-fold-search)
                (looking-at "\\b[[:upper:]]\\{2\\}[[:lower:]]"))
              (capitalize-word 1)))))

(add-hook 'post-self-insert-hook #'dcaps-to-scaps nil 'local)
#+end_src

#+begin_src emacs-lisp
(define-minor-mode dubcaps-mode
  "Toggle `dubcaps-mode'.  Converts words in DOuble CApitals to Single Capitals as you type."
  :init-value nil
  :lighter (" DC")
  (if dubcaps-mode
      (add-hook 'post-self-insert-hook #'dcaps-to-scaps nil 'local)
    (remove-hook 'post-self-insert-hook #'dcaps-to-scaps 'local)))
#+end_src

initialize it for text modes.
#+begin_src emacs-lisp
(add-hook 'text-mode-hook #'dubcaps-mode)
#+end_src

**** Change theme based on time
:PROPERTIES:
:header-args: :tangle   no
:END:

#+begin_src emacs-lisp
(defun change-theme-on-time ()
  (destructuring-bind (sec min h m year junk junk junk junk) (decode-time (current-time)))
  (if (or (> (string-to-number (format-time-string "%H" (current-time))) 18)
          (< (string-to-number (format-time-string "%H" (current-time))) 9))
      (unless custom-enabled-themes (load-theme 'my-z t)) (disable-theme 'my-z)))
#+end_src

#+begin_src emacs-lisp
(add-hook 'before-make-frame-hook 'change-theme-on-time)
#+end_src

**** Disable mouse mode
[[http://endlessparentheses.com/disable-mouse-only-inside-emacs.html?source=rss][Disable Mouse only inside Emacs · Endless Parentheses]]

#+begin_src emacs-lisp
(define-minor-mode disable-mouse-mode
  "A minor-mode that disables all mouse keybinds."
  :global t
  :lighter " 🐭"
  :keymap (make-sparse-keymap))

(dolist (type '(mouse down-mouse drag-mouse
                      double-mouse triple-mouse))
  (dolist (prefix '("" C- M- S- M-S- C-M- C-S- C-M-S-))
    ;; Yes, I actually HAD to go up to 7 here.
    (dotimes (n 7)
      (let ((k (format "%s%s-%s" prefix type n)))
        (define-key disable-mouse-mode-map
          (vector (intern k)) #'ignore)))))
#+end_src

**** Launch org-mode sheat sheet

#+begin_src emacs-lisp
(defun my-orgmode-sheat-sheet ()
  (interactive)
  (eww "http://orgmode.org/orgcard.txt"))
#+end_src

*** Publish emacs init

This adds publication options to ~C-c C-e~
#+begin_src emacs-lisp
(emacs-init-load "emacs-init-publish.org")
#+end_src

* Load User/System Specific Files
:PROPERTIES:
:CUSTOM_ID: user-system-configs
:END:

You can keep system- or user-specific customizations here in either
raw emacs-lisp files or as embedded elisp in org-mode files (as done
in this document).

You can keep elisp source in the =src= directory. Packages loaded
from here will override those installed by ELPA. This is useful if
you want to track the development versions of a project, or if a
project is not in elpa.

After we've loaded all the Emacs Init defaults, lets load the User's
stuff.
#+begin_src emacs-lisp
(cl-flet ((sk-load (base)
                   (let* ((path          (expand-file-name base emacs-init-dir))
                          (literate      (concat path ".org"))
                          (encrypted-org (concat path ".org.gpg"))
                          (plain         (concat path ".el"))
                          (encrypted-el  (concat path ".el.gpg")))
                     (cond
                      ((file-exists-p encrypted-org) (org-babel-load-file encrypted-org))
                      ((file-exists-p encrypted-el)  (load encrypted-el))
                      ((file-exists-p literate)      (org-babel-load-file literate))
                      ((file-exists-p plain)         (load plain)))))
          (remove-extension (name)
                            (string-match "\\(.*?\\)\.\\(org\\(\\.el\\)?\\|el\\)\\(\\.gpg\\)?$" name)
                            (match-string 1 name)))
  (let ((elisp-dir (expand-file-name "src" emacs-init-dir))
        (user-dir (expand-file-name user-login-name emacs-init-dir)))
    ;; add the src directory to the load path
    (add-to-list 'load-path elisp-dir)
    ;; load specific files
    (when (file-exists-p elisp-dir)
      (let ((default-directory elisp-dir))
        (normal-top-level-add-subdirs-to-load-path)))
    ;; load system-specific config
    (sk-load system-name)
    ;; load user-specific config
    (sk-load user-login-name)
    ;; load any files in the user's directory
    (when (file-exists-p user-dir)
      (add-to-list 'load-path user-dir)
      (mapc #'sk-load
            (remove-duplicates
             (mapcar #'remove-extension
                     (directory-files user-dir t ".*\.\\(org\\|el\\)\\(\\.gpg\\)?$"))
             :test #'string=)))))
#+end_src

** Settings from M-x customize
#+begin_src emacs-lisp
(load custom-file 'noerror)
#+end_src

* Footnotes

[1] If you already have a directory at =~/.emacs.d= move it out of the
way and put this there instead.

[2] The emacs init uses [[http://orgmode.org/][Org Mode]] to load embedded elisp code directly
from literate Org-mode documents. Org is included with Emacs for
later version.
