#+TITLE: Emacs Init
#+OPTIONS: toc:2 num:nil ^:nil
#+STARTUP:  hideblocks

#+begin_quote
  Emacs outshines all other editing software in approximately the same
  way that the noonday sun does the stars. It is not just bigger and
  brighter; it simply makes everything else vanish.

  -- Neal Stephenson, "In the Beginning was the Command Line"
#+end_quote

* Introduction
  :PROPERTIES:
  :CUSTOM_ID: introduction
  :END:
  - emacs24-starter-kit :: This file is inspired by and in part copied
       from emacs24-starter-kit. The latest version can be found at
       http://github.com/eschulte/emacs24-starter-kit/
    #+begin_src sh
      git clone https://github.com/eschulte/emacs24-starter-kit.git ~/src/emacs24-starter-kit
    #+end_src

       If you want to keep your regular =~/.emacs.d= in place and just launch
       a single instance, using the starter kit, try the following invocation:
    #+begin_src sh
      emacs -q -l ~/src/emacs24-starter-kit/init.el
    #+end_src

** Why modify the emacs24-starter-kit?
   The reasons are simple. I want a "me" centered emacs initialization
   rather then a starter-kit centered one. This means that I should be
   able to use it the way i feel works for me. Another reason is that
   introducing alot of new "features" which I haven't tested makes
   emacs work very far from factory settings without me knowing what
   is what or where it originated from.
** Structure
   :PROPERTIES:
   :CUSTOM_ID: structure
   :END:
   The =init.el= file is where everything begins. It is loaded
   automatically by Emacs on startup, its sole purpose is to load the
   elisp code embedded in this file.  This file then loads some core
   configurations and packages which should be generally useful, and
   goes on to load user-specific configuration files from the
   following locations mentioned in [[customization]] immediately below.

** Customization
   :PROPERTIES:
   :CUSTOM_ID: customization
   :END:
   The defaults built into the emacs init are only the beginning of
   most users customization of Emacs to suite their needs.  This file
   provides a number of places for additional user and system
   specific customization.

   - User specific config :: Your personal configuration information can
        be stored in a user-specific-config file.  This is the file named
        after your user with the extensions =.el= or =.org= [2].  If
        you're unsure of your user name evaluate the following code block
        to find out.
     #+begin_src sh
       echo $USER
     #+end_src
        If your configuration starts to feel cramped in a single file
        (although with the nested headlines of an Org-mode file, that
        could take a while) and you want to stretch your config's legs,
        you can also create a directory named after your system user
        name.  If a such a directory exists, it will be added to the
        load-path, and any elisp or org-mode w/embedded elisp files in it
        will be loaded.

   - System specific config :: Finally, you may want to configure
        different settings for different machines.  The Emacs Init will
        look for a file named after the current hostname ending in =.el=
        or =.org= which will allow host-specific configuration. If
        you're unsure of your hostname the following can be executed to
        find out.
     #+begin_src sh
       hostname
     #+end_src

   - Installing more elisp libraries :: The easiest way to install new
        libraries is through the
     - Emacs Lisp Package Archive :: (see [[#emacs-lisp-package-archive][EmacsLisp Package Archive]]
          below).  When a library is not available through ELPA you
          can grab it's source and place it directly in the =src=
          directory. Any packages found there will automatically be
          added to your load-path when Emacs starts up. I also install
          packages through el-get.
     - El-get :: (see [[#emacs-lisp-get][El-get]] below). The other easy way to install new
                 packages is with the package manager el-get. El-get
                 will automatically initiate the package to be used
                 with .emacs
   - Misc :: Some additional miscellaneous configuration and getting
             started suggestions
     - First see the [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Customization.html#Customization][Customization]] node in the Emacs manual. Available
       online or through the =info= command (run with =C-h i=).
     - read the following [[http://www.gnu.org/software/emacs/elisp/html_node/Key-Binding-Conventions.html][Key-Binding-Conventions]] before defining too
       many personal key bindings

** Emacs Lisp Package Archive
   :PROPERTIES:
   :CUSTOM_ID: emacs-lisp-package-archive
   :END:

   Libraries from [[http://tromey.com/elpa][ELPA]] are preferred when available since dependencies
   are handled automatically, and the burden to update them is removed
   from the user. ELPA is now an official part of Emacs so no special
   configuration is required to download and install packages.  Packages
   installed through ELPA will be stored in the =elpa/= sub-directory of
   this directory.

** El-get
   :PROPERTIES:
   :CUSTOM_ID: el-get-package-manager
   :END:
   El-get is a /(foxy el-mexicano, Arriba! Arriba!:)/ package manager using
   custome recipes for installing and initializing emacs packages from
   a wide range of different repositories. The source can be fetched
   [[https://github.com/dimitri/el-get][here]], by doing:
   #+begin_src sh
     git clone https://github.com/dimitri/el-get.git
   #+end_src
   This can be automated with a [[Lazy%20install][Lazy install]] or regular [[Install]], which
   is the default in this emacs-init.

* Implementation
  :PROPERTIES:
  :CUSTOM_ID: implementation
  :END:
** Emacs init basics
   - Load path etc ::
     #+name: emacs-init-load-paths
     #+begin_src emacs-lisp
       (add-to-list 'load-path emacs-init-dir)
       (setq autoload-file (concat emacs-init-dir "loaddefs.el"))
       (setq package-user-dir (concat emacs-init-dir "elpa"))
       (setq custom-file (concat emacs-init-dir "custom.el"))
     #+end_src
   - Ubiquitous Packages ::  which should be loaded on startup rather than
        autoloaded on demand since they are likely to be used in every
        session.
     #+name: emacs-init-load-on-startup
     #+begin_src emacs-lisp
       (require 'saveplace)
       (require 'ffap)
       (require 'uniquify)
       (require 'ansi-color)
       (require 'recentf)
     #+end_src
   - ELPA archive repositories ::
     #+begin_src emacs-lisp
       (setq package-archives
             '(("original"    . "http://tromey.com/elpa/")
               ("gnu"         . "http://elpa.gnu.org/packages/")
               ("org"         . "http://orgmode.org/elpa/")
               ("marmalade"   . "http://marmalade-repo.org/packages/")
               ("SC"   . "http://joseito.republika.pl/sunrise-commander/")))
       (package-initialize)
     #+end_src
     - Packages to be installed by default. Put more packages here if
       more default should be installed with elpa.
       #+begin_src emacs-lisp
         (defvar emacs-init-packages
           (list 'yasnippet-bundle)
           "Libraries that should be installed by default.")
         (unless package-archive-contents
           (package-refresh-contents))
         (dolist (package emacs-init-packages)
           (unless (package-installed-p package)
             (package-install package)))
       #+end_src
   - El-get initialization ::
     - Lazy Install :: # <<Lazy Install>>
                       To setup el-get the simple way one needs only
                       to evaluate the following emacs lisp block
       #+begin_src emacs-lisp :tangle no
         ;; So the idea is that you copy/paste this code into your *scratch* buffer,
         ;; hit C-j, and you have a working el-get.
         (url-retrieve
          "https://raw.github.com/dimitri/el-get/master/el-get-install.el"
          (lambda (s)
            (goto-char (point-max))
            (eval-print-last-sexp)))
       #+end_src
     - Install :: # <<Install>>
      #+begin_src emacs-lisp
        (setq el-get-dir (expand-file-name "el-get" emacs-init-dir))
        (add-to-list 'load-path (concat emacs-init-dir "el-get/el-get"))

        (unless (require 'el-get nil 'noerror)
          (with-current-buffer
              (url-retrieve-synchronously
               "https://raw.github.com/dimitri/el-get/master/el-get-install.el")
            (let (el-get-master-branch)
              (goto-char (point-max))
              (eval-print-last-sexp))))

        (add-to-list 'el-get-recipe-path (concat emacs-init-dir "recipes"))
        (el-get 'sync)
       #+end_src

   - Functions for loading other parts of the emacs init ::
     #+name: emacs-init-load
     #+begin_src emacs-lisp
       (defun emacs-init-load (file &optional header-or-tag)
         "Load configuration from other emacs-init-*.org files.
          If the optional argument is the id of a subtree then only
          configuration from within that subtree will be loaded.  If it is
          not an id then it will be interpreted as a tag, and only subtrees
          marked with the given tag will be loaded.

          ! STARTER-KIT Configurations:
          For example, to load all of emacs-init-lisp.org simply
          add (emacs-init-load \"lisp\") to your configuration.
          To load only the 'window-system' config from
          emacs-init-misc-recommended.org add
       (emacs-init-load \"misc-recommended\" \"window-system\")
       to your configuration."
        (let ((file (expand-file-name (if (string-match "emacs-init-.+\.org" file)
                          file
                        (format "emacs-init-%s.org" file))
                          emacs-init-dir)))
          (org-babel-load-file
           (if header-or-tag
           (let* ((base (file-name-nondirectory file))
                  (dir  (file-name-directory file))
                  (partial-file (expand-file-name
                         (concat "." (file-name-sans-extension base)
                             ".part." header-or-tag ".org")
                         dir)))
             (unless (file-exists-p partial-file)
               (with-temp-file partial-file
                 (insert
                  (with-temp-buffer
                (insert-file-contents file)
                (save-excursion
                  (condition-case nil ;; collect as a header
                      (progn
                    (org-link-search (concat"#"header-or-tag))
                    (org-narrow-to-subtree)
                    (buffer-string))
                    (error ;; collect all entries with as tags
                     (let (body)
                   (org-map-entries
                    (lambda ()
                      (save-restriction
                        (org-narrow-to-subtree)
                        (setq body (concat body "\n" (buffer-string)))))
                    header-or-tag)
                   body))))))))
             partial-file)
             file))))
     #+end_src

** Emacs init core
   :PROPERTIES:
   :CUSTOM_ID: emacs-init-core
   :END:
   These sub-trees contain the remainder of the core of Emacs Init.  All of
   the code in this section should be loaded by emacs used on any
   machine and user.
*** Personal information

    #+begin_src emacs-lisp
      (setq user-full-name "Andreas Tjärnberg"
            user-mail-address "andreas.tjarnberg@fripost.org")
    #+end_src

*** Emacs bindings
    :PROPERTIES:
    :CUSTOM_ID: emacs-bindings
    :END:
    Custom keybindings
**** Global visual line mode
     Implemented in init.el
**** Align your code in a pretty way.
     #+begin_src emacs-lisp
       (global-set-key (kbd "C-x \\") 'align-regexp)
     #+end_src
**** Completion that uses many different methods to find options
     #+begin_src emacs-lisp
       (global-set-key (kbd "M-/") 'hippie-expand)
     #+end_src

**** Font size
     #+begin_src emacs-lisp
       (define-key global-map (kbd "C-+") 'text-scale-increase)
       (define-key global-map (kbd "C--") 'text-scale-decrease)
     #+end_src

**** Use regex searches by default
     #+begin_src emacs-lisp
       (global-set-key (kbd "C-s") 'isearch-forward-regexp)
       (global-set-key (kbd "C-r") 'isearch-backward-regexp)
       (global-set-key (kbd "C-M-s") 'isearch-forward)
       (global-set-key (kbd "C-M-r") 'isearch-backward)
     #+end_src

**** File finding
     #+begin_src emacs-lisp
       (global-set-key (kbd "C-x M-f") 'ido-find-file-other-window)
       (global-set-key (kbd "C-x C-M-f") 'find-file-in-project)
       (global-set-key (kbd "C-x C-p") 'find-file-at-point)
       (global-set-key (kbd "C-c y") 'bury-buffer)
       (global-set-key (kbd "C-c r") 'revert-buffer)
       (global-set-key (kbd "M-`") 'file-cache-minibuffer-complete)
       (global-set-key (kbd "C-x C-b") 'ibuffer)
     #+end_src

**** Buffer cycling.
     #+begin_src emacs-lisp
       (global-set-key (kbd "C-<prior>") 'previous-buffer) ; Ctrl+PageDown
       (global-set-key (kbd "C-<next>") 'next-buffer) ; Ctrl+PageUp
     #+end_src

**** Help should search more than just commands
     #+begin_src emacs-lisp
       (global-set-key (kbd "C-h a") 'apropos)
     #+end_src

**** Rgrep
     Rgrep is infinitely useful in multi-file projects.
     (see [[elisp:(describe-function 'rgrep)]])
     #+begin_src emacs-lisp
       (define-key global-map "\C-x\C-r" 'rgrep)
     #+end_src

*** Magit
    :PROPERTIES:
    :CUSTOM_ID: magit
    :END:
**** El-get magit
     Install manually
     #+begin_src emacs-lisp :tangle no
       (el-get 'sync '(magit))
     #+end_src

*** Misc
    :PROPERTIES:
    :CUSTOM_ID: misc
    :END:
**** Don't clutter up directories with files~ or #files#
     Rather than saving backup files scattered all over the file system,
     let them live in the =backups/= directory inside of the emacs init.
     #+begin_src emacs-lisp
       (setq backup-directory-alist `(("." . ,(expand-file-name
                                               (concat emacs-init-dir "backups")))))
     #+end_src

     Autosave to specific directory: [[http://emacsredux.com/blog/2013/05/09/keep-backup-and-auto-save-files-out-of-the-way/][source]]. This does not work... as
     is always the case. This stops the autosave feature for some
     reason
     #+begin_src emacs-lisp :tangle no
       (setq auto-save-file-name-transforms
             `((".*" ,(expand-file-name
                       (concat emacs-init-dir "autosave")) t)))
     #+end_src

**** Make colors work in M-x shell
     #+begin_src emacs-lisp
       (add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
     #+end_src

**** Color Themes
     :PROPERTIES:
     :CUSTOM_ID: color-theme
     :END:
     The [[http://www.nongnu.org/color-theme/][Color Themes]] package provides support for changing, saving,
     sharing Emacs color themes.  To view and apply color themes available
     on your system run =M-x color-theme-select=.  See the color theme
     website and EmacsWiki pages for more information.
     - http://www.nongnu.org/color-theme/
     - http://www.emacswiki.org/emacs/ColorTheme
     - https://github.com/bbatsov/zenburn-emacs


     Add list to load-theme path. use [[elisp:load-theme][load-theme]] RET "theme" to choose a theme.
     #+begin_src emacs-lisp
       (add-to-list 'custom-theme-load-path (concat emacs-init-dir "themes"))
     #+end_src

     Load my prefered theme if availible
     #+begin_src emacs-lisp
       (condition-case nil
           (load-theme 'my-z t)
         (error "no theme loaded"))
     #+end_src

**** Aspell and dictionaries
     #+begin_src emacs-lisp
       (setq-default ispell-program-name "aspell")
     #+end_src

     Set default ispell dict
     #+begin_src emacs-lisp
       (setq ispell-dictionary "en")
     #+end_src

     Set ispell personal dictionary, this has some weird consequences
     (what consequences!!)
     #+begin_src emacs-lisp
       (setq ispell-personal-dictionary
             (concat emacs-init-dir "ispell-personal-dict"))
     #+end_src

**** Open my specific bashrc files in the right mode
     #+begin_src emacs-lisp
       (add-to-list 'auto-mode-alist '("bashrc\\'" . shell-script-mode))
       (add-to-list 'auto-mode-alist '("bash_variables\\'" . shell-script-mode))
       (add-to-list 'auto-mode-alist '("bash_aliases\\'" . shell-script-mode))
     #+end_src

**** Transparently open compressed files
     #+begin_src emacs-lisp
       (auto-compression-mode t)
     #+end_src

**** Save a list of recent files visited.
     #+begin_src emacs-lisp
       (recentf-mode 1)
     #+end_src
**** Save last place in visited files
     #+begin_src emacs-lisp
       (setq save-place-file (concat emacs-init-dir "saved-places"))
       (setq-default save-place t)
     #+end_src
**** Highlight matching parentheses when the point is on them.
     #+name: emacs-init-match-parens
     #+begin_src emacs-lisp
       (show-paren-mode 1)
       (set-face-background 'show-paren-match-face (face-background 'default))
       (set-face-foreground 'show-paren-match-face "#def")
       (set-face-attribute 'show-paren-match-face nil :weight 'extra-bold)
     #+end_src

**** Alias for yes-no to y-n choice, init random seed.
     #+begin_src emacs-lisp
       (defalias 'yes-or-no-p 'y-or-n-p)
       ;; Seed the random-number generator
       (random t)
     #+end_src
**** Tramp mode defaults
     #+begin_src emacs-lisp
       (setq tramp-default-method "ssh")
     #+end_src

**** Remove trailing whitespaces
     :PROPERTIES:
     :tangle:   no
     :END:
     This is utterly broken especially with python. Disabled for now

     #+begin_src emacs-lisp
       (add-hook 'before-save-hook 'whitespace-cleanup)
     #+end_src

     The below changes the behaviour of whitespace-cleanup to not
     remove whitespaces on empty lines. Source [[http://stackoverflow.com/questions/1412913/show-trailing-whitespace-on-emacs-only-on-non-empty-lines][here]]
     #+begin_src emacs-lisp
       (setq whitespace-trailing-regexp "\\b.*?\\(\\(\t\\| \\|\xA0\\|\x8A0\\|\x920\\|\xE20\\|\xF20\\)+\\)$")
     #+end_src

**** Set exec-path same as PATH in bash
     Source: [[http://stackoverflow.com/questions/9663396/how-do-i-make-emacs-recognize-bash-environment-variables-for-compilation][stackoverflow]]
     #+begin_src emacs-lisp
       (let ((path (shell-command-to-string ". ~/.bash_variables; echo -n $PATH")))
         (setenv "PATH" path)
         (setq exec-path
               (append
                (split-string-and-unquote path ":")
                exec-path)))
     #+end_src emacs-lisp
**** Default to unified diffs
     #+begin_src emacs-lisp
       (setq diff-switches "-u")
     #+end_src

**** Dired mode
     When in dired mode 'a' will find alternative file/dir in the same
     buffer.  source [[http://emacsblog.org/2007/02/25/quick-tip-reuse-dired-buffers/][here]]
     #+begin_src emacs-lisp
       (put 'dired-find-alternate-file 'disabled nil)
     #+end_src

*** LaTeX mode
    :PROPERTIES:
    :CUSTOM_ID: latex
    :END:
**** Fly spell mode for latex mode
     #+begin_src emacs-lisp
       (add-hook 'LaTeX-mode-hook 'flyspell-mode)
     #+end_src

**** Auto fill for latex mode, wrap lines automatically
     #+begin_src emacs-lisp
       (add-hook 'LaTeX-mode-hook 'turn-on-auto-fill)
     #+end_src

**** Some auctex specific settings.
     Install and sync auctex repository with el-get manually.
     #+begin_src emacs-lisp :tangle no
       (el-get 'sync '(auctex))
     #+end_src

     Make emacs aware of auctex
     #+begin_src emacs-lisp
       (if (el-get-package-exists-p "auctex")
           (setq TeX-auto-save t)
         (setq TeX-parse-self t)
         (setq-default TeX-master nil))
     #+end_src

**** RefTeX
     :PROPERTIES:
     :CUSTOM_ID: reftex
     :END:
     Install and sync reftex repository with el-get manually.
     #+begin_src emacs-lisp :tangle no
       (el-get 'sync '(reftex))
     #+end_src

     Set path to default bibfile.
     #+begin_src emacs-lisp
       (if (el-get-package-exists-p "reftex")
       (setq reftex-default-bibliography '("./refs.bib" "~/research/bibliography.bib")))
     #+end_src

     Turn on reftex-mode in Auctex mode.
     #+begin_src emacs-lisp
       (if (el-get-package-exists-p "reftex")
           (add-hook 'LaTeX-mode-hook 'turn-on-reftex))
     #+end_src

*** Python
    :PROPERTIES:
    :CUSTOM_ID: python
    :END:
    Support for the Python programming language.
**** Use Python's python-mode.el instead of Emacs' python.el
     :PROPERTIES:
     :CUSTOM_ID: python-mode
     :END:
     Install and sync python-mode repository with el-get manually
     #+begin_src emacs-lisp :tangle no
       (el-get 'sync '(python-mode))
     #+end_src
     Replace the Python mode that comes with Emacs by the Python mode
     supplied by the Python distribution itself.

     #+begin_src emacs-lisp
       (add-to-list 'auto-mode-alist '("\\.py\\'" . python-mode))
       (add-to-list 'interpreter-mode-alist '("python" . python-mode))
     #+end_src

**** Use IPython if =ipython= command is present
     :PROPERTIES:
     :CUSTOM_ID: ipython
     :END:
     Install and sync ipython repository with el-get manually.
     #+begin_src emacs-lisp :tangle no
       (el-get 'sync '(ipython))
     #+end_src
     If an =ipython= executable is on the path, then assume that
     IPython is the preferred method for python evaluation.
     #+begin_src emacs-lisp
       (when (executable-find "ipython")
         (setq org-babel-python-mode 'python-mode))
     #+end_src
**** Use Cython mode
     :PROPERTIES:
     :CUSTOM_ID: cython
     :tangle:   no
     :END:
     Install and sync cython-mode repository with el-get manually.
     #+begin_src emacs-lisp :tangle no
       (el-get 'sync '(cython-mode))
     #+end_src
     Set cython-mode file associations
     #+begin_src emacs-lisp
       (if (el-get-package-exists-p "cython-mode")
           (add-to-list 'auto-mode-alist '("\\.pyx\\'" . cython-mode))
         (add-to-list 'auto-mode-alist '("\\.pxd\\'" . cython-mode))
         (add-to-list 'auto-mode-alist '("\\.pxi\\'" . cython-mode)))
     #+end_src
**** Emacs ipython notebook
     Enables completion in ein buffer. This gives a bit of unexpected
     behaviour. No popup occure even though latest popup.el is
     installed.
     #+begin_src emacs-lisp
       (if (el-get-package-exists-p "ein")
           (setq ein:use-auto-complete t))
     #+end_src

*** Code-modes
    :PROPERTIES:
    :CUSTOM_ID: coding
    :END:
**** cedet
     I am not sure what this does except enabling cedet when coding,
     whatever that means. =org-edit-src-code: Symbol's function
     definition is void: user-error= error if this sentence is
     removed, odd but true.
     #+begin_src emacs-lisp
       (require 'semantic/sb)
       (global-ede-mode 1)
       (semantic-mode 1)
     #+end_src

**** gnuplot-mode
     :PROPERTIES:
     :CUSTOM_ID: gnuplot
     :END:
     Install and sync gnuplot-mode repository with el-get manually.
     #+begin_src emacs-lisp :tangle no
       (el-get 'sync '(gnuplot-mode))
     #+end_src
     Associate .gp files with gnuplot.
     #+begin_src emacs-lisp
       (setq auto-mode-alist
             (append '(("\\.gp$" . gnuplot-mode)) auto-mode-alist))
     #+end_src

**** MATLAB-mode
     :PROPERTIES:
     :CUSTOM_ID: matlab
     :END:
     DONE: Matlab-mode fails to install because of cedet for some
     reason. Need to modify el-get recipe.

     Install and sync matlab-mode repository with el-get manually
     #+begin_src emacs-lisp :tangle no
       (el-get 'sync '(matlab-mode))
     #+end_src

     The indent function -1 or nil will couse functions to not indent
     #+begin_src emacs-lisp
       (if (el-get-package-exists-p "matlab-mode")
           (add-to-list 'auto-mode-alist '("\\.m$" . matlab-mode))
         (setq matlab-indent-function nil)
         (setq matlab-shell-command "matlab"))
     #+end_src

     Make sure matlab does not auto wrap lines. It's really enoying and
     it does not work! Do manually with 'M-q'
     #+begin_src emacs-lisp
       (if (el-get-package-exists-p "matlab-mode")
       (add-hook 'matlab-mode-hook '(lambda () (auto-fill-mode -1))))
     #+end_src

**** Maxima-mode
     :PROPERTIES:
     :tangle:   no
     :CUSTOM_ID: maxima
     :END:
     Install and sync maxima-mode repository with el-get manually
     #+begin_src emacs-lisp :tangle no
       (el-get 'sync '(maxima-mode))
     #+end_src

     Why is the load-path here so specific
     #+begin_src emacs-lisp
       (if (el-get-package-exists-p "maxima-mode")
           (setq auto-mode-alist (cons '("\\.max" . maxima-mode) auto-mode-alist))
         (setq load-path (cons  "/usr/share/maxima/5.9.2/emacs" load-path))
         (autoload 'maxima "maxima" "Running Maxima interactively" t)
         (autoload 'maxima-mode "maxima" "Maxima editing mode" t))
     #+end_src

*** Org Mode <3
    :PROPERTIES:
    :tangle:   yes
    :END:
    Install and sync org-mode repository with el-get
**** El-getting org-mode
     :PROPERTIES:
     :tangle:   yes
     :END:
     Providing org-mode this way will not update the version in emacs
     when running =M-x org-version=. I don't know why but it is
     annoying. This forces me to run =M-x org-reload= to update org.

     It turns out that the el-get recipe is to blame. Removing the
     =:autoloads= and =:features= gets rid of the warning about
     =requare org-install= but the version problem is still there.
     This is remedied atleast in part by the =(org-reload)= statement.

     TODO: Fix error when org-reload is not precent
     #+begin_src emacs-lisp
       (el-get 'sync '(org-mode))
       (org-reload)
     #+end_src

**** Org-Mode File association
     Both .org and .txt files should be associated with org-mode
     #+begin_src emacs-lisp
       (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
       (add-to-list 'auto-mode-alist '("\\.txt$" . org-mode))
     #+end_src

     Make it so that org-mode opens external pdf files in evince: [[http://stackoverflow.com/questions/8834633/how-do-i-make-org-mode-open-pdf-files-in-evince][source]]
     #+begin_src emacs-lisp
       (eval-after-load "org"
         '(progn (setcdr (assoc "\\.pdf\\'" org-file-apps) "evince %s")))
     #+end_src

**** Hide leading stars in structure outline
     #+begin_src emacs-lisp
       (setq org-hide-leading-stars t)
     #+end_src

**** Org-mode Global Keybindings
     :PROPERTIES:
     :CUSTOM_ID: org-global-keybindings
     :END:
     Two global Emacs bindings for Org-mode

     The [[http://orgmode.org/manual/Agenda-Views.html#Agenda-Views][Org-mode agenda]] is good to have close at hand
     #+begin_src emacs-lisp
       (define-key global-map "\C-ca" 'org-agenda)
     #+end_src

     Org-mode supports [[http://orgmode.org/manual/Hyperlinks.html#Hyperlinks][links]], this command allows you to store links
     globally for later insertion into an Org-mode buffer.  See
     [[http://orgmode.org/manual/Handling-links.html#Handling-links][Handling-links]] in the Org-mode manual.
     #+begin_src emacs-lisp
       (define-key global-map "\C-cl" 'org-store-link)
     #+end_src

**** Local Org files
     Set to the location of your Org files on your local system
     #+begin_src emacs-lisp
       (setq org-directory "~/notebook")
     #+end_src

**** Org-Mode ToDo
     Org mode todo states and agenda mode navigation.
     #+begin_src emacs-lisp
       (eval-after-load "org"
         '(progn
            (define-prefix-command 'org-todo-state-map)
            (define-key org-mode-map "\C-cx" 'org-todo-state-map)
            (define-key org-todo-state-map "x"
              #'(lambda nil (interactive) (org-todo "CANCELLED")))
            (define-key org-todo-state-map "d"
              #'(lambda nil (interactive) (org-todo "DONE")))
            (define-key org-todo-state-map "f"
              #'(lambda nil (interactive) (org-todo "DEFERRED")))
            (define-key org-todo-state-map "l"
              #'(lambda nil (interactive) (org-todo "DELEGATED")))
            (define-key org-todo-state-map "s"
              #'(lambda nil (interactive) (org-todo "STARTED")))
            (define-key org-todo-state-map "w"
              #'(lambda nil (interactive) (org-todo "WAITING")))
            ;; reset keys to original functions
            (add-hook 'org-agenda-mode-hook
                      (lambda ()
                        (define-key org-agenda-mode-map "\C-n" 'next-line)
                        (define-key org-agenda-keymap "\C-n" 'next-line)
                        (define-key org-agenda-mode-map "\C-p" 'previous-line)
                  (define-key org-agenda-keymap "\C-p" 'previous-line)))))
     #+end_src

**** Remember-Mode
     Remember mode makes it possible to store notes and todos in
     different files automaticly with a simple key command.
     #+begin_src emacs-lisp
       (add-hook 'remember-mode-hook 'org-remember-apply-template)
       (define-key global-map [(meta ?r)] 'remember)
     #+end_src

     Display org todo list at startup.
     #+begin_src emacs-lisp :tangle no
       (add-hook 'after-init-hook 'org-todo-list)
     #+end_src

     Remember capture file and command. NOTE: Could probably use some cleanup
     #+begin_src emacs-lisp
       (custom-set-variables
        '(org-agenda-files (quote ("~/notebook/todo.org")))
        '(org-default-notes-file "~/notebook/notes.org")
        '(org-agenda-ndays 7)
        '(org-deadline-warning-days 14)
        '(org-agenda-show-all-dates t)
        '(org-agenda-skip-deadline-if-done t)
        '(org-agenda-skip-scheduled-if-done t)
        '(org-agenda-start-on-weekday nil)
        '(org-reverse-note-order t)
        '(org-fast-tag-selection-single-key (quote expert))
        '(org-agenda-custom-commands
          (quote (("d" todo "DELEGATED" nil)
                  ("c" todo "DONE|DEFERRED|CANCELLED|STARTED" nil)
                  ("w" todo "WAITING" nil)
                  ("W" agenda "" ((org-agenda-ndays 21)))
                  ("A" agenda ""
                   ((org-agenda-skip-function
                     (lambda nil
                       (org-agenda-skip-entry-if (quote notregexp) "\\=.*\\[#A\\]")))
                    (org-agenda-ndays 1)
                    (org-agenda-overriding-header "Today's Priority #A tasks: ")))
                  ("u" alltodo ""
                   ((org-agenda-skip-function
                     (lambda nil
                       (org-agenda-skip-entry-if (quote scheduled) (quote deadline)
                                                 (quote regexp) "\n]+>")))
                    (org-agenda-overriding-header "Unscheduled TODO entries: "))))))

        '(org-remember-store-without-prompt t)
        '(org-remember-templates
          (quote ((116 "* TODO %?\n  %u" "~/notebook/todo.org" "Tasks")
                  (110 "* %u %?" "~/notebook/notes.org" "Notes"))))
        '(remember-annotation-functions (quote (org-remember-annotation)))
       '(remember-handler-functions (quote (org-remember-handler))))
     #+end_src

**** Activate babel languages
     :PROPERTIES:
     :CUSTOM_ID: babel
     :END:
     This activates a number of widely used languages, you are
     encouraged to activate more languages.  The customize interface
     of '=org-babel-load-languages=' contains an up to date list of
     the currently supported languages.
     #+name:babel-lang
     #+begin_src emacs-lisp
       (org-babel-do-load-languages
        'org-babel-load-languages
        '((emacs-lisp . t)
          (sh . t)
          (matlab . t)
          (gnuplot . t)
          (python . t)
          (dot . t)
         (latex . t)))
     #+end_src

     Adding unsecure evaluation of code-blocks
     #+begin_src emacs-lisp
       (setq org-confirm-babel-evaluate nil)
     #+end_src

**** Code block fontification
     :PROPERTIES:
     :CUSTOM_ID: code-block-fontification
     :END:
     The following displays the contents of code blocks in Org-mode files
     using the major-mode of the code.  It also changes the behavior of
     =TAB= to as if it were used in the appropriate major mode.  This means
     that reading and editing code from inside of your Org-mode files is
     much more like reading and editing of code using its major mode.
     #+begin_src emacs-lisp
       (setq org-src-fontify-natively t)
       (setq org-src-tab-acts-natively t)
     #+end_src

**** Org general export options
     #+begin_src emacs-lisp
       (setq org-export-with-sub-superscripts nil)
     #+end_src

**** Org-mode hooks
     Make org understand latex syntax: [[http://stackoverflow.com/questions/11646880/flyspell-in-org-mode-recognize-latex-syntax-like-auctex][source]]
     #+begin_src emacs-lisp
       (add-hook 'org-mode-hook (lambda () (setq ispell-parser 'tex)))
     #+end_src

**** Org LaTeX export types
     Originally taken from Bruno Tavernier: [[http://thread.gmane.org/gmane.emacs.orgmode/31150/focus=31432][here]], but adapted to use latexmk
     4.20 or higher.
     #+begin_src emacs-lisp
       (defun my-auto-tex-cmd ()
         "When exporting from .org with latex, automatically run latex,
          pdflatex, or xelatex as appropriate, using latexmk."
         (let ((texcmd)))
         ;; default command: oldstyle latex via dvi
         (setq texcmd "latexmk -pdfdvi -quiet %f")
         ;; bibtex -> pdf
         (if (string-match "LATEX_CMD: texbibtex" (buffer-string))
             (setq texcmd "latexmk -pdfdvi -bibtex -quiet %f"))
         ;; longway tex -> pdf
         (if (string-match "LATEX_CMD: dvipdfps" (buffer-string))
             (setq texcmd "latexmk -pdf -quiet %f"))
         ;; pdflatex -> .pdf
         (if (string-match "LATEX_CMD: pdflatex" (buffer-string))
             (setq texcmd "latexmk -pdf -quiet %f"))
         ;; xelatex -> .pdf
         (if (string-match "LATEX_CMD: xelatex" (buffer-string))
             (setq texcmd "latexmk -pdflatex=xelatex -pdf -quiet %f"))
         ;; LaTeX compilation command
         (setq org-latex-to-pdf-process (list texcmd)))

         (add-hook 'org-export-latex-after-initial-vars-hook 'my-auto-tex-cmd)
     #+end_src

     Make links work as labels in exports to latex
     #+begin_src emacs-lisp
       (setq org-export-latex-hyperref-format "\\ref{%s}")
     #+end_src

**** Org LaTeX export with(out) default packages
     Resetting the org default exported latex packages list. It messes
     with my latex. Storing an extra list for insertion if needed.
     #+begin_src emacs-lisp
       (setq org-export-latex-default-packages-bkup-alist
             org-export-latex-default-packages-alist)
       (setq org-export-latex-default-packages-alist ())
     #+end_src

**** Org LaTeX export with extra packages
     :PROPERTIES:
     :tangle:   no
     :END:
     Specify default packages to be included in every tex file, whether
     pdflatex or xelatex. This is kept as an example. Some packages are
     still included in the output.
     #+begin_src emacs-lisp
       (setq org-export-latex-packages-alist
             '(("" "graphicx" t)
               ("" "longtable" nil)
               ("" "float" nil)))
     #+end_src

     Define packages for each latex command. Using latexmk...
     #+begin_src emacs-lisp
       (defun my-auto-tex-parameters ()
         "Automatically select the tex packages to include."
         ;; default packages for ordinary latex or pdflatex export
         (setq org-export-latex-default-packages-alist
               '(("" "graphicx" t)
                 ("" "longtable" nil)
                 ("" "float" nil)
                 ("AUTO" "inputenc" t)
                 ("T1"   "fontenc"   t)
                 (""     "fixltx2e"  t)
                 (""     "hyperref"  nil)))

         ;; Packages to include when xelatex is used
         (if (string-match "LATEX_CMD: xelatex" (buffer-string))
             (setq org-export-latex-default-packages-alist
                   '(("" "fontspec" t)
                     ("" "xunicode" t)
                     ("" "url" t)
                     ("" "rotating" t)
                     ("american" "babel" t)
                     ("babel" "csquotes" t)
                     ("" "soul" t)
                     ("xetex" "hyperref" nil)
                     )))

         (if (string-match "LATEX_CMD: xelatex" (buffer-string))
             (setq org-export-latex-classes
                   (cons '("article"
                           "\\documentclass[11pt,article,oneside]{memoir}"
                           ("\\section{%s}" . "\\section*{%s}")
                           ("\\subsection{%s}" . "\\subsection*{%s}")
                           ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                           ("\\paragraph{%s}" . "\\paragraph*{%s}")
                           ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
                         org-export-latex-classes))))
       (add-hook 'org-export-latex-after-initial-vars-hook 'my-auto-tex-parameters)
     #+end_src

**** Org RefTeX integration
     :PROPERTIES:
     :CUSTOM_ID: org-reftex
     :END:
     source: [[http://tincman.wordpress.com/2011/01/04/research-paper-management-with-emacs-org-mode-and-reftex/][here]]
     #+begin_src emacs-lisp
       (if (el-get-package-exists-p "reftex")
           ((defun org-mode-reftex-setup ()
              (load-library "reftex")
              (and (buffer-file-name) (file-exists-p (buffer-file-name))
                   (progn
                     ;; enable auto-revert-mode to update reftex when bibtex file changes on disk
                     ;; (global-auto-revert-mode t)
                     (setq TeX-master t)
                     ;; (reftex-parse-all)
                     ;; add a custom reftex cite format to insert links
                     (reftex-set-cite-format
                      '((?b . "[[bib:%l][%l-bib]]")
                        (?n . "[[notes:%l][%l-notes]]")
                        (?p . "[[papers:%l][%l-paper]]")
                        (?t . "%t")
                        (?c . "\\cite{%l}")
                        (?h . "*** %2a %y %t\n:PROPERTIES:\n:Custom_ID: %l\n:END:\n[[papers:%l][%l-paper]]")))))
              (define-key org-mode-map (kbd "C-c )") 'reftex-citation)
              (define-key org-mode-map (kbd "C-c (") 'org-mode-reftex-search))
            (add-hook 'org-mode-hook 'org-mode-reftex-setup)))
     #+end_src

     Jump to entry
     #+begin_src emacs-lisp
       (if (el-get-package-exists-p "reftex")
           (defun org-mode-reftex-search ()
             ;;jump to the notes for the paper pointed to at from reftex search
             (interactive)
             (org-open-link-from-string (format "[[notes:%s]]" (substring (format "%s" (reftex-citation t)) 1 -1)))))
     #+end_src

     Paths to files. This might be more general than reftex.
     #+begin_src emacs-lisp
       (setq org-link-abbrev-alist
             '(("bib" . "~/research/bibliography.bib::%s")
               ("notes" . "~/research/notes.txt::#%s")
               ("papers" . "~/research/papers/%s.pdf")))
     #+end_src

**** MobileOrg
     :PROPERTIES:
     :END:
     Mobile org push/pull directory
     #+begin_src emacs-lisp
       (setq org-mobile-directory "~/Ubuntu One/MobileOrg" )
       (setq org-mobile-inbox-for-pull "~/Ubuntu One/MobileOrg/from-mobile.org" )
     #+end_src

     #+begin_src emacs-lisp
       (setq org-mobile-files '(
                                "~/notebook/notes.org"
                                "~/notebook/todo.org"))
     #+end_src

     Pull at startup
     #+begin_src emacs-lisp :tangle no
       (add-hook 'after-init-hook 'org-mobile-pull)
     #+end_src

     Push at exit
     #+begin_src emacs-lisp :tangle no
       (add-hook 'kill-emacs-hook 'org-mobile-push)
     #+end_src

*** Publish emacs init
    Publishing require the htmlize package. Can be found in
    emacs-goodies or as a standalone elisp file. I use el-get in
    emacs-init-publish to make sure htmlize is installed and
    initialized.

    Evaluate this to publish this file to ./doc
    #+begin_src emacs-lisp :tangle no
      (emacs-init-load "emacs-init-publish.org")
    #+end_src

*** Yasnippet
    :PROPERTIES:
    :CUSTOM_ID: yasnippet
    :tangle:   yes
    :END:
    - [[http://code.google.com/p/yasnippet/][yasnippet]] is yet another snippet expansion system for Emacs. It is
      inspired by TextMate's templating syntax.
     - watch the [[http://www.youtube.com/watch?v=vOj7btx3ATg][video on YouTube]]
     - see the [[http://yasnippet.googlecode.com/svn/trunk/doc/index.html][intro and tutorial]]

    Install yasnippet with el-get manually
    #+begin_src emacs-lisp :tangle no
      (el-get 'sync '(yasnippet))
    #+end_src

    TODO: move elpa install of bundle here

    Add loadpath to yasnippet from el-get. Seems pointless
    #+begin_src emacs-lisp
      (if (el-get-package-exists-p "yasnippet")
      (add-to-list 'load-path
                   (expand-file-name  "yasnippet"
                                      (expand-file-name "el-get"
                                                        emacs-init-dir)))
      (yas/initialize))
    #+end_src

    Load the snippets defined in the =./snippets/= directory
    #+begin_src emacs-lisp
      (if (el-get-package-exists-p "yasnippet")
      (yas/load-directory (expand-file-name "snippets" emacs-init-dir)))
    #+end_src

    The latest version of yasnippets doesn't play well with Org-Mode, the
    following function allows these two to play nicely together.
    This [[http://stackoverflow.com/questions/9418148/conflicts-between-org-mode-and-yasnippet][stackoverflow post]] might be usefull as well.
    #+begin_src emacs-lisp
      (if (el-get-package-exists-p "yasnippet")
          (defun yas/org-very-safe-expand ()
            (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))

        (defun yas/org-setup ()
          ;; yasnippet (using the new org-cycle hooks)
          (make-variable-buffer-local 'yas/trigger-key)
          (setq yas/trigger-key [tab])
          (add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
          (define-key yas/keymap [tab] 'yas/next-field))

        (add-hook 'org-mode-hook #'yas/org-setup))
    #+end_src

* Load User/System Specific Files
  :PROPERTIES:
  :CUSTOM_ID: user-system-configs
  :END:
  You can keep system- or user-specific customizations here in either
  raw emacs-lisp files or as embedded elisp in org-mode files (as done
  in this document).

  You can keep elisp source in the =src= directory. Packages loaded
  from here will override those installed by ELPA. This is useful if
  you want to track the development versions of a project, or if a
  project is not in elpa.

  After we've loaded all the Emacs Init defaults, lets load the User's
  stuff.
  #+begin_src emacs-lisp
    (flet ((sk-load (base)
                    (let* ((path          (expand-file-name base emacs-init-dir))
                           (literate      (concat path ".org"))
                           (encrypted-org (concat path ".org.gpg"))
                           (plain         (concat path ".el"))
                           (encrypted-el  (concat path ".el.gpg")))
                      (cond
                       ((file-exists-p encrypted-org) (org-babel-load-file encrypted-org))
                       ((file-exists-p encrypted-el)  (load encrypted-el))
                       ((file-exists-p literate)      (org-babel-load-file literate))
                       ((file-exists-p plain)         (load plain)))))
           (remove-extension (name)
                             (string-match "\\(.*?\\)\.\\(org\\(\\.el\\)?\\|el\\)\\(\\.gpg\\)?$" name)
                             (match-string 1 name)))
      (let ((elisp-dir (expand-file-name "src" emacs-init-dir))
            (user-dir (expand-file-name user-login-name emacs-init-dir)))
        ;; add the src directory to the load path
        (add-to-list 'load-path elisp-dir)
        ;; load specific files
        (when (file-exists-p elisp-dir)
          (let ((default-directory elisp-dir))
            (normal-top-level-add-subdirs-to-load-path)))
        ;; load system-specific config
        (sk-load system-name)
        ;; load user-specific config
        (sk-load user-login-name)
        ;; load any files in the user's directory
        (when (file-exists-p user-dir)
          (add-to-list 'load-path user-dir)
          (mapc #'sk-load
                (remove-duplicates
                 (mapcar #'remove-extension
                         (directory-files user-dir t ".*\.\\(org\\|el\\)\\(\\.gpg\\)?$"))
          :test #'string=)))))
  #+end_src

** Settings from M-x customize
   #+begin_src emacs-lisp
     (load custom-file 'noerror)
   #+end_src

* Footnotes

[1] If you already have a directory at =~/.emacs.d= move it out of the
    way and put this there instead.

[2] The emacs init uses [[http://orgmode.org/][Org Mode]] to load embedded elisp code directly
    from literate Org-mode documents. Org is included with Emacs for
    later version.
