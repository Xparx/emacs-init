#+TITLE: Emacs Init
#+OPTIONS: toc:2 num:nil ^:nil
#+STARTUP:  hideblocks

#+begin_quote
  Emacs outshines all other editing software in approximately the same
  way that the noonday sun does the stars. It is not just bigger and
  brighter; it simply makes everything else vanish.

  -- Neal Stephenson, "In the Beginning was the Command Line"
#+end_quote

* Introduction
  :PROPERTIES:
  :CUSTOM_ID: introduction
  :END:
** My custom emacs-init
   :PROPERTIES:
   :CUSTOM_ID: my-emacs-init
   :END:
   This is a personalized emacs initialisation file.
   To get it you can git it.

   #+begin_src sh
     git clone https://github.com/xparx/emacs-init.git ~/src/emacs-init
   #+end_src

   To try it out use
   #+begin_src sh
     emacs -q -l ~/src/emacs-init/init.el
   #+end_src

   It should be self contained, meaning that all files it fetches,
   creates and need should be in this directory. No guaranties though.

** emacs24-starter-kit?
   :PROPERTIES:
   :CUSTOM_ID: emacs24-starter-kit
   :END:
   This file is inspired by and in part copied
   from emacs24-starter-kit. The latest version can be found at
   http://github.com/eschulte/emacs24-starter-kit/
   #+begin_src sh
     git clone https://github.com/eschulte/emacs24-starter-kit.git ~/src/emacs24-starter-kit
   #+end_src

   If you want to keep your regular =~/.emacs.d= in place and just launch
   a single instance, using the starter kit, try the following invocation:
   #+begin_src sh
     emacs -q -l ~/src/emacs24-starter-kit/init.el
   #+end_src

** Structure
   :PROPERTIES:
   :CUSTOM_ID: structure
   :END:
   The =init.el= file is where everything begins. It is loaded
   automatically by Emacs on startup, its sole purpose is to load the
   elisp code embedded in this file.  This file then loads some core
   configurations and packages which should be generally useful, and
   goes on to load user-specific configuration files from the
   following locations mentioned in [[customization]] immediately below.

** Customization
   :PROPERTIES:
   :CUSTOM_ID: customization
   :END:
   - User specific config :: Your personal configuration information can
        be stored in a user-specific-config file.  This is the file named
        after your user with the extensions =.el= or =.org= [2].  If
        you're unsure of your user name evaluate the following code block
        to find out.
        #+begin_src sh
          echo $USER
        #+end_src
        If your configuration starts to feel cramped in a single file
        (although with the nested headlines of an Org-mode file, that
        could take a while) and you want to stretch your config's legs,
        you can also create a directory named after your system user
        name.  If a such a directory exists, it will be added to the
        load-path, and any elisp or org-mode w/embedded elisp files in it
        will be loaded.

   - System specific config :: Finally, you may want to configure
        different settings for different machines.  The Emacs Init will
        look for a file named after the current hostname ending in =.el=
        or =.org= which will allow host-specific configuration. If
        you're unsure of your hostname the following can be executed to
        find out.
        #+begin_src sh
          hostname
        #+end_src

   - Installing more elisp libraries :: The easiest way to install new
        libraries is through
     - El-get :: (see [[#emacs-lisp-get][El-get]] below).
     - Emacs Lisp Package Archive :: (see [[#emacs-lisp-package-archive][Emacs Lisp Package Archive]]
          below).  When a library is not available through ELPA you
          can grab it's source and place it directly in the =src=
          directory. Any packages found there will automatically be
          added to your load-path when Emacs starts up. I also install
          packages through el-get.

** El-get
   :PROPERTIES:
   :CUSTOM_ID: el-get-package-manager
   :END:
   El-get is a /(foxy el-mexicano, Arriba! Arriba!:)/ package manager using
   custome recipes for installing and initializing emacs packages from
   a wide range of different repositories. The source can be fetched
   [[https://github.com/dimitri/el-get][here]], by doing:
   #+begin_src sh
     git clone https://github.com/dimitri/el-get.git
   #+end_src
   This can be automated with a [[Lazy%20install][Lazy install]] or regular [[Regular%20Install][Regular Install]], which
   is the default in this emacs-init. This is done in init.el for conveniance
*** El-get initialization
**** Lazy Install
     To setup el-get the simple way one needs only
     to evaluate the following emacs lisp block
     #+begin_src emacs-lisp :tangle no
       ;; So the idea is that you copy/paste this code into your *scratch* buffer,
       ;; hit C-j, and you have a working el-get.
       (url-retrieve
        "https://raw.github.com/dimitri/el-get/master/el-get-install.el"
        (lambda (s)
          (goto-char (point-max))
          (eval-print-last-sexp)))
     #+end_src
**** Regular Install master branch
     #+begin_src emacs-lisp :tangle no
       (setq el-get-dir (expand-file-name "el-get" emacs-init-dir))
       (add-to-list 'load-path (concat emacs-init-dir "el-get/el-get"))

       (unless (require 'el-get nil 'noerror)
         (with-current-buffer
             (url-retrieve-synchronously
              "https://raw.github.com/dimitri/el-get/master/el-get-install.el")
           (let (el-get-master-branch)
             (goto-char (point-max))
             (eval-print-last-sexp))))

       (add-to-list 'el-get-recipe-path (concat emacs-init-dir "recipes"))
       (el-get 'sync)
      #+end_src

** Emacs Lisp Package Archive
   :PROPERTIES:
   :CUSTOM_ID: emacs-lisp-package-archive
   :END:

   Libraries from [[http://tromey.com/elpa][ELPA]] are preferred when available since dependencies
   are handled automatically, and the burden to update them is removed
   from the user. ELPA is now an official part of Emacs so no special
   configuration is required to download and install packages.  Packages
   installed through ELPA will be stored in the =elpa/= sub-directory of
   this directory.

* Implementation
  :PROPERTIES:
  :CUSTOM_ID: implementation
  :END:
** Emacs init basics
*** Load path etc
    #+name: emacs-init-load-paths
    #+begin_src emacs-lisp
      (add-to-list 'load-path emacs-init-dir)
      (setq autoload-file (concat emacs-init-dir "loaddefs.el"))
      (setq custom-file (concat emacs-init-dir "custom.el"))
    #+end_src
*** Ubiquitous Packages
    which should be loaded on startup rather than
    autoloaded on demand since they are likely to be used in every
    session.
    #+name: emacs-init-load-on-startup
    #+begin_src emacs-lisp
      (require 'saveplace)
      (require 'ffap)
      (require 'uniquify)
      (require 'ansi-color)
      (require 'recentf)
    #+end_src
*** ELPA archive repositories

    This is an important package that should be imported and synced.
    #+begin_src emacs-lisp :tangle yes
      (el-get 'sync '(package))
    #+end_src

*** Functions for loading other parts of the emacs init
    This can be used to load other files with org code.

    #+name: emacs-init-load
    #+begin_src emacs-lisp
      (defun emacs-init-load (file &optional header-or-tag)
        "Load configuration from other emacs-init-*.org files.
         If the optional argument is the id of a subtree then only
         configuration from within that subtree will be loaded.  If it is
         not an id then it will be interpreted as a tag, and only subtrees
         marked with the given tag will be loaded.

         ! STARTER-KIT Configurations:
         For example, to load all of emacs-init-lisp.org simply
         add (emacs-init-load \"lisp\") to your configuration.
         To load only the 'window-system' config from
         emacs-init-misc-recommended.org add
      (emacs-init-load \"misc-recommended\" \"window-system\")
      to your configuration."
       (let ((file (expand-file-name (if (string-match "emacs-init-.+\.org" file)
                         file
                       (format "emacs-init-%s.org" file))
                         emacs-init-dir)))
         (org-babel-load-file
          (if header-or-tag
          (let* ((base (file-name-nondirectory file))
                 (dir  (file-name-directory file))
                 (partial-file (expand-file-name
                        (concat "." (file-name-sans-extension base)
                            ".part." header-or-tag ".org")
                        dir)))
            (unless (file-exists-p partial-file)
              (with-temp-file partial-file
                (insert
                 (with-temp-buffer
               (insert-file-contents file)
               (save-excursion
                 (condition-case nil ;; collect as a header
                     (progn
                   (org-link-search (concat"#"header-or-tag))
                   (org-narrow-to-subtree)
                   (buffer-string))
                   (error ;; collect all entries with as tags
                    (let (body)
                  (org-map-entries
                   (lambda ()
                     (save-restriction
                       (org-narrow-to-subtree)
                       (setq body (concat body "\n" (buffer-string)))))
                   header-or-tag)
                  body))))))))
            partial-file)
            file))))
    #+end_src

** Emacs init core
   :PROPERTIES:
   :CUSTOM_ID: emacs-init-core
   :END:
   These sub-trees contain the remainder of the core of Emacs Init.  All of
   the code in this section should be loaded by emacs used on any
   machine and user.
*** Personal information

    #+begin_src emacs-lisp
      (setq user-full-name "Andreas Tj√§rnberg"
            user-mail-address "andreas.tjarnberg@fripost.org")
    #+end_src

*** Emacs bindings
    :PROPERTIES:
    :CUSTOM_ID: emacs-bindings
    :END:
    Custom keybindings
**** Global visual line mode
     Implemented in init.el
**** Align your code in a pretty way.
     #+begin_src emacs-lisp
       (global-set-key (kbd "C-x \\") 'align-regexp)
     #+end_src

**** Completion that uses many different methods to find options
     #+begin_src emacs-lisp
       (global-set-key (kbd "M-/") 'hippie-expand)
     #+end_src

**** Font size
     #+begin_src emacs-lisp
       (define-key global-map (kbd "C-+") 'text-scale-increase)
       (define-key global-map (kbd "C--") 'text-scale-decrease)
     #+end_src

**** Use regex searches by default
     #+begin_src emacs-lisp
       (global-set-key (kbd "C-s") 'isearch-forward-regexp)
       (global-set-key (kbd "C-r") 'isearch-backward-regexp)
       (global-set-key (kbd "C-M-s") 'isearch-forward)
       (global-set-key (kbd "C-M-r") 'isearch-backward)
     #+end_src

**** File finding
     #+begin_src emacs-lisp
       (global-set-key (kbd "C-x M-f") 'ido-find-file-other-window)
       (global-set-key (kbd "C-x C-M-f") 'find-file-in-project)
       (global-set-key (kbd "C-x C-p") 'find-file-at-point)
       (global-set-key (kbd "C-c y") 'bury-buffer)
       (global-set-key (kbd "C-c r") 'revert-buffer)
       (global-set-key (kbd "M-`") 'file-cache-minibuffer-complete)
       (global-set-key (kbd "C-x C-b") 'ibuffer)
     #+end_src

     Ibuffer settings, source [[http://www.emacswiki.org/emacs/IbufferMode][here]]. Lots of interesting stuff in there.
     #+begin_src emacs-lisp
       (setq ibuffer-saved-filter-groups
             (quote (("default"
                      ("org-mode" (mode . org-mode))
                      ("MATLAB" (mode . matlab-mode))
                      ("LaTeX" (or
                                (mode . latex-mode)
                                (mode . bibtex-mode)))
                      ("planner" (or
                                  (name . "^\\*Calendar\\*$")
                                  (name . "^diary$")))
                      ("emacs" (or
                                (name . "^\\*scratch\\*$")
                                (name . "^\\*ielm\\*$")
                                (name . "^\\*Completions\\*$")
                                (name . "^\\*Messages\\*$")))
                      ("Magit" (name . "^\\*magit.*\\*$"))
                      ("dired" (mode . dired-mode))
                      ("gnus" (or
                               (mode . message-mode)
                               (mode . bbdb-mode)
                               (mode . mail-mode)
                               (mode . gnus-group-mode)
                               (mode . gnus-summary-mode)
                               (mode . gnus-article-mode)
                               (name . "^\\.bbdb$")
                               (name . "^\\.newsrc-dribble")))))))
     #+end_src

     Ibuffer mode hook
     #+begin_src emacs-lisp
       (add-hook 'ibuffer-mode-hook
                     (lambda ()
                       (ibuffer-switch-to-saved-filter-groups "default")))
     #+end_src

**** Buffer cycling.
     #+begin_src emacs-lisp
       (global-set-key (kbd "C-<prior>") 'previous-buffer) ; Ctrl+PageDown
       (global-set-key (kbd "C-<next>") 'next-buffer) ; Ctrl+PageUp
     #+end_src

**** Help should search more than just commands
     #+begin_src emacs-lisp
       (global-set-key (kbd "C-h a") 'apropos)
     #+end_src

**** Rgrep
     Rgrep is infinitely useful in multi-file projects.
     (see [[elisp:(describe-function 'rgrep)]])
     #+begin_src emacs-lisp
       (define-key global-map "\C-x\C-r" 'rgrep)
     #+end_src

*** Magit
    :PROPERTIES:
    :CUSTOM_ID: magit
    :END:
**** El-get magit
     Install manually
     #+begin_src emacs-lisp :tangle no
       (el-get 'sync '(magit))
     #+end_src

**** Magit key-bindings
     It's handy to have a shortcut to magit
     #+begin_src emacs-lisp
       (when (el-get-package-exists-p "magit")
         (global-set-key (kbd "C-c m") 'magit-status))
     #+end_src

**** Redefine magit-status behaviour
     Source: [[http://whattheemacsd.com/setup-magit.el-01.html][here]]

     This makes a fullscreen magit status buffer and when
     quitting resets to previous setup.

     Could not get this to work at first. Had to wrap the
     last key definition in an eval-after-load.

     #+begin_src emacs-lisp
       (when (el-get-package-exists-p "magit")

         (defadvice magit-status (around magit-fullscreen activate)
           (window-configuration-to-register :magit-fullscreen)
           ad-do-it
           (delete-other-windows))

         (defun magit-quit-session ()
           "Restores the previous window configuration and kills the magit buffer"
           (interactive)
           (kill-buffer)
           (jump-to-register :magit-fullscreen))

         (eval-after-load 'magit
           '(define-key magit-status-mode-map (kbd "q") 'magit-quit-session)))
     #+end_src

*** Git-gutter
    Git-gutter-fringe gives git diff info in the fringes.
    Turn on git-gutter for all relevant buffers
    #+begin_src emacs-lisp
      (when (el-get-package-exists-p "git-gutter-fringe")
        (global-git-gutter-mode 1)
        (setq git-gutter-fr:side 'right-fringe)
        (setq git-gutter:hide-gutter t)
        (setq git-gutter:verbosity 2))
    #+end_src

*** Misc
    :PROPERTIES:
    :CUSTOM_ID: misc
    :END:
**** Don't clutter up directories with files~ or #files#
     Rather than saving backup files scattered all over the file system,
     let them live in the =backups/= directory inside of the emacs init.
     #+begin_src emacs-lisp
       (setq backup-directory-alist `(("." . ,(expand-file-name
                                               (concat emacs-init-dir "backups")))))
     #+end_src

     Autosave to specific directory: [[http://emacsredux.com/blog/2013/05/09/keep-backup-and-auto-save-files-out-of-the-way/][source]]. This does not work... as
     is always the case. This stops the autosave feature for some
     reason
     #+begin_src emacs-lisp :tangle no
       (setq auto-save-file-name-transforms
             `((".*" ,(expand-file-name
                       (concat emacs-init-dir "autosave")) t)))
     #+end_src

**** Make colors work in M-x shell
     #+begin_src emacs-lisp
       (add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
     #+end_src

**** Color Themes
     :PROPERTIES:
     :CUSTOM_ID: color-theme
     :END:
     The [[http://www.nongnu.org/color-theme/][Color Themes]] package provides support for changing, saving,
     sharing Emacs color themes.  To view and apply color themes available
     on your system run =M-x color-theme-select=.  See the color theme
     website and EmacsWiki pages for more information.
     - http://www.nongnu.org/color-theme/
     - http://www.emacswiki.org/emacs/ColorTheme
     - https://github.com/bbatsov/zenburn-emacs


     Add list to load-theme path. use [[elisp:load-theme][load-theme]] RET "theme" to choose a theme.
     #+begin_src emacs-lisp
       (add-to-list 'custom-theme-load-path
                    (concat emacs-init-dir "themes"))
     #+end_src

     Load my prefered theme if availible
     #+begin_src emacs-lisp :tangle no
       (condition-case nil
           (load-theme 'my-z t)
         (error "no theme loaded"))
     #+end_src

**** Aspell and dictionaries
     #+begin_src emacs-lisp
       (setq-default ispell-program-name "aspell")
     #+end_src

     Set default ispell dict
     #+begin_src emacs-lisp
       (setq ispell-dictionary "en")
     #+end_src

**** Open my specific bashrc files in the right mode
     #+begin_src emacs-lisp
       (add-to-list 'auto-mode-alist '("bashrc\\'" . shell-script-mode))
       (add-to-list 'auto-mode-alist '("bash_variables\\'" . shell-script-mode))
       (add-to-list 'auto-mode-alist '("bash_aliases\\'" . shell-script-mode))
     #+end_src

**** Transparently open compressed files
     #+begin_src emacs-lisp
       (auto-compression-mode t)
     #+end_src

**** Save a list of recent files visited.
     #+begin_src emacs-lisp
       (recentf-mode 1)
     #+end_src
**** Save last place in visited files
     #+begin_src emacs-lisp
       (setq save-place-file (concat emacs-init-dir "saved-places"))
       (setq-default save-place t)
     #+end_src
**** Highlight matching parentheses when the point is on them.
     #+name: emacs-init-match-parens
     #+begin_src emacs-lisp
       (show-paren-mode 1)
       (set-face-background 'show-paren-match-face (face-background 'default))
       (set-face-foreground 'show-paren-match-face "#def")
       (set-face-attribute 'show-paren-match-face nil :weight 'extra-bold)
     #+end_src

**** Alias for yes-no to y-n choice, init random seed.
     #+begin_src emacs-lisp
       (defalias 'yes-or-no-p 'y-or-n-p)
       ;; Seed the random-number generator
       (random t)
     #+end_src
**** Tramp mode defaults
     #+begin_src emacs-lisp
       (setq tramp-default-method "ssh")
     #+end_src

**** Remove trailing whitespaces
     :PROPERTIES:
     :tangle:   no
     :END:
     This is utterly broken especially with python. Disabled for now

     #+begin_src emacs-lisp
       (add-hook 'before-save-hook 'whitespace-cleanup)
     #+end_src

     The below changes the behaviour of whitespace-cleanup to not
     remove whitespaces on empty lines. Source [[http://stackoverflow.com/questions/1412913/show-trailing-whitespace-on-emacs-only-on-non-empty-lines][here]]
     #+begin_src emacs-lisp
       (setq whitespace-trailing-regexp "\\b.*?\\(\\(\t\\| \\|\xA0\\|\x8A0\\|\x920\\|\xE20\\|\xF20\\)+\\)$")
     #+end_src

**** Set exec-path same as PATH in bash
     Source: [[http://stackoverflow.com/questions/9663396/how-do-i-make-emacs-recognize-bash-environment-variables-for-compilation][stackoverflow]]
     #+begin_src emacs-lisp
       (let ((path (shell-command-to-string ". ~/.bash_variables; echo -n $PATH")))
         (setenv "PATH" path)
         (setq exec-path
               (append
                (split-string-and-unquote path ":")
                exec-path)))
     #+end_src emacs-lisp
**** Default to unified diffs
     #+begin_src emacs-lisp
       (setq diff-switches "-u")
     #+end_src

**** Dired mode
     When in dired mode 'a' will find alternative file/dir in the same
     buffer.  source [[http://emacsblog.org/2007/02/25/quick-tip-reuse-dired-buffers/][here]]
     #+begin_src emacs-lisp
       (put 'dired-find-alternate-file 'disabled nil)
     #+end_src

**** Enable the package window-margin
     Window-margin sets a soft wrap on lines at the
     fill-column width. This breaks truncate long line
     behaviour for some reason after it is used. Heads up!
     #+begin_src emacs-lisp
       (when (el-get-package-exists-p "window-margin")
         (global-set-key [f9] 'window-margin-mode))
     #+end_src

**** Hidepw-mode hides passwords between specified delimiters

     #+begin_src emacs-lisp
       (when (el-get-package-exists-p "hidepw")
         (setq hidepw-pattern "¬ß\\(.*\\)¬ß"))
     #+end_src

*** LaTeX mode
    :PROPERTIES:
    :CUSTOM_ID: latex
    :END:
**** Fly spell mode for latex mode
     #+begin_src emacs-lisp
       (add-hook 'LaTeX-mode-hook 'flyspell-mode)
     #+end_src

     Make sure spelling is handled nicely in latex mode.
     #+begin_src emacs-lisp
       (add-hook 'LaTeX-mode-hook (lambda () (setq ispell-parser 'tex)))
     #+end_src

**** Some auctex specific settings.
     Install and sync auctex repository with el-get manually.
     #+begin_src emacs-lisp :tangle no
       (el-get 'sync '(auctex))
     #+end_src

     Make emacs aware of auctex
     #+begin_src emacs-lisp
       (when (el-get-package-exists-p "auctex")
         (setq TeX-auto-save t)
         (setq TeX-parse-self t)
         (setq-default TeX-master nil))
     #+end_src

**** RefTeX
     :PROPERTIES:
     :CUSTOM_ID: reftex
     :END:
     Install and sync reftex repository with el-get manually.
     #+begin_src emacs-lisp :tangle no
       (el-get 'sync '(reftex))
     #+end_src

     Set path to default bibfile.
     #+begin_src emacs-lisp
       (when (el-get-package-exists-p "reftex")
         (setq reftex-default-bibliography '("./refs.bib" "~/research/bibliography.bib")))
     #+end_src

     Turn on reftex-mode in Auctex mode.
     #+begin_src emacs-lisp
       (when (el-get-package-exists-p "reftex")
         (add-hook 'LaTeX-mode-hook 'turn-on-reftex))
     #+end_src

*** Python
    :PROPERTIES:
    :CUSTOM_ID: python
    :END:
    Support for the Python programming language.
**** Use Python's python-mode.el instead of Emacs' python.el
     :PROPERTIES:
     :CUSTOM_ID: python-mode
     :END:
     Install and sync python-mode repository with el-get manually
     #+begin_src emacs-lisp :tangle no
       (el-get 'sync '(python-mode))
     #+end_src
     Replace the Python mode that comes with Emacs by the Python mode
     supplied by the Python distribution itself.

     #+begin_src emacs-lisp
       (add-to-list 'auto-mode-alist '("\\.py\\'" . python-mode))
       (add-to-list 'interpreter-mode-alist '("python" . python-mode))
     #+end_src

**** Use IPython if =ipython= command is present
     :PROPERTIES:
     :CUSTOM_ID: ipython
     :END:
     Install and sync ipython repository with el-get manually.
     #+begin_src emacs-lisp :tangle no
       (el-get 'sync '(ipython))
     #+end_src
     If an =ipython= executable is on the path, then assume that
     IPython is the preferred method for python evaluation.
     #+begin_src emacs-lisp
       (when (executable-find "ipython")
         (setq org-babel-python-mode 'python-mode))
     #+end_src
**** Use Cython mode
     :PROPERTIES:
     :CUSTOM_ID: cython
     :tangle:   no
     :END:
     Install and sync cython-mode repository with el-get manually.
     #+begin_src emacs-lisp :tangle no
       (el-get 'sync '(cython-mode))
     #+end_src
     Set cython-mode file associations
     #+begin_src emacs-lisp
       (when (el-get-package-exists-p "cython-mode")
         (add-to-list 'auto-mode-alist '("\\.pyx\\'" . cython-mode))
         (add-to-list 'auto-mode-alist '("\\.pxd\\'" . cython-mode))
         (add-to-list 'auto-mode-alist '("\\.pxi\\'" . cython-mode)))
     #+end_src
**** Emacs ipython notebook
     Enables completion in ein buffer. This gives a bit of unexpected
     behaviour. No popup occure even though latest popup.el is
     installed.
     #+begin_src emacs-lisp
       (when (el-get-package-exists-p "ein")
         (setq ein:use-auto-complete t))
     #+end_src

*** Code-modes
    :PROPERTIES:
    :CUSTOM_ID: coding
    :END:
**** cedet
     I am not sure what this does except enabling cedet when coding,
     whatever that means. =org-edit-src-code: Symbol's function
     definition is void: user-error= error if this sentence is
     removed, odd but true.
     #+begin_src emacs-lisp
       (require 'semantic/sb)
       (global-ede-mode 1)
       (semantic-mode 1)
     #+end_src

**** gnuplot-mode
     :PROPERTIES:
     :CUSTOM_ID: gnuplot
     :END:
     Install and sync gnuplot-mode repository with el-get manually.
     #+begin_src emacs-lisp :tangle no
       (el-get 'sync '(gnuplot-mode))
     #+end_src
     Associate .gp files with gnuplot.
     #+begin_src emacs-lisp
       (setq auto-mode-alist
             (append '(("\\.gp$" . gnuplot-mode)) auto-mode-alist))
     #+end_src

**** MATLAB-mode
     :PROPERTIES:
     :CUSTOM_ID: matlab
     :END:
     DONE: Matlab-mode fails to install because of cedet for some
     reason. Need to modify el-get recipe.

     Install and sync matlab-mode repository with el-get manually
     #+begin_src emacs-lisp :tangle no
       (el-get 'sync '(matlab-mode))
     #+end_src

     The indent function -1 or nil will couse functions to not indent
     #+begin_src emacs-lisp
       (when (el-get-package-exists-p "matlab-mode")
         (add-to-list 'auto-mode-alist '("\\.m$" . matlab-mode))
         (setq matlab-indent-function nil)
         (setq matlab-shell-command "matlab"))
     #+end_src

     Make sure matlab does not auto wrap lines. It's really enoying and
     it does not work! Do manually with 'M-q'
     #+begin_src emacs-lisp
       (when (el-get-package-exists-p "matlab-mode")
         (add-hook 'matlab-mode-hook '(lambda () (auto-fill-mode -1))))
     #+end_src

**** Maxima-mode
     :PROPERTIES:
     :tangle:   no
     :CUSTOM_ID: maxima
     :END:
     Install and sync maxima-mode repository with el-get manually
     #+begin_src emacs-lisp :tangle no
       (el-get 'sync '(maxima-mode))
     #+end_src

     Why is the load-path here so specific
     #+begin_src emacs-lisp
       (when (el-get-package-exists-p "maxima-mode")
         (setq auto-mode-alist (cons '("\\.max" . maxima-mode) auto-mode-alist))
         (setq load-path (cons  "/usr/share/maxima/5.9.2/emacs" load-path))
         (autoload 'maxima "maxima" "Running Maxima interactively" t)
         (autoload 'maxima-mode "maxima" "Maxima editing mode" t))
     #+end_src

*** Org Mode <3
    :PROPERTIES:
    :tangle:   yes
    :END:
    Install and sync org-mode repository with el-get
**** El-getting org-mode
     Install manually. This file will not load untill an el-get
     org-mode package is installed.
**** Org-Mode File association
     Both .org and .txt files should be associated with org-mode
     #+begin_src emacs-lisp
       (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
       (add-to-list 'auto-mode-alist '("\\.txt$" . org-mode))
     #+end_src

     Make it so that org-mode opens external pdf files in evince: [[http://stackoverflow.com/questions/8834633/how-do-i-make-org-mode-open-pdf-files-in-evince][source]].
     #+begin_src emacs-lisp
       (eval-after-load "org"
         '(progn (setcdr (assoc "\\.pdf\\'" org-file-apps) "evince %s")))
     #+end_src

**** Hide leading stars in structure outline
     #+begin_src emacs-lisp
       (setq org-hide-leading-stars t)
     #+end_src

**** Org-mode Global Keybindings
     :PROPERTIES:
     :CUSTOM_ID: org-global-keybindings
     :END:
     Two global Emacs bindings for Org-mode

     The [[http://orgmode.org/manual/Agenda-Views.html#Agenda-Views][Org-mode agenda]] is good to have close at hand
     #+begin_src emacs-lisp
       (define-key global-map "\C-ca" 'org-agenda)
     #+end_src

     Org-mode supports [[http://orgmode.org/manual/Hyperlinks.html#Hyperlinks][links]], this command allows you to store links
     globally for later insertion into an Org-mode buffer.  See
     [[http://orgmode.org/manual/Handling-links.html#Handling-links][Handling-links]] in the Org-mode manual.
     #+begin_src emacs-lisp
       (define-key global-map "\C-cl" 'org-store-link)
     #+end_src

**** Local Org files
     Set to the location of your Org files on your local system
     #+begin_src emacs-lisp
       (setq org-directory "~/notebook")
     #+end_src

**** Org-Mode TODO
     Org mode todo states and agenda mode navigation.
     #+begin_src emacs-lisp
       (eval-after-load "org"
         '(progn
            (define-prefix-command 'org-todo-state-map)
            (define-key org-mode-map "\C-cx" 'org-todo-state-map)
            (define-key org-todo-state-map "x"
              #'(lambda nil (interactive) (org-todo "CANCELLED")))
            (define-key org-todo-state-map "d"
              #'(lambda nil (interactive) (org-todo "DONE")))
            (define-key org-todo-state-map "f"
              #'(lambda nil (interactive) (org-todo "DEFERRED")))
            (define-key org-todo-state-map "s"
              #'(lambda nil (interactive) (org-todo "STARTED")))
            (define-key org-todo-state-map "w"
              #'(lambda nil (interactive) (org-todo "WAITING")))
            ;; reset keys to original functions
            (add-hook 'org-agenda-mode-hook
                      (lambda ()
                        (define-key org-agenda-mode-map "\C-n" 'next-line)
                        (define-key org-agenda-keymap "\C-n" 'next-line)
                        (define-key org-agenda-mode-map "\C-p" 'previous-line)
                  (define-key org-agenda-keymap "\C-p" 'previous-line)))))
     #+end_src

     Org agenda layout
     #+begin_src emacs-lisp
        (setq org-agenda-files (quote ("~/notebook/todo.org")))
        (setq org-agenda-ndays 7)
        (setq org-agenda-show-all-dates t)
        (setq org-agenda-skip-deadline-if-done t)
        (setq org-agenda-skip-scheduled-if-done t)
        (setq org-agenda-start-on-weekday nil)
        (setq org-reverse-note-order t)
        (setq org-fast-tag-selection-single-key (quote expert))
     #+end_src

     Custom commands for the agenda mode
     #+begin_src emacs-lisp
       (setq org-agenda-custom-commands
             (quote (("c" todo "DONE|DEFERRED|CANCELLED|STARTED" nil)
                     ("w" todo "WAITING" nil)
                     ("W" agenda "" ((org-agenda-ndays 21)))
                     ("A" agenda ""
                      ((org-agenda-skip-function
                        (lambda nil
                          (org-agenda-skip-entry-if (quote notregexp) "\\=.*\\[#A\\]")))
                       (org-agenda-ndays 1)
                       (org-agenda-overriding-header "Today's Priority #A tasks: ")))
                     ("u" alltodo ""
                      ((org-agenda-skip-function
                        (lambda nil
                          (org-agenda-skip-entry-if (quote scheduled) (quote deadline)
                                                    (quote regexp) "\n]+>")))
                       (org-agenda-overriding-header "Unscheduled TODO entries: "))))))
     #+end_src

**** Org-Capture
     Org-capture stores notes and todos with a simple key command.
     #+begin_src emacs-lisp
       (setq org-default-notes-file "~/notebook/notes.org")
       (define-key global-map "\C-cc" 'org-capture)
     #+end_src

     Capture to specified files
     #+begin_src emacs-lisp
       (setq org-capture-templates
             '(("t" "Todo" entry (file+headline "~/notebook/todo.org" "Tasks")
                "* TODO %?\n  %i\n   %a" :kill-buffer t)
               ("n" "Journal" entry (file+headline "~/notebook/notes.org" "Notes")
                "* %U %?\n %a\n %i" :prepend t :kill-buffer t)
               ("r" "Research note" entry (file+headline "~/research/notes.txt" "Tasks")
                "* TODO %?\n %i\n  %a" :kill-buffer t)))
     #+end_src

**** Activate babel languages
     :PROPERTIES:
     :CUSTOM_ID: babel
     :END:
     This activates a number of widely used languages, you are
     encouraged to activate more languages.  The customize interface
     of =org-babel-load-languages= contains an up to date list of
     the currently supported languages.
     #+name:babel-lang
     #+begin_src emacs-lisp
       (org-babel-do-load-languages
        'org-babel-load-languages
        '((emacs-lisp . t)
          (sh . t)
          (matlab . t)
          (octave . t)
          (gnuplot . t)
          (python . t)
          (dot . t)
          (latex . t)
          (js . t)
         ))
     #+end_src

     Adding unsecure evaluation of code-blocks
     #+begin_src emacs-lisp
       (setq org-confirm-babel-evaluate nil)
     #+end_src

**** Code block fontification
     :PROPERTIES:
     :CUSTOM_ID: code-block-fontification
     :END:
     The following displays the contents of code blocks in Org-mode files
     using the major-mode of the code.  It also changes the behavior of
     =TAB= to as if it were used in the appropriate major mode.  This means
     that reading and editing code from inside of your Org-mode files is
     much more like reading and editing of code using its major mode.
     #+begin_src emacs-lisp
       (setq org-src-fontify-natively t)
       (setq org-src-tab-acts-natively t)
     #+end_src

**** Org general export options
     #+begin_src emacs-lisp
       (setq org-export-with-sub-superscripts nil)
     #+end_src

**** Org-mode hooks
     Make org understand latex syntax: [[http://stackoverflow.com/questions/11646880/flyspell-in-org-mode-recognize-latex-syntax-like-auctex][source]]
     #+begin_src emacs-lisp
       (add-hook 'org-mode-hook (lambda () (setq ispell-parser 'tex)))
     #+end_src

**** Org LaTeX export types
     Originally taken from Bruno Tavernier: [[http://thread.gmane.org/gmane.emacs.orgmode/31150/focus=31432][here]], but adapted to use latexmk
     4.20 or higher.
     #+begin_src emacs-lisp
       (defun my-auto-tex-cmd ()
         "When exporting from .org with latex, automatically run latex,
          pdflatex, or xelatex as appropriate, using latexmk."
         (let ((texcmd)))
         ;; default command: oldstyle latex via dvi
         (setq texcmd "latexmk -pdfdvi -quiet %f")
         ;; bibtex -> dvi -> pdf
         (if (string-match "LATEX_CMD: texbibtex" (buffer-string))
             (setq texcmd "latexmk -pdfdvi -bibtex -quiet %f"))
         ;; bibtex -> pdf
         (if (string-match "LATEX_CMD: pdfbibtex" (buffer-string))
             (setq texcmd "latexmk -pdf -bibtex -quiet %f"))
         ;; tex -> dvi -> pdf
         (if (string-match "LATEX_CMD: dvipdfps" (buffer-string))
             (setq texcmd "latexmk -pdfdvi -quiet %f"))
         ;; pdflatex -> pdf
         (if (string-match "LATEX_CMD: pdflatex" (buffer-string))
             (setq texcmd "latexmk -pdf -quiet %f"))
         ;; xelatex -> pdf
         (if (string-match "LATEX_CMD: xelatex" (buffer-string))
             (setq texcmd "latexmk -pdflatex=xelatex -pdf -quiet %f"))
         ;; LaTeX compilation command
         (setq org-latex-to-pdf-process (list texcmd)))

         (add-hook 'org-export-latex-after-initial-vars-hook 'my-auto-tex-cmd)
     #+end_src

     Make links work as labels in exports to latex
     #+begin_src emacs-lisp
       (setq org-export-latex-hyperref-format "\\ref{%s}")
     #+end_src

**** Org LaTeX export with(out) default packages
     Resetting the org default exported latex packages list. It messes
     with my latex. Storing an extra list for insertion if needed.
     #+begin_src emacs-lisp :tangle yes
       (setq org-latex-default-packages-bkup-alist
             org-latex-default-packages-alist)
       (setq org-latex-default-packages-alist ())
     #+end_src

**** Org LaTeX export with extra packages
     :PROPERTIES:
     :tangle:   no
     :END:
     Specify default packages to be included in every tex file, whether
     pdflatex or xelatex. This is kept as an example. Some packages are
     still included in the output.
     #+begin_src emacs-lisp
       (setq org-export-latex-packages-alist
             '(("" "graphicx" t)
               ("" "longtable" nil)
               ("" "float" nil)))
     #+end_src

     Define packages for each latex command. Using latexmk...
     #+begin_src emacs-lisp
       (defun my-auto-tex-parameters ()
         "Automatically select the tex packages to include."
         ;; default packages for ordinary latex or pdflatex export
         (setq org-export-latex-default-packages-alist
               '(("" "graphicx" t)
                 ("" "longtable" nil)
                 ("" "float" nil)
                 ("AUTO" "inputenc" t)
                 ("T1"   "fontenc"   t)
                 (""     "fixltx2e"  t)
                 (""     "hyperref"  nil)))

         ;; Packages to include when xelatex is used
         (if (string-match "LATEX_CMD: xelatex" (buffer-string))
             (setq org-export-latex-default-packages-alist
                   '(("" "fontspec" t)
                     ("" "xunicode" t)
                     ("" "url" t)
                     ("" "rotating" t)
                     ("american" "babel" t)
                     ("babel" "csquotes" t)
                     ("" "soul" t)
                     ("xetex" "hyperref" nil)
                     )))

         (if (string-match "LATEX_CMD: xelatex" (buffer-string))
             (setq org-export-latex-classes
                   (cons '("article"
                           "\\documentclass[11pt,article,oneside]{memoir}"
                           ("\\section{%s}" . "\\section*{%s}")
                           ("\\subsection{%s}" . "\\subsection*{%s}")
                           ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                           ("\\paragraph{%s}" . "\\paragraph*{%s}")
                           ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
                         org-export-latex-classes))))
       (add-hook 'org-export-latex-after-initial-vars-hook 'my-auto-tex-parameters)
     #+end_src

**** Org RefTeX integration
     :PROPERTIES:
     :CUSTOM_ID: org-reftex
     :END:
     source: [[http://tincman.wordpress.com/2011/01/04/research-paper-management-with-emacs-org-mode-and-reftex/][here]]
     #+begin_src emacs-lisp
       (when (el-get-package-exists-p "reftex")
         (defun org-mode-reftex-setup ()
           (load-library "reftex")
           (and (buffer-file-name) (file-exists-p (buffer-file-name))
                (progn
                  ;; enable auto-revert-mode to update reftex when bibtex file changes on disk
                  ;; (global-auto-revert-mode t)
                  (setq TeX-master t)
                  ;; (reftex-parse-all)
                  ;; add a custom reftex cite format to insert links
                  (reftex-set-cite-format
                   '((?b . "[[bib:%l][%l-bib]]")
                     (?n . "[[notes:%l][%l-notes]]")
                     (?p . "[[papers:%l][%l-paper]]")
                     (?t . "%t")
                     (?c . "\\cite{%l}")
                     (?h . "*** %2a %y %t\n:PROPERTIES:\n:Custom_ID: %l\n:END:\n[[papers:%l][%l-paper]]")))))
           (define-key org-mode-map (kbd "C-c )") 'reftex-citation)
           (define-key org-mode-map (kbd "C-c (") 'org-mode-reftex-search))

         (el-get-package-exists-p "reftex") (add-hook 'org-mode-hook 'org-mode-reftex-setup))
     #+end_src

     Jump to entry
     #+begin_src emacs-lisp
       (when (el-get-package-exists-p "reftex")
         (defun org-mode-reftex-search ()
           ;;jump to the notes for the paper pointed to at from reftex search
           (interactive)
           (org-open-link-from-string (format "[[notes:%s]]" (substring (format "%s" (reftex-citation t)) 1 -1)))))
     #+end_src

     Paths to files. This might be more general than reftex.
     #+begin_src emacs-lisp
       (setq org-link-abbrev-alist
             '(("bib" . "~/research/bibliography.bib::%s")
               ("notes" . "~/research/notes.txt::#%s")
               ("papers" . "~/research/papers/%s.pdf")))
     #+end_src

**** Org reveal
     [[https://github.com/hakimel/reveal.js][reveal.js]] is a presentation creation package that creates HTML5
     presentations. It can be integrated in org-mode export with [[https://github.com/yjwen/org-reveal][org-reveal]].

     To setup and create presentations with org-mode see instructions [[http://blog.jr0cket.co.uk/2013/09/create-html5-presentations-emacs-revealjs.html][here]].

     Set org-reveal-root path.
     #+begin_src emacs-lisp
       (when (el-get-package-exists-p "org-reveal")
         (setq org-reveal-root
               (concat "file://" (expand-file-name "~/apps/reveal.js"))))
     #+end_src

**** Org in startup scratch
     Make inital scratch buffer an org-mode buffer
     #+begin_src emacs-lisp
       (setq initial-major-mode 'org-mode)
     #+end_src

     Give it a little bit of emacs-lisp
     #+begin_src emacs-lisp
       (setq initial-scratch-message "\n#+begin_src emacs-lisp\n\n#+end_src\n\n")
     #+end_src
**** MobileOrg
     Mobile org push/pull directory
     #+begin_src emacs-lisp
       (setq org-mobile-directory "~/Ubuntu One/MobileOrg" )
       (setq org-mobile-inbox-for-pull "~/Ubuntu One/MobileOrg/from-mobile.org" )
     #+end_src

     #+begin_src emacs-lisp
       (setq org-mobile-files '(
                                "~/notebook/notes.org"
                                "~/notebook/todo.org"))
     #+end_src

     Pull at startup
     #+begin_src emacs-lisp :tangle no
       (add-hook 'after-init-hook 'org-mobile-pull)
     #+end_src

     Push at exit
     #+begin_src emacs-lisp :tangle no
       (add-hook 'kill-emacs-hook 'org-mobile-push)
     #+end_src

*** Edit with emacs Chrome(ium)
    "Edit with emacs" in any text area in the browser. Requires
    edit-server.el. Just needs to start emacs first
    with edit-server installed.
    #+begin_src emacs-lisp
      (when (el-get-package-exists-p "edit-server")
        (edit-server-start))
    #+end_src

*** Gnus
    Gnus is said to be hard to setup. It turns out it's not to bad.
    Sources for setup: [[http://eschulte.github.io/emacs-starter-kit/starter-kit-gnus-imap.html][here]] and [[https://github.com/eschulte/emacs24-starter-kit/blob/master/starter-kit-gnus.org][here]]. Simple stuff on how to learn how
    to use gnus can be found [[http://www.emacswiki.org/emacs/GnusGmail#toc13][here]] and [[http://www.emacswiki.org/emacs/CategoryGnus#toc2][here]].

    To get gnus working the correct credentials needs to be put
    in =~/.authinfo=

    #+begin_src emacs-lisp :tangle (expand-file-name "gnus" emacs-init-dir)
      ;; gnus is edited from within ~/.emacs.d/emacs-init.org if you have
      ;; el-get gnus package installed. Who knows what will happen if you
      ;; change something here...
    #+end_src

    Reading mail with gnus
    #+begin_src emacs-lisp :tangle (expand-file-name "gnus" emacs-init-dir)
      (when (el-get-package-exists-p "gnus")
        (setq gnus-select-method
              '(nnimap "Mail"
                       (nnimap-address "imap.fripost.org")
                       (nnimap-server-port 993)
                       (nnimap-stream ssl))))
    #+end_src

    Sending mail with gnus
    #+begin_src emacs-lisp :tangle (expand-file-name "gnus" emacs-init-dir)
      (when (el-get-package-exists-p "gnus")
        (setq message-send-mail-function 'smtpmail-send-it
              smtpmail-starttls-credentials '(("smtp.fripost.org" 587 nil nil))
              smtpmail-auth-credentials '(("smtp.fripost.org" 587 user-mail-address nil))
              smtpmail-default-smtp-server "smtp.fripost.org"
              smtpmail-smtp-server "smtp.fripost.org"
              smtpmail-smtp-service 587
              starttls-use-gnutls t))
    #+end_src

*** Yasnippet
    :PROPERTIES:
    :CUSTOM_ID: yasnippet
    :END:
    - [[http://code.google.com/p/yasnippet/][yasnippet]] is yet another snippet expansion system for Emacs. It is
      inspired by TextMate's templating syntax.
     - watch the [[http://www.youtube.com/watch?v=vOj7btx3ATg][video on YouTube]]
     - see the [[http://yasnippet.googlecode.com/svn/trunk/doc/index.html][intro and tutorial]]

    Install yasnippet with el-get manually
    #+begin_src emacs-lisp :tangle no
      (el-get 'sync '(yasnippet))
    #+end_src

    Activate yasnippet everywhere
    #+begin_src emacs-lisp :tangle yes
      (when (el-get-package-exists-p "yasnippet")
        (yas-global-mode 1))
    #+end_src

    Above does not work for org-mode, therefore do it here.
    #+begin_src emacs-lisp :tangle yes
      (when (el-get-package-exists-p "yasnippet")
        (add-hook 'org-mode-hook
                  '(lambda ()
                     (yas-minor-mode))))
    #+end_src

*** Custom functions
    Self defined functionality
**** Emacs strip tease
     source: [[http://bzg.fr/emacs-strip-tease.html][here]].

     Hide the mode line in current buffer.
     See [[http://bzg.fr/emacs-hide-mode-line.html][emacs-hide-mode-line]]
     : M-x hidden-mode-line-mode
     #+begin_src emacs-lisp
       (defvar-local hidden-mode-line-mode nil)
       (defvar-local hide-mode-line nil)

       (define-minor-mode hidden-mode-line-mode
         "Minor mode to hide the mode-line in the current buffer."
         :init-value nil
         :global nil
         :variable hidden-mode-line-mode
         :group 'editing-basics
         (if hidden-mode-line-mode
             (setq hide-mode-line mode-line-format
                   mode-line-format nil)
           (setq mode-line-format hide-mode-line
                 hide-mode-line nil))
         (force-mode-line-update)
         ;; Apparently force-mode-line-update is not always enough to
         ;; redisplay the mode-line
         (redraw-display)
         (when (and (called-interactively-p 'interactive)
                    hidden-mode-line-mode)
           (run-with-idle-timer
            0 nil 'message
            (concat "Hidden Mode Line Mode enabled.  "
                    "Use M-x hidden-mode-line-mode to make the mode-line appear."))))
     #+end_src

     Activate hidden-mode-line-mode. Does not work on startup
     #+begin_src emacs-lisp :tangle no
       (hidden-mode-line-mode t)
     #+end_src

     Make the buffer center focused.
     A small minor mode to use a big fringe (side bars).
     #+begin_src emacs-lisp :tangle yes
       (defvar bzg-big-fringe-mode nil)
       (define-minor-mode bzg-big-fringe-mode
         "Minor mode to hide the mode-line in the current buffer."
         :init-value nil
         :global t
         :variable bzg-big-fringe-mode
         :group 'editing-basics
         (if (not bzg-big-fringe-mode)
             (set-fringe-style nil)
           (set-fringe-mode
            (/ (- (frame-pixel-width)
                  (* 66 (frame-char-width)))
               2))))
     #+end_src

     Get rid of the indicators in the fringe:
     #+begin_src emacs-lisp :tangle no
       (mapcar (lambda(fb) (set-fringe-bitmap-face fb 'org-hide))
               fringe-bitmaps)
     #+end_src

     Set background colour for fringes.
     #+begin_src emacs-lisp :tangle yes
       (custom-set-faces
        '(fringe ((t (:background "white")))))
     #+end_src

     Command to toggle the display of the mode-line as a header:
     : M-x mode-line-in-header
     #+begin_src emacs-lisp :tangle yes
       (defvar-local header-line-format nil)
       (defun mode-line-in-header ()
         (interactive)
         (if (not header-line-format)
             (setq header-line-format mode-line-format
                   mode-line-format nil)
           (setq mode-line-format header-line-format
                 header-line-format nil))
         (set-window-buffer nil (current-buffer)))
       (global-set-key (kbd "C-s-SPC") 'mode-line-in-header)
     #+end_src

*** Publish emacs init
    Publishing require the htmlize package. Can be found in
    emacs-goodies or as a standalone elisp file. I use el-get in
    emacs-init-publish to make sure htmlize is installed and
    initialized.

    Evaluate this to publish this file to ./doc
    #+begin_src emacs-lisp :tangle no
      (emacs-init-load "emacs-init-publish.org")
    #+end_src

* Load User/System Specific Files
  :PROPERTIES:
  :CUSTOM_ID: user-system-configs
  :END:
  You can keep system- or user-specific customizations here in either
  raw emacs-lisp files or as embedded elisp in org-mode files (as done
  in this document).

  You can keep elisp source in the =src= directory. Packages loaded
  from here will override those installed by ELPA. This is useful if
  you want to track the development versions of a project, or if a
  project is not in elpa.

  After we've loaded all the Emacs Init defaults, lets load the User's
  stuff.
  #+begin_src emacs-lisp
    (cl-flet ((sk-load (base)
                    (let* ((path          (expand-file-name base emacs-init-dir))
                           (literate      (concat path ".org"))
                           (encrypted-org (concat path ".org.gpg"))
                           (plain         (concat path ".el"))
                           (encrypted-el  (concat path ".el.gpg")))
                      (cond
                       ((file-exists-p encrypted-org) (org-babel-load-file encrypted-org))
                       ((file-exists-p encrypted-el)  (load encrypted-el))
                       ((file-exists-p literate)      (org-babel-load-file literate))
                       ((file-exists-p plain)         (load plain)))))
           (remove-extension (name)
                             (string-match "\\(.*?\\)\.\\(org\\(\\.el\\)?\\|el\\)\\(\\.gpg\\)?$" name)
                             (match-string 1 name)))
      (let ((elisp-dir (expand-file-name "src" emacs-init-dir))
            (user-dir (expand-file-name user-login-name emacs-init-dir)))
        ;; add the src directory to the load path
        (add-to-list 'load-path elisp-dir)
        ;; load specific files
        (when (file-exists-p elisp-dir)
          (let ((default-directory elisp-dir))
            (normal-top-level-add-subdirs-to-load-path)))
        ;; load system-specific config
        (sk-load system-name)
        ;; load user-specific config
        (sk-load user-login-name)
        ;; load any files in the user's directory
        (when (file-exists-p user-dir)
          (add-to-list 'load-path user-dir)
          (mapc #'sk-load
                (remove-duplicates
                 (mapcar #'remove-extension
                         (directory-files user-dir t ".*\.\\(org\\|el\\)\\(\\.gpg\\)?$"))
          :test #'string=)))))
  #+end_src

** Settings from M-x customize
   #+begin_src emacs-lisp
     (load custom-file 'noerror)
   #+end_src

* Footnotes

[1] If you already have a directory at =~/.emacs.d= move it out of the
    way and put this there instead.

[2] The emacs init uses [[http://orgmode.org/][Org Mode]] to load embedded elisp code directly
    from literate Org-mode documents. Org is included with Emacs for
    later version.
