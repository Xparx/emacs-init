#+TITLE: Emacs Init
#+OPTIONS: toc:2 num:nil ^:nil
#+STARTUP:  hideblocks

#+begin_quote
  Emacs outshines all other editing software in approximately the same
  way that the noonday sun does the stars. It is not just bigger and
  brighter; it simply makes everything else vanish.

  -- Neal Stephenson, "In the Beginning was the Command Line"
#+end_quote

* Introduction
  :PROPERTIES:
  :CUSTOM_ID: introduction
  :END:
  - emacs24-starter-kit :: This file is inspired by and in part copied
       from emacs24-starter-kit. The latest version can be found at
       http://github.com/eschulte/emacs24-starter-kit/
    #+begin_src sh
      git clone https://github.com/eschulte/emacs24-starter-kit.git
    #+end_src
    
    If you want to keep your regular =~/.emacs.d= in place and just launch
    a single instance, using the starter kit, try the following invocation:
    #+begin_src sh
      emacs -q -l ~/src/emacs24-starter-kit/init.el
    #+end_src

** Why modify the emacs24-starter-kit?
   The reasons are simple. I want a "me" centered emacs initialization
   rather then a starter-kit centered one. This means that I should be
   able to use it the way i feel works for me. Another reason is that
   introducing alot of new "features" which I haven't tested makes
   emacs work very far from factory settings without me knowing what
   is what or where it originated from.
** Structure
   :PROPERTIES:
   :CUSTOM_ID: structure
   :END:
   The =init.el= file is where everything begins. It is loaded
   automatically by Emacs on startup, its sole purpose is to load the
   elisp code embedded in this file.  This file then loads some core
   configurations and packages which should be generally useful, and
   goes on to load user-specific configuration files from the
   following locations mentioned in [[customization]] immediately below.

** Customization
   :PROPERTIES:
   :CUSTOM_ID: customization
   :tangle:   no
   :END:

   The defaults built into the emacs init are only the beginning of
   most users customization of Emacs to suite their needs.  This file
   provides a number of places for additional user and system
   specific customization.

   - User specific config :: Your personal configuration information can
	be stored in a user-specific-config file.  This is the file named
	after your user with the extensions =.el= or =.org= [2].  If
	you're unsure of your user name evaluate the following code block
	to find out.
     #+begin_src sh
       echo $USER
     #+end_src

	If your configuration starts to feel cramped in a single file
	(although with the nested headlines of an Org-mode file, that
	could take a while) and you want to stretch your config's legs,
	you can also create a directory named after your system user
	name.  If a such a directory exists, it will be added to the
	load-path, and any elisp or org-mode w/embedded elisp files in it
	will be loaded.

   - System specific config :: Finally, you may want to configure
	different settings for different machines.  The Emacs Init will
	look for a file named after the current hostname ending in =.el=
	or =.org= which will allow host-specific configuration. If
	you're unsure of your hostname the following can be executed to
	find out.
     #+begin_src sh
       hostname
     #+end_src

   - Installing more elisp libraries :: The easiest way to install new
        libraries is through the 
     - Emacs Lisp Package Archive :: (see [[#emacs-lisp-package-archive][EmacsLisp Package Archive]]
          below).  When a library is not available through ELPA you
          can grab it's source and place it directly in the =src=
          directory. Any packages found there will automatically be
          added to your load-path when Emacs starts up. I also install
          packages through el-get.
     - El-get :: (see [[#emacs-lisp-get][El-get]] below). The other easy way to install new
                 packages is with the package manager el-get. El-get
                 will automatically initiate the package to be used
                 with .emacs
   - Misc :: Some additional miscellaneous configuration and getting
	     started suggestions
     - First see the [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Customization.html#Customization][Customization]] node in the Emacs manual. Available
       online or through the =info= command (run with =C-h i=).
     - read the following [[http://www.gnu.org/software/emacs/elisp/html_node/Key-Binding-Conventions.html][Key-Binding-Conventions]] before defining too
       many personal key bindings

** Emacs Lisp Package Archive
   :PROPERTIES:
   :CUSTOM_ID: emacs-lisp-package-archive
   :END:

   Libraries from [[http://tromey.com/elpa][ELPA]] are preferred when available since dependencies
   are handled automatically, and the burden to update them is removed
   from the user. ELPA is now an official part of Emacs so no special
   configuration is required to download and install packages.  Packages
   installed through ELPA will be stored in the =elpa/= sub-directory of
   this directory.

** El-get
   :PROPERTIES:
   :CUSTOM_ID: el-get-package-manager
   :END:
   El-get is a /(foxy spanish, Arriba! Arriba!)/ package manager using
   custome recipes for installing and initializing emacs packages from
   a wide rangeof different repositories. The source can be fetched
   [[https://github.com/dimitri/el-get][here]], by doing:
   #+begin_src sh
     git clone https://github.com/dimitri/el-get.git
   #+end_src
   This can be automated with a [[Lazy%20install][Lazy install]] or regular [[Install]], which
   is the default in this emacs-init.

* Implementation
  :PROPERTIES:
  :CUSTOM_ID: implementation
  :END:

  This section contains all code implemented in Emacs Init. It
  is probably safe to stop reading at this point unless you are
  interested in the actual code implemented in Emacs Init.

** emacs init basics
   - Load path etc ::
     #+name: emacs-init-load-paths
     #+begin_src emacs-lisp
       (add-to-list 'load-path emacs-init-dir)
       (setq autoload-file (concat emacs-init-dir "loaddefs.el"))
       (setq package-user-dir (concat emacs-init-dir "elpa"))
       (setq custom-file (concat emacs-init-dir "custom.el"))
     #+end_src
   - Ubiquitous Packages ::  which should be loaded on startup rather than
     autoloaded on demand since they are likely to be used in every
     session.
     #+name: emacs-init-load-on-startup
     #+begin_src emacs-lisp
       (require 'saveplace)
       (require 'ffap)
       (require 'uniquify)
       (require 'ansi-color)
       (require 'recentf)
     #+end_src     
   - ELPA archive repositories :: 
     #+begin_src emacs-lisp
       (setq package-archives
             '(("original"    . "http://tromey.com/elpa/")
               ("gnu"         . "http://elpa.gnu.org/packages/")
               ("org"         . "http://orgmode.org/elpa/")
               ("marmalade"   . "http://marmalade-repo.org/packages/")))
       (package-initialize)
     #+end_src
     - Packages to be installed by default
     #+begin_src emacs-lisp :tangle no
       ;; Put more packages here if more default should be used.
       ;; This ends up in src/ not el-get/.
       (defvar emacs-init-packages
         (list 'yasnippet-bundle)
         "Libraries that should be installed by default.")

       (unless package-archive-contents
         (package-refresh-contents))
       (dolist (package emacs-init-packages)
         (unless (package-installed-p package)
           (package-install package)))
     #+end_src
   - El-get initialization ::  # <<Lazy Install>>
     - Lazy Install :: To setup el-get the simple way one needs only
       to evaluate the following emacs lisp block
       #+begin_src emacs-lisp :tangle no
         ;; So the idea is that you copy/paste this code into your *scratch* buffer,
         ;; hit C-j, and you have a working el-get.
         (url-retrieve
          "https://raw.github.com/dimitri/el-get/master/el-get-install.el"
          (lambda (s)
            (goto-char (point-max))
            (eval-print-last-sexp)))
       #+end_src
     - Install :: # <<Install>>
       #+begin_src emacs-lisp
         (setq el-get-dir (expand-file-name "el-get" emacs-init-dir))
         (add-to-list 'load-path (concat emacs-init-dir "el-get/el-get"))
         (unless (require 'el-get nil t)
           (url-retrieve
            "https://raw.github.com/dimitri/el-get/master/el-get-install.el"
            (lambda (s)
              (goto-char (point-max))
              (eval-print-last-sexp))))

         (el-get 'sync)
       #+end_src
   - Functions for loading other parts of the emacs init ::
     #+name: emacs-init-load
     #+begin_src emacs-lisp
       (defun emacs-init-load (file &optional header-or-tag)
         "Load configuration from other emacs-init-*.org files.
       If the optional argument is the id of a subtree then only
       configuration from within that subtree will be loaded.  If it is
       not an id then it will be interpreted as a tag, and only subtrees
       marked with the given tag will be loaded.

       For example, to load all of emacs-init-lisp.org simply
       add (emacs-init-load \"lisp\") to your configuration.
       To load only the 'window-system' config from
       emacs-init-misc-recommended.org add
        (emacs-init-load \"misc-recommended\" \"window-system\")
       to your configuration."
         (let ((file (expand-file-name (if (string-match "emacs-init-.+\.org" file)
                                           file
                                         (format "emacs-init-%s.org" file))
                                       emacs-init-dir)))
           (org-babel-load-file
            (if header-or-tag
                (let* ((base (file-name-nondirectory file))
                       (dir  (file-name-directory file))
                       (partial-file (expand-file-name
                                      (concat "." (file-name-sans-extension base)
                                              ".part." header-or-tag ".org")
                                      dir)))
                  (unless (file-exists-p partial-file)
                    (with-temp-file partial-file
                      (insert
                       (with-temp-buffer
                         (insert-file-contents file)
                         (save-excursion
                           (condition-case nil ;; collect as a header
                               (progn
                                 (org-link-search (concat"#"header-or-tag))
                                 (org-narrow-to-subtree)
                                 (buffer-string))
                             (error ;; collect all entries with as tags
                              (let (body)
                                (org-map-entries
                                 (lambda ()
                                   (save-restriction
                                     (org-narrow-to-subtree)
                                     (setq body (concat body "\n" (buffer-string)))))
                                 header-or-tag)
                                body))))))))
                  partial-file)
              file))))
     #+end_src

* Emacs init core
   :PROPERTIES:
   :CUSTOM_ID: emacs-init-core
   :tangle:   yes
   :END:
   These sub-trees contain the remainder of the core of Emacs Init.  All of
   the code in this section should be loaded by emacs used on any
   machine and user.
** Emacs bindings
   :PROPERTIES:
   :tangle:   yes
   :CUSTOM_ID: emacs-bindings
   :END:
   Custom keybindings
*** Align your code in a pretty way.
    #+begin_src emacs-lisp
      (global-set-key (kbd "C-x \\") 'align-regexp)
    #+end_src
*** Completion that uses many different methods to find options
    #+begin_src emacs-lisp
      (global-set-key (kbd "M-/") 'hippie-expand)
    #+end_src

*** Font size
    #+begin_src emacs-lisp
      (define-key global-map (kbd "C-+") 'text-scale-increase)
      (define-key global-map (kbd "C--") 'text-scale-decrease)
    #+end_src

*** Use regex searches by default
    #+begin_src emacs-lisp :tangle yes
      (global-set-key (kbd "C-s") 'isearch-forward-regexp)
      (global-set-key (kbd "C-r") 'isearch-backward-regexp)
      (global-set-key (kbd "C-M-s") 'isearch-forward)
      (global-set-key (kbd "C-M-r") 'isearch-backward)
    #+end_src

*** File finding
    #+begin_src emacs-lisp :tangle yes
      (global-set-key (kbd "C-x M-f") 'ido-find-file-other-window)
      (global-set-key (kbd "C-x C-M-f") 'find-file-in-project)
      (global-set-key (kbd "C-x C-p") 'find-file-at-point)
      (global-set-key (kbd "C-c y") 'bury-buffer)
      (global-set-key (kbd "C-c r") 'revert-buffer)
      (global-set-key (kbd "M-`") 'file-cache-minibuffer-complete)
      (global-set-key (kbd "C-x C-b") 'ibuffer)
    #+end_src

*** Buffer cycling.
    #+begin_src emacs-lisp
      (global-set-key (kbd "C-<prior>") 'previous-buffer) ; Ctrl+PageDown
      (global-set-key (kbd "C-<next>") 'next-buffer) ; Ctrl+PageUp
    #+end_src

*** Help should search more than just commands
    #+begin_src emacs-lisp
      (global-set-key (kbd "C-h a") 'apropos)
    #+end_src

*** Rgrep
    Rgrep is infinitely useful in multi-file projects.
    (see [[elisp:(describe-function 'rgrep)]])
    #+begin_src emacs-lisp
      (define-key global-map "\C-x\C-r" 'rgrep)
    #+end_src

** Magit
   :PROPERTIES:
   :CUSTOM_ID: magit
   :END:
*** Install and sync magit repository with el-get
    #+begin_src emacs-lisp
      (el-get 'sync '(magit))
    #+end_src
** Misc
   :PROPERTIES:
   :CUSTOM_ID: misc
   :END:
*** Don't clutter up directories with files~
    Rather than saving backup files scattered all over the file system,
    let them live in the =backups/= directory inside of the emacs init.
    #+begin_src emacs-lisp
      (setq backup-directory-alist `(("." . ,(expand-file-name
                                              (concat emacs-init-dir "backups")))))
    #+end_src
*** Make colors work in M-x shell
    #+begin_src emacs-lisp
      (add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
    #+end_src

*** Color Themes
    :PROPERTIES:
    :CUSTOM_ID: color-theme
    :END:
   The [[http://www.nongnu.org/color-theme/][Color Themes]] package provides support for changing, saving,
   sharing Emacs color themes.  To view and apply color themes available
   on your system run =M-x color-theme-select=.  See the color theme
   website and EmacsWiki pages for more information. 
   - http://www.nongnu.org/color-theme/
   - http://www.emacswiki.org/emacs/ColorTheme
   - https://github.com/bbatsov/zenburn-emacs


   Add list to load-theme path. use [[elisp:load-theme][load-theme]] RET "theme" to choose a theme.
   #+begin_src emacs-lisp
     (add-to-list 'custom-theme-load-path (concat emacs-init-dir "themes"))
   #+end_src

   Load my prefered theme if availible
   #+begin_src emacs-lisp
     (condition-case nil 
          (load-theme 'test t) 
          (error "no theme loaded"))
   #+end_src

*** Aspell and dictionaries
    #+begin_src emacs-lisp
      (setq-default ispell-program-name "aspell")
    #+end_src

    Set default ispell dict
    #+begin_src emacs-lisp
      (setq ispell-dictionary "en")
    #+end_src

    Set ispell personal dictionary, this has some weird consequences
    (what consequences!!)
    #+begin_src emacs-lisp
      (setq ispell-personal-dictionary
            (concat emacs-init-dir "ispell-personal-dict"))
    #+end_src

*** Open my specific bashrc files in the right mode
    #+begin_src emacs-lisp
      (add-to-list 'auto-mode-alist '("bashrc\\'" . shell-script-mode))
      (add-to-list 'auto-mode-alist '("bash_variables\\'" . shell-script-mode))
      (add-to-list 'auto-mode-alist '("bash_aliases\\'" . shell-script-mode))
    #+end_src

*** Transparently open compressed files
    #+begin_src emacs-lisp
      (auto-compression-mode t)
    #+end_src

*** Save a list of recent files visited.
    #+begin_src emacs-lisp
      (recentf-mode 1)
    #+end_src

*** Highlight matching parentheses when the point is on them.
    #+name: emacs-init-match-parens
    #+begin_src emacs-lisp
      (show-paren-mode 1)
      (set-face-background 'show-paren-match-face (face-background 'default))
      (set-face-foreground 'show-paren-match-face "#def")
      (set-face-attribute 'show-paren-match-face nil :weight 'extra-bold)
    #+end_src

*** Alias for yes-no to y-n choice, init random seed.
    #+begin_src emacs-lisp
      (defalias 'yes-or-no-p 'y-or-n-p)
      ;; Seed the random-number generator
      (random t)
    #+end_src
*** Tramp mode defaults
    #+begin_src emacs-lisp
      (setq tramp-default-method "ssh")
    #+end_src

*** Remove trailing whitespaces
    #+begin_src emacs-lisp
      (add-hook 'before-save-hook 'delete-trailing-whitespace)
    #+end_src
*** Set exec-path same as PATH in bash
    Source: [[http://stackoverflow.com/questions/9663396/how-do-i-make-emacs-recognize-bash-environment-variables-for-compilation][stackoverflow]]
    #+begin_src emacs-lisp
      (let ((path (shell-command-to-string ". ~/.bash_variables; echo -n $PATH")))
       	(setenv "PATH" path)
       	(setq exec-path
              (append
               (split-string-and-unquote path ":")
               exec-path)))
    #+end_src emacs-lisp
** LaTeX mode
   :PROPERTIES:
   :CUSTOM_ID: latex
   :END:
*** Fly spell mode for latex mode
    #+begin_src emacs-lisp
      (add-hook 'LaTeX-mode-hook 'flyspell-mode)
    #+end_src
 
*** Auto fill for latex mode, wrap lines automatically
    #+begin_src emacs-lisp
      (add-hook 'LaTeX-mode-hook 'turn-on-auto-fill)
    #+end_src
 
*** Some auctex specific settings.
    #+begin_src emacs-lisp
      (setq TeX-auto-save t)
      (setq TeX-parse-self t)
      (setq-default TeX-master nil)
    #+end_src

** Python
   :PROPERTIES:
   :CUSTOM_ID: python
   :END:
   Support for the Python programming language.
*** Use Python's python-mode.el instead of Emacs' python.el
    :PROPERTIES:
    :CUSTOM_ID: python-mode
    :END:
    Install and sync python-mode repository with el-get
    #+begin_src emacs-lisp
      (el-get 'sync '(python-mode))
    #+end_src
    Replace the Python mode that comes with Emacs by the Python mode
    supplied by the Python distribution itself.
    #+begin_src emacs-lisp
      (add-to-list 'auto-mode-alist '("\\.py\\'" . python-mode))
      (add-to-list 'interpreter-mode-alist '("python" . python-mode))
    #+end_src
    
*** Use IPython if =ipython= command is present
   :PROPERTIES:
   :CUSTOM_ID: ipython
   :END:
    Install and sync ipython repository with el-get
    #+begin_src emacs-lisp
      (el-get 'sync '(ipython))
    #+end_src
    If an =ipython= executable is on the path, then assume that
    IPython is the preferred method for python evaluation.
    #+begin_src emacs-lisp
      (when (executable-find "ipython")
        (setq org-babel-python-mode 'python-mode))
    #+end_src
*** Use Cython mode
   :PROPERTIES:
   :CUSTOM_ID: cython
   :tangle:   no
   :END:
    Install and sync cython-mode repository with el-get
    #+begin_src emacs-lisp
      (el-get 'sync '(cython-mode))
    #+end_src
    Set cython-mode file associations
    #+begin_src emacs-lisp
      (add-to-list 'auto-mode-alist '("\\.pyx\\'" . cython-mode))
      (add-to-list 'auto-mode-alist '("\\.pxd\\'" . cython-mode))
      (add-to-list 'auto-mode-alist '("\\.pxi\\'" . cython-mode))
    #+end_src
** Code-modes
*** cedet
    I am not sure what this does expect enableing cedet when coding,
    whatever that means
    #+begin_src emacs-lisp
      (global-ede-mode 1)
      (require 'semantic/sb)
      (semantic-mode 1)
    #+end_src

*** gnuplot-mode
    :PROPERTIES:
    :CUSTOM_ID: gnuplot
    :END:
    Install and sync gnuplot-mode repository with el-get
    #+begin_src emacs-lisp
      (el-get 'sync '(gnuplot-mode))
    #+end_src
    Associate .gp files with gnuplot.
    #+begin_src emacs-lisp
      (setq auto-mode-alist
            (append '(("\\.gp$" . gnuplot-mode)) auto-mode-alist))
    #+end_src

*** MATLAB-mode
    :PROPERTIES:
    :CUSTOM_ID: matlab
    :tangle:   no
    :END:
    Install and sync matlab-mode repository with el-get
    #+begin_src emacs-lisp
      (el-get 'sync '(matlab-mode))
    #+end_src

    The indent function -1 will couse functions to not indent
    #+begin_src emacs-lisp
      (add-to-list 'auto-mode-alist '("\\.m$" . matlab-mode))
      (setq matlab-indent-function nil)
      (setq matlab-shell-command "matlab")
    #+end_src

    Make sure matlab does not auto wrap lines. It's really enoying and
    it does not work! Do manually with 'M-q'
    #+begin_src emacs-lisp
      (add-hook 'matlab-mode-hook '(lambda () (auto-fill-mode -1)))
    #+end_src

*** Maxima-mode
    :PROPERTIES:
    :tangle:   no
    :CUSTOM_ID: maxima
    :END:
    Install and sync maxima-mode repository with el-get
    #+begin_src emacs-lisp
      (el-get 'sync '(maxima-mode))
    #+end_src

    Why is the load-path here so specific
    #+begin_src emacs-lisp
      (setq auto-mode-alist (cons '("\\.max" . maxima-mode) auto-mode-alist))
      (setq load-path (cons  "/usr/share/maxima/5.9.2/emacs" load-path))
      (autoload 'maxima "maxima" "Running Maxima interactively" t)
      (autoload 'maxima-mode "maxima" "Maxima editing mode" t)
    #+end_src

** Org Mode
** Publish emacs init
** Yasnippet
   :PROPERTIES:
   :tangle:   no
   :CUSTOM_ID: yasnippet
   :END:
    - [[http://code.google.com/p/yasnippet/][yasnippet]] is yet another snippet expansion system for Emacs. It is
     inspired by TextMate's templating syntax.
     - watch the [[http://www.youtube.com/watch?v=vOj7btx3ATg][video on YouTube]]
     - see the [[http://yasnippet.googlecode.com/svn/trunk/doc/index.html][intro and tutorial]]

     Load the yasnippet bundle, probably done automatically with el-get
     #+begin_src emacs-lisp :tangle no
       (add-to-list 'load-path
                    (expand-file-name  "yasnippet"
                                       (expand-file-name "el-get"
                                                         emacs-init-dir)))
       (require 'yasnippet)
       (yas/initialize)
     #+end_src

     Load the snippets defined in the =./snippets/= directory
     #+begin_src emacs-lisp :tangle no
       (yas/load-directory (expand-file-name "snippets" emacs-init-dir))
     #+end_src

     The latest version of yasnippets doesn't play well with Org-Mode, the
     following function allows these two to play nicely together.
     #+begin_src emacs-lisp :tangle no
       (defun yas/org-very-safe-expand ()
         (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))

       (defun yas/org-setup ()
         ;; yasnippet (using the new org-cycle hooks)
         (make-variable-buffer-local 'yas/trigger-key)
         (setq yas/trigger-key [tab])
         (add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
         (define-key yas/keymap [tab] 'yas/next-field))

       (add-hook 'org-mode-hook #'yas/org-setup)
     #+end_src

* Load User/System Specific Files
  :PROPERTIES:
  :tangle:   no
  :CUSTOM_ID: user-system-configs
  :END:
  You can keep system- or user-specific customizations here in either
  raw emacs-lisp files or as embedded elisp in org-mode files (as done
  in this document).

  You can keep elisp source in the =src= directory. Packages loaded
  from here will override those installed by ELPA. This is useful if
  you want to track the development versions of a project, or if a
  project is not in elpa.

  After we've loaded all the Emacs Init defaults, lets load the User's stuff.
  #+begin_src emacs-lisp
    (flet ((sk-load (base)
  	      (let* ((path          (expand-file-name base emacs-init-dir))
  		     (literate      (concat path ".org"))
  		     (encrypted-org (concat path ".org.gpg"))
  		     (plain         (concat path ".el"))
  		     (encrypted-el  (concat path ".el.gpg")))
  		(cond
  		 ((file-exists-p encrypted-org) (org-babel-load-file encrypted-org))
  		 ((file-exists-p encrypted-el)  (load encrypted-el))
  		 ((file-exists-p literate)      (org-babel-load-file literate))
  		 ((file-exists-p plain)         (load plain)))))
  	    (remove-extension (name)
  	      (string-match "\\(.*?\\)\.\\(org\\(\\.el\\)?\\|el\\)\\(\\.gpg\\)?$" name)
  	      (match-string 1 name)))
      (let ((elisp-dir (expand-file-name "src" emacs-init-dir))
  	     (user-dir (expand-file-name user-login-name emacs-init-dir)))
  	 ;; add the src directory to the load path
  	 (add-to-list 'load-path elisp-dir)
  	 ;; load specific files
  	 (when (file-exists-p elisp-dir)
  	   (let ((default-directory elisp-dir))
  	     (normal-top-level-add-subdirs-to-load-path)))
  	 ;; load system-specific config
  	 (sk-load system-name)
  	 ;; load user-specific config
  	 (sk-load user-login-name)
  	 ;; load any files in the user's directory
  	 (when (file-exists-p user-dir)
  	   (add-to-list 'load-path user-dir)
  	   (mapc #'sk-load
  		 (remove-duplicates
  		  (mapcar #'remove-extension
  			  (directory-files user-dir t ".*\.\\(org\\|el\\)\\(\\.gpg\\)?$"))
  		  :test #'string=)))))
  #+end_src

** Settings from M-x customize
   #+begin_src emacs-lisp
     (load custom-file 'noerror)
   #+end_src


* Footnotes

[1] If you already have a directory at =~/.emacs.d= move it out of the
    way and put this there instead.

[2] The emacs init uses [[http://orgmode.org/][Org Mode]] to load embedded elisp code
    directly from literate Org-mode documents.
